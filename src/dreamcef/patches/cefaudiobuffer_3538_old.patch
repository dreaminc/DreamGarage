diff --git a/libcef/browser/audio_mirror_destination.cc b/libcef/browser/audio_mirror_destination.cc
index fd5b269..a0507c4 100644
--- a/libcef/browser/audio_mirror_destination.cc
+++ b/libcef/browser/audio_mirror_destination.cc
@@ -7,6 +7,8 @@
 #include "audio_output_stream.h"
 #include "audio_push_sink.h"
 
+#include "content/public/browser/browser_thread.h"
+#include "media/base/bind_to_current_loop.h"
 
 // Asynchronously query whether this MirroringDestination wants to consume
 // audio sourced from each of the |candidates|.  |results_callback| is run
@@ -14,22 +16,59 @@
 // MirroringDestination.  |results_callback| must be run on the same thread
 // as the one that called QueryForMatches().
 void CefAudioMirrorDestination::QueryForMatches(
-	const std::set<content::AudioMirroringManager::SourceFrameRef>& candidates,
-	const MatchesCallback& results_callback) {
-	std::set<content::AudioMirroringManager::SourceFrameRef> result;
-
-	for (auto& source_frame : candidates) {
-		CefRefPtr<CefBrowserHostImpl> browser =
-			CefBrowserHostImpl::GetBrowserForFrame(source_frame.first,
-				                                   source_frame.second);
-		if (browser == browser_) {
-			result.insert(source_frame);
-		}
-	}
-
-	// Request mirrored audio (duplicate).
-	// TODO: Expose this, mirror vs sink
-	results_callback.Run(result, true);
+    const std::set<content::GlobalFrameRoutingId>& candidates,
+	MatchesCallback results_callback) {
+
+  
+
+	 content::BrowserThread::PostTask(
+            content::BrowserThread::UI, FROM_HERE,
+            base::BindOnce(
+                &CefAudioMirrorDestination::QueryForMatchesOnUIThread, this,
+                candidates,
+                media::BindToCurrentLoop(std::move(results_callback))));
+}
+
+void CefAudioMirrorDestination::QueryForMatchesOnUIThread(
+    const std::set<content::GlobalFrameRoutingId>& candidates,
+    MatchesCallback results_callback) {
+  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
+
+  /*
+  std::set<GlobalFrameRoutingId> matches;
+  WebContents* const contents = tracker_->web_contents();
+  if (contents) {
+    // Add each ID to |matches| if it maps to a RenderFrameHost that maps to the
+    // currently-tracked WebContents.
+    for (const auto& it : candidates) {
+      WebContents* const contents_containing_frame =
+          WebContents::FromRenderFrameHost(
+              RenderFrameHost::FromID(it.child_id, it.frame_routing_id));
+      if (contents_containing_frame == contents)
+        matches.insert(it);
+    }
+  }
+
+  std::move(results_callback).Run(matches, is_duplication_);
+  */
+
+  std::set<content::GlobalFrameRoutingId> result;
+  bool fDuplication = true;
+
+  for (const auto& source_frame : candidates) {
+    CefRefPtr<CefBrowserHostImpl> browser =
+        CefBrowserHostImpl::GetBrowserForFrame(source_frame.child_id,
+                                               source_frame.frame_routing_id);
+
+    if (browser == browser_) {
+      result.insert(source_frame);
+    }
+  }
+
+  // Request mirrored audio (duplicate).
+  // TODO: Expose this, mirror vs sink
+  // results_callback.Run(result, true);
+  std::move(results_callback).Run(result, fDuplication);
 }
 
 // Create a consumer of audio data in the format specified by |params|, and
diff --git a/libcef/browser/audio_mirror_destination.h b/libcef/browser/audio_mirror_destination.h
index 837278c..506fcbb 100644
--- a/libcef/browser/audio_mirror_destination.h
+++ b/libcef/browser/audio_mirror_destination.h
@@ -11,6 +11,7 @@
 #include "base/callback.h"
 #include "base/threading/thread_checker.h"
 #include "content/browser/media/capture/audio_mirroring_manager.h"
+#include "content/public/browser/global_routing_id.h"
 #include "include/cef_base.h"
 #include "include/cef_audio_handler.h"
 #include "libcef/browser/browser_host_impl.h"
@@ -33,8 +34,12 @@ public:
 	// MirroringDestination.  |results_callback| must be run on the same thread
 	// as the one that called QueryForMatches().
 	void QueryForMatches(
-		const std::set<content::AudioMirroringManager::SourceFrameRef>& candidates,
-		const MatchesCallback& results_callback) override;
+		const std::set<content::GlobalFrameRoutingId>& candidates,
+		MatchesCallback results_callback) override;
+
+	void QueryForMatchesOnUIThread(
+            const std::set<content::GlobalFrameRoutingId>& candidates,
+            MatchesCallback results_callback);
 
 	// Create a consumer of audio data in the format specified by |params|, and
 	// connect it as an input to mirroring.  This is used to provide
diff --git a/libcef/browser/audio_output_stream.cc b/libcef/browser/audio_output_stream.cc
index 0cbb947..1ae3238 100644
--- a/libcef/browser/audio_output_stream.cc
+++ b/libcef/browser/audio_output_stream.cc
@@ -57,12 +57,15 @@ void CefAudioOutputStream::Start(AudioSourceCallback* callback) {
 	stop_stream_ = false;
 	callback_ = callback;
 
+	media::SampleFormat sampleFormat =
+            media::SampleFormat::kSampleFormatS16;
+
 	cef_audio_handler_->OnAudioStreamStarted(browser_->GetBrowser(),
 		audio_stream_id_,
 		params_.sample_rate(),
-		params_.channels(),
-		params_.bits_per_sample(),
-		buffer_duration_.InMilliseconds());
+        params_.channels(), 
+		params_.GetBytesPerFrame(sampleFormat) * 8,
+        buffer_duration_.InMilliseconds());
 
 	next_read_time_ = base::TimeTicks::Now();
 
@@ -110,8 +113,10 @@ void CefAudioOutputStream::BufferPacket(bool* source_exhausted) {
 	*source_exhausted = false;
 
 	// Initializing new buffer
+	media::SampleFormat sampleFormat = media::SampleFormat::kSampleFormatS16;
+
 	scoped_refptr<media::DataBuffer> packet =
-		new media::DataBuffer(params_.GetBytesPerBuffer());
+            new media::DataBuffer(params_.GetBytesPerBuffer(sampleFormat));
 
 	int delay = cef_audio_handler_->GetLatencyInMilliseconds(
 		browser_->GetBrowser(),
@@ -121,14 +126,14 @@ void CefAudioOutputStream::BufferPacket(bool* source_exhausted) {
 		int frames_filled = ProvideInput(audio_bus_.get(),
 			base::TimeDelta::FromMilliseconds(delay));
 
-	int packet_size = frames_filled * params_.GetBytesPerFrame();
+	int packet_size = frames_filled * params_.GetBytesPerFrame(sampleFormat);
 
 	if (packet_size > 0) {
 		// Set volume
 		audio_bus_->Scale(volume_);
 
 		// Move data to buffer
-		audio_bus_->ToInterleaved(frames_filled, params_.bits_per_sample() / 8,
+		audio_bus_->ToInterleaved(frames_filled, params_.GetBytesPerFrame(sampleFormat),
 			packet->writable_data());
 
 		packet->set_data_size(packet_size);
diff --git a/libcef/browser/audio_push_sink.cc b/libcef/browser/audio_push_sink.cc
index 60836ad..6af30cb 100644
--- a/libcef/browser/audio_push_sink.cc
+++ b/libcef/browser/audio_push_sink.cc
@@ -28,10 +28,11 @@ CefAudioPushSink::CefAudioPushSink(const media::AudioParameters& params,
 	DCHECK(browser);
 	DCHECK(cef_audio_handler);
 
-	LOG(INFO) << "CEF Audio Push Sink: , channels: " << params_.channels() <<
-		", samplerate: " << params_.sample_rate() <<
-		", buffer_duration: " << params_.GetBufferDuration() <<
-		", bits_per_sample: " << params_.bits_per_sample();
+	LOG(INFO) << "CEF Audio Push Sink: , channels: " << params_.channels()
+                  << ", samplerate: " << params_.sample_rate()
+                  << ", buffer_duration: " << params_.GetBufferDuration();
+        //<<
+        //", bits_per_sample: " << (params_.GetBytesPerFrame() * 8);
 
 	// VAOS can be constructed on any thread, but will DCHECK that all
 	// AudioPushSink methods are called from the same thread.
@@ -54,15 +55,17 @@ CefAudioPushSink::CefAudioPushSink(const media::AudioParameters& params,
 void CefAudioPushSink::OnData(std::unique_ptr<media::AudioBus> source,
 	base::TimeTicks reference_time) {
 
+	media::SampleFormat sampleFormat = media::SampleFormat::kSampleFormatS16;
+
 	const int frames = source->frames();
 
-	const int buffer_size = params_.GetBytesPerBuffer();
+	const int buffer_size = params_.GetBytesPerBuffer(sampleFormat);
 
 	scoped_refptr<media::DataBuffer> packet = new media::DataBuffer(buffer_size);
 
 	//int packet_size = frames * params_.GetBytesPerFrame();
 	int channels = params_.channels();
-	int bits_per_sample = params_.bits_per_sample();
+    int bits_per_sample = params_.GetBytesPerFrame(sampleFormat) * 8;
 
 	//LOG(INFO) << "CefAudioPushSink::OnData " << frames << " frames " << packet_size << " packet size "  << buffer_size << " buffersize";
 
diff --git a/tests/cefsimple/simple_app.cc b/tests/cefsimple/simple_app.cc
index ef1d046..d9cb0ee 100644
--- a/tests/cefsimple/simple_app.cc
+++ b/tests/cefsimple/simple_app.cc
@@ -81,11 +81,12 @@ void SimpleApp::OnContextInitialized() {
   // Check if a "--url=" value was provided via the command-line. If so, use
   // that instead of the default URL.
   url = command_line->GetSwitchValue("url");
-  if (url.empty())
-    url = "http://www.google.com";
+  if (url.empty()) {
+    //url = "http://www.google.com";
 
-  // debug:
-  url = "https://www.youtube.com/watch?v=niKblgZupOc";
+	// debug:
+    url = "https://www.youtube.com/watch?v=niKblgZupOc";
+  }
 
   if (use_views) {
     // Create the BrowserView.
