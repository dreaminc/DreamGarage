# DreamOS Core

EHM = [
	'ehm/EHM.h',
	'ehm/RESULT.h'
]

bounding = [
	'bounding/BoundingBox.h',
	'bounding/BoundingBox.cpp',
	'bounding/BoundingPlane.h',
	'bounding/BoundingPlane.cpp',
	'bounding/BoundingQuad.h',
	'bounding/BoundingQuad.cpp',
	'bounding/BoundingSphere.h',
	'bounding/BoundingSphere.cpp',
	'bounding/BoundingVolume.h',
	'bounding/BoundingVolume.cpp'
]

camera = [
	'camera/camera.h',
	'camera/camera.cpp',
	'camera/stereocamera.h',
	'camera/stereocamera.h'
]

datastructures = [
	'datastructures/CircularBuffer.h',
	'datastructures/CircularBuffer.cpp'
]

dimension = [
	'dimension/DimObj.h',
	'dimension/DimObj.cpp',
	'dimension/DimPlane.h',
	'dimension/DimPlane.cpp',
	'dimension/DimRay.h',
	'dimension/DimRay.cpp'
]

hand = [
	'hand/hand.h',
	'hand/hand.cpp',
	'hand/HandState.h',
	'hand/HandType.h'
]

hysteresis = [
	'hysteresis/HysteresisCylinder.h',
	'hysteresis/HysteresisCylinder.cpp',
	'hysteresis/HysteresisObject.h',
	'hysteresis/HysteresisObject.cpp',
	'hysteresis/HysteresisPlane.h',
	'hysteresis/HysteresisPlane.cpp',
	'hysteresis/HysteresisSphere.h',
	'hysteresis/HysteresisSphere.cpp',
]

image = [
	'image/FreeImageObj.h',
	'image/FreeImageObj.cpp',
	'image/image.h',
	'image/image.cpp',
	'image/ImageFactory.h',
	'image/ImageFactory.cpp',
	'image/MemoryImageObj.h',
	'image/MemoryImageObj.cpp'
]

material = [
	'material/material.h',
	'material/material.cpp'
]

matrix = [
	'matrix/matrix.h',
	'matrix/matrix.cpp',
	'matrix/BasisMatrix.h',
	'matrix/BasisMatrix.cpp',
	'matrix/BiasMatrix.h',
	'matrix/ProjectionMatrix.h',
	'matrix/ProjectionMatrix.cpp',
	'matrix/ReflectionMatrix.h',
	'matrix/ReflectionMatrix.cpp',
	'matrix/RotationMatrix.h',
	'matrix/RotationMatrix.cpp',
	'matrix/ScalingMatrix.h',
	'matrix/ScalingMatrix.cpp',
	'matrix/TranslationMatrix.h',
	'matrix/TranslationMatrix.cpp',
	'matrix/ViewMatrix.h',
	'matrix/ViewMatrix.cpp'
]

model = [
	'model/model.h',
	'model/model.cpp',
	'model/mesh.h',
	'model/mesh.cpp',
	'model/ModelFactory.h',
	'model/ModelFactory.cpp'
]

primitives = [
	'primitives/FlatContext.h',
	'primitives/FlatContext.cpp',
	'primitives/ObjectDerivative.h',
	'primitives/ObjectDerivative.cpp',
	'primitives/ObjectState.h',
	'primitives/ObjectState.cpp',
	'primitives/PrimParams.h',
	'primitives/QuadIndexGroup.h',
	'primitives/Triangle.h',
	'primitives/TriangleIndexGroup.h',
	'primitives/Vertex.h',
	'primitives/VirtualObj.h',
	'primitives/VirtualObj.cpp',
	'primitives/billboard.h',
	'primitives/billboard.cpp',
	'primitives/color.h',
	'primitives/composite.h',
	'primitives/composite.cpp',
	'primitives/cubemap.h',
	'primitives/cubemap.cpp',
	'primitives/cylinder.h',
	'primitives/cylinder.cpp',
	'primitives/framebuffer.h',
	'primitives/framebuffer.cpp',
	'primitives/light.h',
	'primitives/line.h',
	'primitives/line.cpp',
	'primitives/plane.h',
	'primitives/plane.cpp',
	'primitives/point.h',
	'primitives/point.cpp',
	'primitives/point2D.h',
	'primitives/point2D.cpp',
	'primitives/quad.h',
	'primitives/quad.cpp',
	'primitives/quaternion.h',
	'primitives/quaternion.cpp',
	'primitives/ray.h',
	'primitives/rectangle.h',
	'primitives/skybox.h',
	'primitives/sphere.h',
	'primitives/sphere.cpp',
	'primitives/texture.h',
	'primitives/texture.cpp',
	'primitives/uvcoord.h',
	'primitives/vector.h',
	'primitives/vector.cpp',
	'primitives/viewport.h',
	'primitives/viewport.cpp',
	'primitives/volume.h',
	'primitives/volume.cpp',
]

text = [
	'text/text.h',
	'text/text.cpp',
	'text/font.h',
	'text/font.cpp',
	'text/TextEntryString.h',
	'text/TextEntryString.cpp'
]

types = [
	'types/Controller.h',
	'types/Controller.cpp',
	'types/ControllerObserver.h',
	'types/ControllerProxy.h',
	'types/DObject.h',
	'types/Factory.h',
	'types/GUID.h',
	'types/GUID.cpp',
	'types/Manager.h',
	'types/Message.h',
	'types/Multipublisher.h',
	'types/Number.h',
	'types/Object.h',
	'types/Proxy.h',
	'types/Publisher.h',
	'types/STDTYPES.h',
	'types/Subscriber.h',
	'types/TypeObj.h',
	'types/TypeObj.cpp',
	'types/Types.h',
	'types/TypesTests.h',
	'types/TypesTests.cpp',
	'types/UID.h',
	'types/UID.cpp',
	'types/dirty.h',
	'types/singleton.h',
	'types/valid.h',
	'types/version.h',
	'types/version.cpp'
]

user = [
	'user/user.h',
	'user/user.cpp'
]

sources = [
	EHM,
	bounding,
	camera,
	datastructures,
	dimension,
	hand,
	hysteresis,
	image,
	material,
	matrix,
	model,
	primitives,
	text,
	types,
	user,
	'config.h',
	'Utilities.h',
	'Utilities.cpp'
]

core = static_library('core', sources)