diff --git a/BUILD.gn b/BUILD.gn
index bd92b9b..cb468d9 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -284,6 +284,14 @@ if (is_win) {
 static_library("libcef_static") {
   sources = gypi_paths2.includes_common +
             gypi_paths.autogen_cpp_includes + [
+    "libcef/browser/audio_bus.cc",
+    "libcef/browser/audio_bus.h",
+    "libcef/browser/audio_push_sink.cc",
+    "libcef/browser/audio_push_sink.h",
+    "libcef/browser/audio_mirror_destination.cc",
+    "libcef/browser/audio_mirror_destination.h",
+    "libcef/browser/audio_output_stream.cc",
+    "libcef/browser/audio_output_stream.h",
     "libcef/browser/browser_context.cc",
     "libcef/browser/browser_context.h",
     "libcef/browser/browser_context_impl.cc",
diff --git a/cef_paths.gypi b/cef_paths.gypi
index e261a77..94f2198 100644
--- a/cef_paths.gypi
+++ b/cef_paths.gypi
@@ -1,763 +1,775 @@
-# Copyright (c) 2018 The Chromium Embedded Framework Authors. All rights
-# reserved. Use of this source code is governed by a BSD-style license that
-# can be found in the LICENSE file.
-#
-# ---------------------------------------------------------------------------
-#
-# This file was generated by the CEF translator tool and should not edited
-# by hand. See the translator.README.txt file in the tools directory for
-# more information.
-#
-# $hash=67bc21133e37f5361a39f25dcfe004616d467dbc$
-#
-
-{
-  'variables': {
-    'autogen_cpp_includes': [
-      'include/cef_accessibility_handler.h',
-      'include/cef_app.h',
-      'include/cef_auth_callback.h',
-      'include/cef_browser.h',
-      'include/cef_browser_process_handler.h',
-      'include/cef_callback.h',
-      'include/cef_client.h',
-      'include/cef_command_line.h',
-      'include/cef_context_menu_handler.h',
-      'include/cef_cookie.h',
-      'include/cef_crash_util.h',
-      'include/cef_dialog_handler.h',
-      'include/cef_display_handler.h',
-      'include/cef_dom.h',
-      'include/cef_download_handler.h',
-      'include/cef_download_item.h',
-      'include/cef_drag_data.h',
-      'include/cef_drag_handler.h',
-      'include/cef_extension.h',
-      'include/cef_extension_handler.h',
-      'include/cef_file_util.h',
-      'include/cef_find_handler.h',
-      'include/cef_focus_handler.h',
-      'include/cef_frame.h',
-      'include/cef_image.h',
-      'include/cef_jsdialog_handler.h',
-      'include/cef_keyboard_handler.h',
-      'include/cef_life_span_handler.h',
-      'include/cef_load_handler.h',
-      'include/cef_menu_model.h',
-      'include/cef_menu_model_delegate.h',
-      'include/cef_navigation_entry.h',
-      'include/cef_origin_whitelist.h',
-      'include/cef_parser.h',
-      'include/cef_path_util.h',
-      'include/cef_print_handler.h',
-      'include/cef_print_settings.h',
-      'include/cef_process_message.h',
-      'include/cef_process_util.h',
-      'include/cef_render_handler.h',
-      'include/cef_render_process_handler.h',
-      'include/cef_request.h',
-      'include/cef_request_context.h',
-      'include/cef_request_context_handler.h',
-      'include/cef_request_handler.h',
-      'include/cef_resource_bundle.h',
-      'include/cef_resource_bundle_handler.h',
-      'include/cef_resource_handler.h',
-      'include/cef_response.h',
-      'include/cef_response_filter.h',
-      'include/cef_scheme.h',
-      'include/cef_server.h',
-      'include/cef_ssl_info.h',
-      'include/cef_ssl_status.h',
-      'include/cef_stream.h',
-      'include/cef_string_visitor.h',
-      'include/cef_task.h',
-      'include/cef_thread.h',
-      'include/cef_trace.h',
-      'include/cef_urlrequest.h',
-      'include/cef_v8.h',
-      'include/cef_values.h',
-      'include/cef_waitable_event.h',
-      'include/cef_web_plugin.h',
-      'include/cef_x509_certificate.h',
-      'include/cef_xml_reader.h',
-      'include/cef_zip_reader.h',
-      'include/test/cef_test_helpers.h',
-      'include/test/cef_translator_test.h',
-      'include/views/cef_box_layout.h',
-      'include/views/cef_browser_view.h',
-      'include/views/cef_browser_view_delegate.h',
-      'include/views/cef_button.h',
-      'include/views/cef_button_delegate.h',
-      'include/views/cef_display.h',
-      'include/views/cef_fill_layout.h',
-      'include/views/cef_label_button.h',
-      'include/views/cef_layout.h',
-      'include/views/cef_menu_button.h',
-      'include/views/cef_menu_button_delegate.h',
-      'include/views/cef_panel.h',
-      'include/views/cef_panel_delegate.h',
-      'include/views/cef_scroll_view.h',
-      'include/views/cef_textfield.h',
-      'include/views/cef_textfield_delegate.h',
-      'include/views/cef_view.h',
-      'include/views/cef_view_delegate.h',
-      'include/views/cef_window.h',
-      'include/views/cef_window_delegate.h',
-    ],
-    'autogen_capi_includes': [
-      'include/capi/cef_accessibility_handler_capi.h',
-      'include/capi/cef_app_capi.h',
-      'include/capi/cef_auth_callback_capi.h',
-      'include/capi/cef_browser_capi.h',
-      'include/capi/cef_browser_process_handler_capi.h',
-      'include/capi/cef_callback_capi.h',
-      'include/capi/cef_client_capi.h',
-      'include/capi/cef_command_line_capi.h',
-      'include/capi/cef_context_menu_handler_capi.h',
-      'include/capi/cef_cookie_capi.h',
-      'include/capi/cef_crash_util_capi.h',
-      'include/capi/cef_dialog_handler_capi.h',
-      'include/capi/cef_display_handler_capi.h',
-      'include/capi/cef_dom_capi.h',
-      'include/capi/cef_download_handler_capi.h',
-      'include/capi/cef_download_item_capi.h',
-      'include/capi/cef_drag_data_capi.h',
-      'include/capi/cef_drag_handler_capi.h',
-      'include/capi/cef_extension_capi.h',
-      'include/capi/cef_extension_handler_capi.h',
-      'include/capi/cef_file_util_capi.h',
-      'include/capi/cef_find_handler_capi.h',
-      'include/capi/cef_focus_handler_capi.h',
-      'include/capi/cef_frame_capi.h',
-      'include/capi/cef_image_capi.h',
-      'include/capi/cef_jsdialog_handler_capi.h',
-      'include/capi/cef_keyboard_handler_capi.h',
-      'include/capi/cef_life_span_handler_capi.h',
-      'include/capi/cef_load_handler_capi.h',
-      'include/capi/cef_menu_model_capi.h',
-      'include/capi/cef_menu_model_delegate_capi.h',
-      'include/capi/cef_navigation_entry_capi.h',
-      'include/capi/cef_origin_whitelist_capi.h',
-      'include/capi/cef_parser_capi.h',
-      'include/capi/cef_path_util_capi.h',
-      'include/capi/cef_print_handler_capi.h',
-      'include/capi/cef_print_settings_capi.h',
-      'include/capi/cef_process_message_capi.h',
-      'include/capi/cef_process_util_capi.h',
-      'include/capi/cef_render_handler_capi.h',
-      'include/capi/cef_render_process_handler_capi.h',
-      'include/capi/cef_request_capi.h',
-      'include/capi/cef_request_context_capi.h',
-      'include/capi/cef_request_context_handler_capi.h',
-      'include/capi/cef_request_handler_capi.h',
-      'include/capi/cef_resource_bundle_capi.h',
-      'include/capi/cef_resource_bundle_handler_capi.h',
-      'include/capi/cef_resource_handler_capi.h',
-      'include/capi/cef_response_capi.h',
-      'include/capi/cef_response_filter_capi.h',
-      'include/capi/cef_scheme_capi.h',
-      'include/capi/cef_server_capi.h',
-      'include/capi/cef_ssl_info_capi.h',
-      'include/capi/cef_ssl_status_capi.h',
-      'include/capi/cef_stream_capi.h',
-      'include/capi/cef_string_visitor_capi.h',
-      'include/capi/cef_task_capi.h',
-      'include/capi/cef_thread_capi.h',
-      'include/capi/cef_trace_capi.h',
-      'include/capi/cef_urlrequest_capi.h',
-      'include/capi/cef_v8_capi.h',
-      'include/capi/cef_values_capi.h',
-      'include/capi/cef_waitable_event_capi.h',
-      'include/capi/cef_web_plugin_capi.h',
-      'include/capi/cef_x509_certificate_capi.h',
-      'include/capi/cef_xml_reader_capi.h',
-      'include/capi/cef_zip_reader_capi.h',
-      'include/capi/test/cef_test_helpers_capi.h',
-      'include/capi/test/cef_translator_test_capi.h',
-      'include/capi/views/cef_box_layout_capi.h',
-      'include/capi/views/cef_browser_view_capi.h',
-      'include/capi/views/cef_browser_view_delegate_capi.h',
-      'include/capi/views/cef_button_capi.h',
-      'include/capi/views/cef_button_delegate_capi.h',
-      'include/capi/views/cef_display_capi.h',
-      'include/capi/views/cef_fill_layout_capi.h',
-      'include/capi/views/cef_label_button_capi.h',
-      'include/capi/views/cef_layout_capi.h',
-      'include/capi/views/cef_menu_button_capi.h',
-      'include/capi/views/cef_menu_button_delegate_capi.h',
-      'include/capi/views/cef_panel_capi.h',
-      'include/capi/views/cef_panel_delegate_capi.h',
-      'include/capi/views/cef_scroll_view_capi.h',
-      'include/capi/views/cef_textfield_capi.h',
-      'include/capi/views/cef_textfield_delegate_capi.h',
-      'include/capi/views/cef_view_capi.h',
-      'include/capi/views/cef_view_delegate_capi.h',
-      'include/capi/views/cef_window_capi.h',
-      'include/capi/views/cef_window_delegate_capi.h',
-    ],
-    'autogen_library_side': [
-      'libcef_dll/ctocpp/accessibility_handler_ctocpp.cc',
-      'libcef_dll/ctocpp/accessibility_handler_ctocpp.h',
-      'libcef_dll/ctocpp/app_ctocpp.cc',
-      'libcef_dll/ctocpp/app_ctocpp.h',
-      'libcef_dll/cpptoc/auth_callback_cpptoc.cc',
-      'libcef_dll/cpptoc/auth_callback_cpptoc.h',
-      'libcef_dll/cpptoc/before_download_callback_cpptoc.cc',
-      'libcef_dll/cpptoc/before_download_callback_cpptoc.h',
-      'libcef_dll/cpptoc/binary_value_cpptoc.cc',
-      'libcef_dll/cpptoc/binary_value_cpptoc.h',
-      'libcef_dll/cpptoc/views/box_layout_cpptoc.cc',
-      'libcef_dll/cpptoc/views/box_layout_cpptoc.h',
-      'libcef_dll/cpptoc/browser_cpptoc.cc',
-      'libcef_dll/cpptoc/browser_cpptoc.h',
-      'libcef_dll/cpptoc/browser_host_cpptoc.cc',
-      'libcef_dll/cpptoc/browser_host_cpptoc.h',
-      'libcef_dll/ctocpp/browser_process_handler_ctocpp.cc',
-      'libcef_dll/ctocpp/browser_process_handler_ctocpp.h',
-      'libcef_dll/cpptoc/views/browser_view_cpptoc.cc',
-      'libcef_dll/cpptoc/views/browser_view_cpptoc.h',
-      'libcef_dll/ctocpp/views/browser_view_delegate_ctocpp.cc',
-      'libcef_dll/ctocpp/views/browser_view_delegate_ctocpp.h',
-      'libcef_dll/cpptoc/views/button_cpptoc.cc',
-      'libcef_dll/cpptoc/views/button_cpptoc.h',
-      'libcef_dll/ctocpp/views/button_delegate_ctocpp.cc',
-      'libcef_dll/ctocpp/views/button_delegate_ctocpp.h',
-      'libcef_dll/cpptoc/callback_cpptoc.cc',
-      'libcef_dll/cpptoc/callback_cpptoc.h',
-      'libcef_dll/ctocpp/client_ctocpp.cc',
-      'libcef_dll/ctocpp/client_ctocpp.h',
-      'libcef_dll/cpptoc/command_line_cpptoc.cc',
-      'libcef_dll/cpptoc/command_line_cpptoc.h',
-      'libcef_dll/ctocpp/completion_callback_ctocpp.cc',
-      'libcef_dll/ctocpp/completion_callback_ctocpp.h',
-      'libcef_dll/ctocpp/context_menu_handler_ctocpp.cc',
-      'libcef_dll/ctocpp/context_menu_handler_ctocpp.h',
-      'libcef_dll/cpptoc/context_menu_params_cpptoc.cc',
-      'libcef_dll/cpptoc/context_menu_params_cpptoc.h',
-      'libcef_dll/cpptoc/cookie_manager_cpptoc.cc',
-      'libcef_dll/cpptoc/cookie_manager_cpptoc.h',
-      'libcef_dll/ctocpp/cookie_visitor_ctocpp.cc',
-      'libcef_dll/ctocpp/cookie_visitor_ctocpp.h',
-      'libcef_dll/cpptoc/domdocument_cpptoc.cc',
-      'libcef_dll/cpptoc/domdocument_cpptoc.h',
-      'libcef_dll/cpptoc/domnode_cpptoc.cc',
-      'libcef_dll/cpptoc/domnode_cpptoc.h',
-      'libcef_dll/ctocpp/domvisitor_ctocpp.cc',
-      'libcef_dll/ctocpp/domvisitor_ctocpp.h',
-      'libcef_dll/ctocpp/delete_cookies_callback_ctocpp.cc',
-      'libcef_dll/ctocpp/delete_cookies_callback_ctocpp.h',
-      'libcef_dll/ctocpp/dialog_handler_ctocpp.cc',
-      'libcef_dll/ctocpp/dialog_handler_ctocpp.h',
-      'libcef_dll/cpptoc/dictionary_value_cpptoc.cc',
-      'libcef_dll/cpptoc/dictionary_value_cpptoc.h',
-      'libcef_dll/cpptoc/views/display_cpptoc.cc',
-      'libcef_dll/cpptoc/views/display_cpptoc.h',
-      'libcef_dll/ctocpp/display_handler_ctocpp.cc',
-      'libcef_dll/ctocpp/display_handler_ctocpp.h',
-      'libcef_dll/ctocpp/download_handler_ctocpp.cc',
-      'libcef_dll/ctocpp/download_handler_ctocpp.h',
-      'libcef_dll/ctocpp/download_image_callback_ctocpp.cc',
-      'libcef_dll/ctocpp/download_image_callback_ctocpp.h',
-      'libcef_dll/cpptoc/download_item_cpptoc.cc',
-      'libcef_dll/cpptoc/download_item_cpptoc.h',
-      'libcef_dll/cpptoc/download_item_callback_cpptoc.cc',
-      'libcef_dll/cpptoc/download_item_callback_cpptoc.h',
-      'libcef_dll/cpptoc/drag_data_cpptoc.cc',
-      'libcef_dll/cpptoc/drag_data_cpptoc.h',
-      'libcef_dll/ctocpp/drag_handler_ctocpp.cc',
-      'libcef_dll/ctocpp/drag_handler_ctocpp.h',
-      'libcef_dll/ctocpp/end_tracing_callback_ctocpp.cc',
-      'libcef_dll/ctocpp/end_tracing_callback_ctocpp.h',
-      'libcef_dll/cpptoc/extension_cpptoc.cc',
-      'libcef_dll/cpptoc/extension_cpptoc.h',
-      'libcef_dll/ctocpp/extension_handler_ctocpp.cc',
-      'libcef_dll/ctocpp/extension_handler_ctocpp.h',
-      'libcef_dll/cpptoc/file_dialog_callback_cpptoc.cc',
-      'libcef_dll/cpptoc/file_dialog_callback_cpptoc.h',
-      'libcef_dll/cpptoc/views/fill_layout_cpptoc.cc',
-      'libcef_dll/cpptoc/views/fill_layout_cpptoc.h',
-      'libcef_dll/ctocpp/find_handler_ctocpp.cc',
-      'libcef_dll/ctocpp/find_handler_ctocpp.h',
-      'libcef_dll/ctocpp/focus_handler_ctocpp.cc',
-      'libcef_dll/ctocpp/focus_handler_ctocpp.h',
-      'libcef_dll/cpptoc/frame_cpptoc.cc',
-      'libcef_dll/cpptoc/frame_cpptoc.h',
-      'libcef_dll/cpptoc/get_extension_resource_callback_cpptoc.cc',
-      'libcef_dll/cpptoc/get_extension_resource_callback_cpptoc.h',
-      'libcef_dll/cpptoc/image_cpptoc.cc',
-      'libcef_dll/cpptoc/image_cpptoc.h',
-      'libcef_dll/cpptoc/jsdialog_callback_cpptoc.cc',
-      'libcef_dll/cpptoc/jsdialog_callback_cpptoc.h',
-      'libcef_dll/ctocpp/jsdialog_handler_ctocpp.cc',
-      'libcef_dll/ctocpp/jsdialog_handler_ctocpp.h',
-      'libcef_dll/ctocpp/keyboard_handler_ctocpp.cc',
-      'libcef_dll/ctocpp/keyboard_handler_ctocpp.h',
-      'libcef_dll/cpptoc/views/label_button_cpptoc.cc',
-      'libcef_dll/cpptoc/views/label_button_cpptoc.h',
-      'libcef_dll/cpptoc/views/layout_cpptoc.cc',
-      'libcef_dll/cpptoc/views/layout_cpptoc.h',
-      'libcef_dll/ctocpp/life_span_handler_ctocpp.cc',
-      'libcef_dll/ctocpp/life_span_handler_ctocpp.h',
-      'libcef_dll/cpptoc/list_value_cpptoc.cc',
-      'libcef_dll/cpptoc/list_value_cpptoc.h',
-      'libcef_dll/ctocpp/load_handler_ctocpp.cc',
-      'libcef_dll/ctocpp/load_handler_ctocpp.h',
-      'libcef_dll/cpptoc/views/menu_button_cpptoc.cc',
-      'libcef_dll/cpptoc/views/menu_button_cpptoc.h',
-      'libcef_dll/ctocpp/views/menu_button_delegate_ctocpp.cc',
-      'libcef_dll/ctocpp/views/menu_button_delegate_ctocpp.h',
-      'libcef_dll/cpptoc/views/menu_button_pressed_lock_cpptoc.cc',
-      'libcef_dll/cpptoc/views/menu_button_pressed_lock_cpptoc.h',
-      'libcef_dll/cpptoc/menu_model_cpptoc.cc',
-      'libcef_dll/cpptoc/menu_model_cpptoc.h',
-      'libcef_dll/ctocpp/menu_model_delegate_ctocpp.cc',
-      'libcef_dll/ctocpp/menu_model_delegate_ctocpp.h',
-      'libcef_dll/cpptoc/navigation_entry_cpptoc.cc',
-      'libcef_dll/cpptoc/navigation_entry_cpptoc.h',
-      'libcef_dll/ctocpp/navigation_entry_visitor_ctocpp.cc',
-      'libcef_dll/ctocpp/navigation_entry_visitor_ctocpp.h',
-      'libcef_dll/cpptoc/views/panel_cpptoc.cc',
-      'libcef_dll/cpptoc/views/panel_cpptoc.h',
-      'libcef_dll/ctocpp/views/panel_delegate_ctocpp.cc',
-      'libcef_dll/ctocpp/views/panel_delegate_ctocpp.h',
-      'libcef_dll/ctocpp/pdf_print_callback_ctocpp.cc',
-      'libcef_dll/ctocpp/pdf_print_callback_ctocpp.h',
-      'libcef_dll/cpptoc/post_data_cpptoc.cc',
-      'libcef_dll/cpptoc/post_data_cpptoc.h',
-      'libcef_dll/cpptoc/post_data_element_cpptoc.cc',
-      'libcef_dll/cpptoc/post_data_element_cpptoc.h',
-      'libcef_dll/cpptoc/print_dialog_callback_cpptoc.cc',
-      'libcef_dll/cpptoc/print_dialog_callback_cpptoc.h',
-      'libcef_dll/ctocpp/print_handler_ctocpp.cc',
-      'libcef_dll/ctocpp/print_handler_ctocpp.h',
-      'libcef_dll/cpptoc/print_job_callback_cpptoc.cc',
-      'libcef_dll/cpptoc/print_job_callback_cpptoc.h',
-      'libcef_dll/cpptoc/print_settings_cpptoc.cc',
-      'libcef_dll/cpptoc/print_settings_cpptoc.h',
-      'libcef_dll/cpptoc/process_message_cpptoc.cc',
-      'libcef_dll/cpptoc/process_message_cpptoc.h',
-      'libcef_dll/ctocpp/read_handler_ctocpp.cc',
-      'libcef_dll/ctocpp/read_handler_ctocpp.h',
-      'libcef_dll/ctocpp/register_cdm_callback_ctocpp.cc',
-      'libcef_dll/ctocpp/register_cdm_callback_ctocpp.h',
-      'libcef_dll/ctocpp/render_handler_ctocpp.cc',
-      'libcef_dll/ctocpp/render_handler_ctocpp.h',
-      'libcef_dll/ctocpp/render_process_handler_ctocpp.cc',
-      'libcef_dll/ctocpp/render_process_handler_ctocpp.h',
-      'libcef_dll/cpptoc/request_cpptoc.cc',
-      'libcef_dll/cpptoc/request_cpptoc.h',
-      'libcef_dll/cpptoc/request_callback_cpptoc.cc',
-      'libcef_dll/cpptoc/request_callback_cpptoc.h',
-      'libcef_dll/cpptoc/request_context_cpptoc.cc',
-      'libcef_dll/cpptoc/request_context_cpptoc.h',
-      'libcef_dll/ctocpp/request_context_handler_ctocpp.cc',
-      'libcef_dll/ctocpp/request_context_handler_ctocpp.h',
-      'libcef_dll/ctocpp/request_handler_ctocpp.cc',
-      'libcef_dll/ctocpp/request_handler_ctocpp.h',
-      'libcef_dll/ctocpp/resolve_callback_ctocpp.cc',
-      'libcef_dll/ctocpp/resolve_callback_ctocpp.h',
-      'libcef_dll/cpptoc/resource_bundle_cpptoc.cc',
-      'libcef_dll/cpptoc/resource_bundle_cpptoc.h',
-      'libcef_dll/ctocpp/resource_bundle_handler_ctocpp.cc',
-      'libcef_dll/ctocpp/resource_bundle_handler_ctocpp.h',
-      'libcef_dll/ctocpp/resource_handler_ctocpp.cc',
-      'libcef_dll/ctocpp/resource_handler_ctocpp.h',
-      'libcef_dll/cpptoc/response_cpptoc.cc',
-      'libcef_dll/cpptoc/response_cpptoc.h',
-      'libcef_dll/ctocpp/response_filter_ctocpp.cc',
-      'libcef_dll/ctocpp/response_filter_ctocpp.h',
-      'libcef_dll/cpptoc/run_context_menu_callback_cpptoc.cc',
-      'libcef_dll/cpptoc/run_context_menu_callback_cpptoc.h',
-      'libcef_dll/ctocpp/run_file_dialog_callback_ctocpp.cc',
-      'libcef_dll/ctocpp/run_file_dialog_callback_ctocpp.h',
-      'libcef_dll/cpptoc/sslinfo_cpptoc.cc',
-      'libcef_dll/cpptoc/sslinfo_cpptoc.h',
-      'libcef_dll/cpptoc/sslstatus_cpptoc.cc',
-      'libcef_dll/cpptoc/sslstatus_cpptoc.h',
-      'libcef_dll/ctocpp/scheme_handler_factory_ctocpp.cc',
-      'libcef_dll/ctocpp/scheme_handler_factory_ctocpp.h',
-      'libcef_dll/cpptoc/scheme_registrar_cpptoc.cc',
-      'libcef_dll/cpptoc/scheme_registrar_cpptoc.h',
-      'libcef_dll/cpptoc/views/scroll_view_cpptoc.cc',
-      'libcef_dll/cpptoc/views/scroll_view_cpptoc.h',
-      'libcef_dll/cpptoc/select_client_certificate_callback_cpptoc.cc',
-      'libcef_dll/cpptoc/select_client_certificate_callback_cpptoc.h',
-      'libcef_dll/cpptoc/server_cpptoc.cc',
-      'libcef_dll/cpptoc/server_cpptoc.h',
-      'libcef_dll/ctocpp/server_handler_ctocpp.cc',
-      'libcef_dll/ctocpp/server_handler_ctocpp.h',
-      'libcef_dll/ctocpp/set_cookie_callback_ctocpp.cc',
-      'libcef_dll/ctocpp/set_cookie_callback_ctocpp.h',
-      'libcef_dll/cpptoc/stream_reader_cpptoc.cc',
-      'libcef_dll/cpptoc/stream_reader_cpptoc.h',
-      'libcef_dll/cpptoc/stream_writer_cpptoc.cc',
-      'libcef_dll/cpptoc/stream_writer_cpptoc.h',
-      'libcef_dll/ctocpp/string_visitor_ctocpp.cc',
-      'libcef_dll/ctocpp/string_visitor_ctocpp.h',
-      'libcef_dll/ctocpp/task_ctocpp.cc',
-      'libcef_dll/ctocpp/task_ctocpp.h',
-      'libcef_dll/cpptoc/task_runner_cpptoc.cc',
-      'libcef_dll/cpptoc/task_runner_cpptoc.h',
-      'libcef_dll/cpptoc/views/textfield_cpptoc.cc',
-      'libcef_dll/cpptoc/views/textfield_cpptoc.h',
-      'libcef_dll/ctocpp/views/textfield_delegate_ctocpp.cc',
-      'libcef_dll/ctocpp/views/textfield_delegate_ctocpp.h',
-      'libcef_dll/cpptoc/thread_cpptoc.cc',
-      'libcef_dll/cpptoc/thread_cpptoc.h',
-      'libcef_dll/cpptoc/test/translator_test_cpptoc.cc',
-      'libcef_dll/cpptoc/test/translator_test_cpptoc.h',
-      'libcef_dll/ctocpp/test/translator_test_ref_ptr_client_ctocpp.cc',
-      'libcef_dll/ctocpp/test/translator_test_ref_ptr_client_ctocpp.h',
-      'libcef_dll/ctocpp/test/translator_test_ref_ptr_client_child_ctocpp.cc',
-      'libcef_dll/ctocpp/test/translator_test_ref_ptr_client_child_ctocpp.h',
-      'libcef_dll/cpptoc/test/translator_test_ref_ptr_library_cpptoc.cc',
-      'libcef_dll/cpptoc/test/translator_test_ref_ptr_library_cpptoc.h',
-      'libcef_dll/cpptoc/test/translator_test_ref_ptr_library_child_cpptoc.cc',
-      'libcef_dll/cpptoc/test/translator_test_ref_ptr_library_child_cpptoc.h',
-      'libcef_dll/cpptoc/test/translator_test_ref_ptr_library_child_child_cpptoc.cc',
-      'libcef_dll/cpptoc/test/translator_test_ref_ptr_library_child_child_cpptoc.h',
-      'libcef_dll/ctocpp/test/translator_test_scoped_client_ctocpp.cc',
-      'libcef_dll/ctocpp/test/translator_test_scoped_client_ctocpp.h',
-      'libcef_dll/ctocpp/test/translator_test_scoped_client_child_ctocpp.cc',
-      'libcef_dll/ctocpp/test/translator_test_scoped_client_child_ctocpp.h',
-      'libcef_dll/cpptoc/test/translator_test_scoped_library_cpptoc.cc',
-      'libcef_dll/cpptoc/test/translator_test_scoped_library_cpptoc.h',
-      'libcef_dll/cpptoc/test/translator_test_scoped_library_child_cpptoc.cc',
-      'libcef_dll/cpptoc/test/translator_test_scoped_library_child_cpptoc.h',
-      'libcef_dll/cpptoc/test/translator_test_scoped_library_child_child_cpptoc.cc',
-      'libcef_dll/cpptoc/test/translator_test_scoped_library_child_child_cpptoc.h',
-      'libcef_dll/cpptoc/urlrequest_cpptoc.cc',
-      'libcef_dll/cpptoc/urlrequest_cpptoc.h',
-      'libcef_dll/ctocpp/urlrequest_client_ctocpp.cc',
-      'libcef_dll/ctocpp/urlrequest_client_ctocpp.h',
-      'libcef_dll/ctocpp/v8accessor_ctocpp.cc',
-      'libcef_dll/ctocpp/v8accessor_ctocpp.h',
-      'libcef_dll/ctocpp/v8array_buffer_release_callback_ctocpp.cc',
-      'libcef_dll/ctocpp/v8array_buffer_release_callback_ctocpp.h',
-      'libcef_dll/cpptoc/v8context_cpptoc.cc',
-      'libcef_dll/cpptoc/v8context_cpptoc.h',
-      'libcef_dll/cpptoc/v8exception_cpptoc.cc',
-      'libcef_dll/cpptoc/v8exception_cpptoc.h',
-      'libcef_dll/ctocpp/v8handler_ctocpp.cc',
-      'libcef_dll/ctocpp/v8handler_ctocpp.h',
-      'libcef_dll/ctocpp/v8interceptor_ctocpp.cc',
-      'libcef_dll/ctocpp/v8interceptor_ctocpp.h',
-      'libcef_dll/cpptoc/v8stack_frame_cpptoc.cc',
-      'libcef_dll/cpptoc/v8stack_frame_cpptoc.h',
-      'libcef_dll/cpptoc/v8stack_trace_cpptoc.cc',
-      'libcef_dll/cpptoc/v8stack_trace_cpptoc.h',
-      'libcef_dll/cpptoc/v8value_cpptoc.cc',
-      'libcef_dll/cpptoc/v8value_cpptoc.h',
-      'libcef_dll/cpptoc/value_cpptoc.cc',
-      'libcef_dll/cpptoc/value_cpptoc.h',
-      'libcef_dll/cpptoc/views/view_cpptoc.cc',
-      'libcef_dll/cpptoc/views/view_cpptoc.h',
-      'libcef_dll/ctocpp/views/view_delegate_ctocpp.cc',
-      'libcef_dll/ctocpp/views/view_delegate_ctocpp.h',
-      'libcef_dll/cpptoc/waitable_event_cpptoc.cc',
-      'libcef_dll/cpptoc/waitable_event_cpptoc.h',
-      'libcef_dll/cpptoc/web_plugin_info_cpptoc.cc',
-      'libcef_dll/cpptoc/web_plugin_info_cpptoc.h',
-      'libcef_dll/ctocpp/web_plugin_info_visitor_ctocpp.cc',
-      'libcef_dll/ctocpp/web_plugin_info_visitor_ctocpp.h',
-      'libcef_dll/ctocpp/web_plugin_unstable_callback_ctocpp.cc',
-      'libcef_dll/ctocpp/web_plugin_unstable_callback_ctocpp.h',
-      'libcef_dll/cpptoc/views/window_cpptoc.cc',
-      'libcef_dll/cpptoc/views/window_cpptoc.h',
-      'libcef_dll/ctocpp/views/window_delegate_ctocpp.cc',
-      'libcef_dll/ctocpp/views/window_delegate_ctocpp.h',
-      'libcef_dll/ctocpp/write_handler_ctocpp.cc',
-      'libcef_dll/ctocpp/write_handler_ctocpp.h',
-      'libcef_dll/cpptoc/x509cert_principal_cpptoc.cc',
-      'libcef_dll/cpptoc/x509cert_principal_cpptoc.h',
-      'libcef_dll/cpptoc/x509certificate_cpptoc.cc',
-      'libcef_dll/cpptoc/x509certificate_cpptoc.h',
-      'libcef_dll/cpptoc/xml_reader_cpptoc.cc',
-      'libcef_dll/cpptoc/xml_reader_cpptoc.h',
-      'libcef_dll/cpptoc/zip_reader_cpptoc.cc',
-      'libcef_dll/cpptoc/zip_reader_cpptoc.h',
-    ],
-    'autogen_client_side': [
-      'libcef_dll/cpptoc/accessibility_handler_cpptoc.cc',
-      'libcef_dll/cpptoc/accessibility_handler_cpptoc.h',
-      'libcef_dll/cpptoc/app_cpptoc.cc',
-      'libcef_dll/cpptoc/app_cpptoc.h',
-      'libcef_dll/ctocpp/auth_callback_ctocpp.cc',
-      'libcef_dll/ctocpp/auth_callback_ctocpp.h',
-      'libcef_dll/ctocpp/before_download_callback_ctocpp.cc',
-      'libcef_dll/ctocpp/before_download_callback_ctocpp.h',
-      'libcef_dll/ctocpp/binary_value_ctocpp.cc',
-      'libcef_dll/ctocpp/binary_value_ctocpp.h',
-      'libcef_dll/ctocpp/views/box_layout_ctocpp.cc',
-      'libcef_dll/ctocpp/views/box_layout_ctocpp.h',
-      'libcef_dll/ctocpp/browser_ctocpp.cc',
-      'libcef_dll/ctocpp/browser_ctocpp.h',
-      'libcef_dll/ctocpp/browser_host_ctocpp.cc',
-      'libcef_dll/ctocpp/browser_host_ctocpp.h',
-      'libcef_dll/cpptoc/browser_process_handler_cpptoc.cc',
-      'libcef_dll/cpptoc/browser_process_handler_cpptoc.h',
-      'libcef_dll/ctocpp/views/browser_view_ctocpp.cc',
-      'libcef_dll/ctocpp/views/browser_view_ctocpp.h',
-      'libcef_dll/cpptoc/views/browser_view_delegate_cpptoc.cc',
-      'libcef_dll/cpptoc/views/browser_view_delegate_cpptoc.h',
-      'libcef_dll/ctocpp/views/button_ctocpp.cc',
-      'libcef_dll/ctocpp/views/button_ctocpp.h',
-      'libcef_dll/cpptoc/views/button_delegate_cpptoc.cc',
-      'libcef_dll/cpptoc/views/button_delegate_cpptoc.h',
-      'libcef_dll/ctocpp/callback_ctocpp.cc',
-      'libcef_dll/ctocpp/callback_ctocpp.h',
-      'libcef_dll/cpptoc/client_cpptoc.cc',
-      'libcef_dll/cpptoc/client_cpptoc.h',
-      'libcef_dll/ctocpp/command_line_ctocpp.cc',
-      'libcef_dll/ctocpp/command_line_ctocpp.h',
-      'libcef_dll/cpptoc/completion_callback_cpptoc.cc',
-      'libcef_dll/cpptoc/completion_callback_cpptoc.h',
-      'libcef_dll/cpptoc/context_menu_handler_cpptoc.cc',
-      'libcef_dll/cpptoc/context_menu_handler_cpptoc.h',
-      'libcef_dll/ctocpp/context_menu_params_ctocpp.cc',
-      'libcef_dll/ctocpp/context_menu_params_ctocpp.h',
-      'libcef_dll/ctocpp/cookie_manager_ctocpp.cc',
-      'libcef_dll/ctocpp/cookie_manager_ctocpp.h',
-      'libcef_dll/cpptoc/cookie_visitor_cpptoc.cc',
-      'libcef_dll/cpptoc/cookie_visitor_cpptoc.h',
-      'libcef_dll/ctocpp/domdocument_ctocpp.cc',
-      'libcef_dll/ctocpp/domdocument_ctocpp.h',
-      'libcef_dll/ctocpp/domnode_ctocpp.cc',
-      'libcef_dll/ctocpp/domnode_ctocpp.h',
-      'libcef_dll/cpptoc/domvisitor_cpptoc.cc',
-      'libcef_dll/cpptoc/domvisitor_cpptoc.h',
-      'libcef_dll/cpptoc/delete_cookies_callback_cpptoc.cc',
-      'libcef_dll/cpptoc/delete_cookies_callback_cpptoc.h',
-      'libcef_dll/cpptoc/dialog_handler_cpptoc.cc',
-      'libcef_dll/cpptoc/dialog_handler_cpptoc.h',
-      'libcef_dll/ctocpp/dictionary_value_ctocpp.cc',
-      'libcef_dll/ctocpp/dictionary_value_ctocpp.h',
-      'libcef_dll/ctocpp/views/display_ctocpp.cc',
-      'libcef_dll/ctocpp/views/display_ctocpp.h',
-      'libcef_dll/cpptoc/display_handler_cpptoc.cc',
-      'libcef_dll/cpptoc/display_handler_cpptoc.h',
-      'libcef_dll/cpptoc/download_handler_cpptoc.cc',
-      'libcef_dll/cpptoc/download_handler_cpptoc.h',
-      'libcef_dll/cpptoc/download_image_callback_cpptoc.cc',
-      'libcef_dll/cpptoc/download_image_callback_cpptoc.h',
-      'libcef_dll/ctocpp/download_item_ctocpp.cc',
-      'libcef_dll/ctocpp/download_item_ctocpp.h',
-      'libcef_dll/ctocpp/download_item_callback_ctocpp.cc',
-      'libcef_dll/ctocpp/download_item_callback_ctocpp.h',
-      'libcef_dll/ctocpp/drag_data_ctocpp.cc',
-      'libcef_dll/ctocpp/drag_data_ctocpp.h',
-      'libcef_dll/cpptoc/drag_handler_cpptoc.cc',
-      'libcef_dll/cpptoc/drag_handler_cpptoc.h',
-      'libcef_dll/cpptoc/end_tracing_callback_cpptoc.cc',
-      'libcef_dll/cpptoc/end_tracing_callback_cpptoc.h',
-      'libcef_dll/ctocpp/extension_ctocpp.cc',
-      'libcef_dll/ctocpp/extension_ctocpp.h',
-      'libcef_dll/cpptoc/extension_handler_cpptoc.cc',
-      'libcef_dll/cpptoc/extension_handler_cpptoc.h',
-      'libcef_dll/ctocpp/file_dialog_callback_ctocpp.cc',
-      'libcef_dll/ctocpp/file_dialog_callback_ctocpp.h',
-      'libcef_dll/ctocpp/views/fill_layout_ctocpp.cc',
-      'libcef_dll/ctocpp/views/fill_layout_ctocpp.h',
-      'libcef_dll/cpptoc/find_handler_cpptoc.cc',
-      'libcef_dll/cpptoc/find_handler_cpptoc.h',
-      'libcef_dll/cpptoc/focus_handler_cpptoc.cc',
-      'libcef_dll/cpptoc/focus_handler_cpptoc.h',
-      'libcef_dll/ctocpp/frame_ctocpp.cc',
-      'libcef_dll/ctocpp/frame_ctocpp.h',
-      'libcef_dll/ctocpp/get_extension_resource_callback_ctocpp.cc',
-      'libcef_dll/ctocpp/get_extension_resource_callback_ctocpp.h',
-      'libcef_dll/ctocpp/image_ctocpp.cc',
-      'libcef_dll/ctocpp/image_ctocpp.h',
-      'libcef_dll/ctocpp/jsdialog_callback_ctocpp.cc',
-      'libcef_dll/ctocpp/jsdialog_callback_ctocpp.h',
-      'libcef_dll/cpptoc/jsdialog_handler_cpptoc.cc',
-      'libcef_dll/cpptoc/jsdialog_handler_cpptoc.h',
-      'libcef_dll/cpptoc/keyboard_handler_cpptoc.cc',
-      'libcef_dll/cpptoc/keyboard_handler_cpptoc.h',
-      'libcef_dll/ctocpp/views/label_button_ctocpp.cc',
-      'libcef_dll/ctocpp/views/label_button_ctocpp.h',
-      'libcef_dll/ctocpp/views/layout_ctocpp.cc',
-      'libcef_dll/ctocpp/views/layout_ctocpp.h',
-      'libcef_dll/cpptoc/life_span_handler_cpptoc.cc',
-      'libcef_dll/cpptoc/life_span_handler_cpptoc.h',
-      'libcef_dll/ctocpp/list_value_ctocpp.cc',
-      'libcef_dll/ctocpp/list_value_ctocpp.h',
-      'libcef_dll/cpptoc/load_handler_cpptoc.cc',
-      'libcef_dll/cpptoc/load_handler_cpptoc.h',
-      'libcef_dll/ctocpp/views/menu_button_ctocpp.cc',
-      'libcef_dll/ctocpp/views/menu_button_ctocpp.h',
-      'libcef_dll/cpptoc/views/menu_button_delegate_cpptoc.cc',
-      'libcef_dll/cpptoc/views/menu_button_delegate_cpptoc.h',
-      'libcef_dll/ctocpp/views/menu_button_pressed_lock_ctocpp.cc',
-      'libcef_dll/ctocpp/views/menu_button_pressed_lock_ctocpp.h',
-      'libcef_dll/ctocpp/menu_model_ctocpp.cc',
-      'libcef_dll/ctocpp/menu_model_ctocpp.h',
-      'libcef_dll/cpptoc/menu_model_delegate_cpptoc.cc',
-      'libcef_dll/cpptoc/menu_model_delegate_cpptoc.h',
-      'libcef_dll/ctocpp/navigation_entry_ctocpp.cc',
-      'libcef_dll/ctocpp/navigation_entry_ctocpp.h',
-      'libcef_dll/cpptoc/navigation_entry_visitor_cpptoc.cc',
-      'libcef_dll/cpptoc/navigation_entry_visitor_cpptoc.h',
-      'libcef_dll/ctocpp/views/panel_ctocpp.cc',
-      'libcef_dll/ctocpp/views/panel_ctocpp.h',
-      'libcef_dll/cpptoc/views/panel_delegate_cpptoc.cc',
-      'libcef_dll/cpptoc/views/panel_delegate_cpptoc.h',
-      'libcef_dll/cpptoc/pdf_print_callback_cpptoc.cc',
-      'libcef_dll/cpptoc/pdf_print_callback_cpptoc.h',
-      'libcef_dll/ctocpp/post_data_ctocpp.cc',
-      'libcef_dll/ctocpp/post_data_ctocpp.h',
-      'libcef_dll/ctocpp/post_data_element_ctocpp.cc',
-      'libcef_dll/ctocpp/post_data_element_ctocpp.h',
-      'libcef_dll/ctocpp/print_dialog_callback_ctocpp.cc',
-      'libcef_dll/ctocpp/print_dialog_callback_ctocpp.h',
-      'libcef_dll/cpptoc/print_handler_cpptoc.cc',
-      'libcef_dll/cpptoc/print_handler_cpptoc.h',
-      'libcef_dll/ctocpp/print_job_callback_ctocpp.cc',
-      'libcef_dll/ctocpp/print_job_callback_ctocpp.h',
-      'libcef_dll/ctocpp/print_settings_ctocpp.cc',
-      'libcef_dll/ctocpp/print_settings_ctocpp.h',
-      'libcef_dll/ctocpp/process_message_ctocpp.cc',
-      'libcef_dll/ctocpp/process_message_ctocpp.h',
-      'libcef_dll/cpptoc/read_handler_cpptoc.cc',
-      'libcef_dll/cpptoc/read_handler_cpptoc.h',
-      'libcef_dll/cpptoc/register_cdm_callback_cpptoc.cc',
-      'libcef_dll/cpptoc/register_cdm_callback_cpptoc.h',
-      'libcef_dll/cpptoc/render_handler_cpptoc.cc',
-      'libcef_dll/cpptoc/render_handler_cpptoc.h',
-      'libcef_dll/cpptoc/render_process_handler_cpptoc.cc',
-      'libcef_dll/cpptoc/render_process_handler_cpptoc.h',
-      'libcef_dll/ctocpp/request_ctocpp.cc',
-      'libcef_dll/ctocpp/request_ctocpp.h',
-      'libcef_dll/ctocpp/request_callback_ctocpp.cc',
-      'libcef_dll/ctocpp/request_callback_ctocpp.h',
-      'libcef_dll/ctocpp/request_context_ctocpp.cc',
-      'libcef_dll/ctocpp/request_context_ctocpp.h',
-      'libcef_dll/cpptoc/request_context_handler_cpptoc.cc',
-      'libcef_dll/cpptoc/request_context_handler_cpptoc.h',
-      'libcef_dll/cpptoc/request_handler_cpptoc.cc',
-      'libcef_dll/cpptoc/request_handler_cpptoc.h',
-      'libcef_dll/cpptoc/resolve_callback_cpptoc.cc',
-      'libcef_dll/cpptoc/resolve_callback_cpptoc.h',
-      'libcef_dll/ctocpp/resource_bundle_ctocpp.cc',
-      'libcef_dll/ctocpp/resource_bundle_ctocpp.h',
-      'libcef_dll/cpptoc/resource_bundle_handler_cpptoc.cc',
-      'libcef_dll/cpptoc/resource_bundle_handler_cpptoc.h',
-      'libcef_dll/cpptoc/resource_handler_cpptoc.cc',
-      'libcef_dll/cpptoc/resource_handler_cpptoc.h',
-      'libcef_dll/ctocpp/response_ctocpp.cc',
-      'libcef_dll/ctocpp/response_ctocpp.h',
-      'libcef_dll/cpptoc/response_filter_cpptoc.cc',
-      'libcef_dll/cpptoc/response_filter_cpptoc.h',
-      'libcef_dll/ctocpp/run_context_menu_callback_ctocpp.cc',
-      'libcef_dll/ctocpp/run_context_menu_callback_ctocpp.h',
-      'libcef_dll/cpptoc/run_file_dialog_callback_cpptoc.cc',
-      'libcef_dll/cpptoc/run_file_dialog_callback_cpptoc.h',
-      'libcef_dll/ctocpp/sslinfo_ctocpp.cc',
-      'libcef_dll/ctocpp/sslinfo_ctocpp.h',
-      'libcef_dll/ctocpp/sslstatus_ctocpp.cc',
-      'libcef_dll/ctocpp/sslstatus_ctocpp.h',
-      'libcef_dll/cpptoc/scheme_handler_factory_cpptoc.cc',
-      'libcef_dll/cpptoc/scheme_handler_factory_cpptoc.h',
-      'libcef_dll/ctocpp/scheme_registrar_ctocpp.cc',
-      'libcef_dll/ctocpp/scheme_registrar_ctocpp.h',
-      'libcef_dll/ctocpp/views/scroll_view_ctocpp.cc',
-      'libcef_dll/ctocpp/views/scroll_view_ctocpp.h',
-      'libcef_dll/ctocpp/select_client_certificate_callback_ctocpp.cc',
-      'libcef_dll/ctocpp/select_client_certificate_callback_ctocpp.h',
-      'libcef_dll/ctocpp/server_ctocpp.cc',
-      'libcef_dll/ctocpp/server_ctocpp.h',
-      'libcef_dll/cpptoc/server_handler_cpptoc.cc',
-      'libcef_dll/cpptoc/server_handler_cpptoc.h',
-      'libcef_dll/cpptoc/set_cookie_callback_cpptoc.cc',
-      'libcef_dll/cpptoc/set_cookie_callback_cpptoc.h',
-      'libcef_dll/ctocpp/stream_reader_ctocpp.cc',
-      'libcef_dll/ctocpp/stream_reader_ctocpp.h',
-      'libcef_dll/ctocpp/stream_writer_ctocpp.cc',
-      'libcef_dll/ctocpp/stream_writer_ctocpp.h',
-      'libcef_dll/cpptoc/string_visitor_cpptoc.cc',
-      'libcef_dll/cpptoc/string_visitor_cpptoc.h',
-      'libcef_dll/cpptoc/task_cpptoc.cc',
-      'libcef_dll/cpptoc/task_cpptoc.h',
-      'libcef_dll/ctocpp/task_runner_ctocpp.cc',
-      'libcef_dll/ctocpp/task_runner_ctocpp.h',
-      'libcef_dll/ctocpp/views/textfield_ctocpp.cc',
-      'libcef_dll/ctocpp/views/textfield_ctocpp.h',
-      'libcef_dll/cpptoc/views/textfield_delegate_cpptoc.cc',
-      'libcef_dll/cpptoc/views/textfield_delegate_cpptoc.h',
-      'libcef_dll/ctocpp/thread_ctocpp.cc',
-      'libcef_dll/ctocpp/thread_ctocpp.h',
-      'libcef_dll/ctocpp/test/translator_test_ctocpp.cc',
-      'libcef_dll/ctocpp/test/translator_test_ctocpp.h',
-      'libcef_dll/cpptoc/test/translator_test_ref_ptr_client_cpptoc.cc',
-      'libcef_dll/cpptoc/test/translator_test_ref_ptr_client_cpptoc.h',
-      'libcef_dll/cpptoc/test/translator_test_ref_ptr_client_child_cpptoc.cc',
-      'libcef_dll/cpptoc/test/translator_test_ref_ptr_client_child_cpptoc.h',
-      'libcef_dll/ctocpp/test/translator_test_ref_ptr_library_ctocpp.cc',
-      'libcef_dll/ctocpp/test/translator_test_ref_ptr_library_ctocpp.h',
-      'libcef_dll/ctocpp/test/translator_test_ref_ptr_library_child_ctocpp.cc',
-      'libcef_dll/ctocpp/test/translator_test_ref_ptr_library_child_ctocpp.h',
-      'libcef_dll/ctocpp/test/translator_test_ref_ptr_library_child_child_ctocpp.cc',
-      'libcef_dll/ctocpp/test/translator_test_ref_ptr_library_child_child_ctocpp.h',
-      'libcef_dll/cpptoc/test/translator_test_scoped_client_cpptoc.cc',
-      'libcef_dll/cpptoc/test/translator_test_scoped_client_cpptoc.h',
-      'libcef_dll/cpptoc/test/translator_test_scoped_client_child_cpptoc.cc',
-      'libcef_dll/cpptoc/test/translator_test_scoped_client_child_cpptoc.h',
-      'libcef_dll/ctocpp/test/translator_test_scoped_library_ctocpp.cc',
-      'libcef_dll/ctocpp/test/translator_test_scoped_library_ctocpp.h',
-      'libcef_dll/ctocpp/test/translator_test_scoped_library_child_ctocpp.cc',
-      'libcef_dll/ctocpp/test/translator_test_scoped_library_child_ctocpp.h',
-      'libcef_dll/ctocpp/test/translator_test_scoped_library_child_child_ctocpp.cc',
-      'libcef_dll/ctocpp/test/translator_test_scoped_library_child_child_ctocpp.h',
-      'libcef_dll/ctocpp/urlrequest_ctocpp.cc',
-      'libcef_dll/ctocpp/urlrequest_ctocpp.h',
-      'libcef_dll/cpptoc/urlrequest_client_cpptoc.cc',
-      'libcef_dll/cpptoc/urlrequest_client_cpptoc.h',
-      'libcef_dll/cpptoc/v8accessor_cpptoc.cc',
-      'libcef_dll/cpptoc/v8accessor_cpptoc.h',
-      'libcef_dll/cpptoc/v8array_buffer_release_callback_cpptoc.cc',
-      'libcef_dll/cpptoc/v8array_buffer_release_callback_cpptoc.h',
-      'libcef_dll/ctocpp/v8context_ctocpp.cc',
-      'libcef_dll/ctocpp/v8context_ctocpp.h',
-      'libcef_dll/ctocpp/v8exception_ctocpp.cc',
-      'libcef_dll/ctocpp/v8exception_ctocpp.h',
-      'libcef_dll/cpptoc/v8handler_cpptoc.cc',
-      'libcef_dll/cpptoc/v8handler_cpptoc.h',
-      'libcef_dll/cpptoc/v8interceptor_cpptoc.cc',
-      'libcef_dll/cpptoc/v8interceptor_cpptoc.h',
-      'libcef_dll/ctocpp/v8stack_frame_ctocpp.cc',
-      'libcef_dll/ctocpp/v8stack_frame_ctocpp.h',
-      'libcef_dll/ctocpp/v8stack_trace_ctocpp.cc',
-      'libcef_dll/ctocpp/v8stack_trace_ctocpp.h',
-      'libcef_dll/ctocpp/v8value_ctocpp.cc',
-      'libcef_dll/ctocpp/v8value_ctocpp.h',
-      'libcef_dll/ctocpp/value_ctocpp.cc',
-      'libcef_dll/ctocpp/value_ctocpp.h',
-      'libcef_dll/ctocpp/views/view_ctocpp.cc',
-      'libcef_dll/ctocpp/views/view_ctocpp.h',
-      'libcef_dll/cpptoc/views/view_delegate_cpptoc.cc',
-      'libcef_dll/cpptoc/views/view_delegate_cpptoc.h',
-      'libcef_dll/ctocpp/waitable_event_ctocpp.cc',
-      'libcef_dll/ctocpp/waitable_event_ctocpp.h',
-      'libcef_dll/ctocpp/web_plugin_info_ctocpp.cc',
-      'libcef_dll/ctocpp/web_plugin_info_ctocpp.h',
-      'libcef_dll/cpptoc/web_plugin_info_visitor_cpptoc.cc',
-      'libcef_dll/cpptoc/web_plugin_info_visitor_cpptoc.h',
-      'libcef_dll/cpptoc/web_plugin_unstable_callback_cpptoc.cc',
-      'libcef_dll/cpptoc/web_plugin_unstable_callback_cpptoc.h',
-      'libcef_dll/ctocpp/views/window_ctocpp.cc',
-      'libcef_dll/ctocpp/views/window_ctocpp.h',
-      'libcef_dll/cpptoc/views/window_delegate_cpptoc.cc',
-      'libcef_dll/cpptoc/views/window_delegate_cpptoc.h',
-      'libcef_dll/cpptoc/write_handler_cpptoc.cc',
-      'libcef_dll/cpptoc/write_handler_cpptoc.h',
-      'libcef_dll/ctocpp/x509cert_principal_ctocpp.cc',
-      'libcef_dll/ctocpp/x509cert_principal_ctocpp.h',
-      'libcef_dll/ctocpp/x509certificate_ctocpp.cc',
-      'libcef_dll/ctocpp/x509certificate_ctocpp.h',
-      'libcef_dll/ctocpp/xml_reader_ctocpp.cc',
-      'libcef_dll/ctocpp/xml_reader_ctocpp.h',
-      'libcef_dll/ctocpp/zip_reader_ctocpp.cc',
-      'libcef_dll/ctocpp/zip_reader_ctocpp.h',
-    ],
-  },
-}
+# Copyright (c) 2018 The Chromium Embedded Framework Authors. All rights
+# reserved. Use of this source code is governed by a BSD-style license that
+# can be found in the LICENSE file.
+#
+# ---------------------------------------------------------------------------
+#
+# This file was generated by the CEF translator tool and should not edited
+# by hand. See the translator.README.txt file in the tools directory for
+# more information.
+#
+# $hash=7fffdbcc14086888095bde18a29890f8a52984e5$
+#
+
+{
+  'variables': {
+    'autogen_cpp_includes': [
+      'include/cef_accessibility_handler.h',
+      'include/cef_app.h',
+      'include/cef_audio_bus.h',
+      'include/cef_audio_handler.h',
+      'include/cef_auth_callback.h',
+      'include/cef_browser.h',
+      'include/cef_browser_process_handler.h',
+      'include/cef_callback.h',
+      'include/cef_client.h',
+      'include/cef_command_line.h',
+      'include/cef_context_menu_handler.h',
+      'include/cef_cookie.h',
+      'include/cef_crash_util.h',
+      'include/cef_dialog_handler.h',
+      'include/cef_display_handler.h',
+      'include/cef_dom.h',
+      'include/cef_download_handler.h',
+      'include/cef_download_item.h',
+      'include/cef_drag_data.h',
+      'include/cef_drag_handler.h',
+      'include/cef_extension.h',
+      'include/cef_extension_handler.h',
+      'include/cef_file_util.h',
+      'include/cef_find_handler.h',
+      'include/cef_focus_handler.h',
+      'include/cef_frame.h',
+      'include/cef_image.h',
+      'include/cef_jsdialog_handler.h',
+      'include/cef_keyboard_handler.h',
+      'include/cef_life_span_handler.h',
+      'include/cef_load_handler.h',
+      'include/cef_menu_model.h',
+      'include/cef_menu_model_delegate.h',
+      'include/cef_navigation_entry.h',
+      'include/cef_origin_whitelist.h',
+      'include/cef_parser.h',
+      'include/cef_path_util.h',
+      'include/cef_print_handler.h',
+      'include/cef_print_settings.h',
+      'include/cef_process_message.h',
+      'include/cef_process_util.h',
+      'include/cef_render_handler.h',
+      'include/cef_render_process_handler.h',
+      'include/cef_request.h',
+      'include/cef_request_context.h',
+      'include/cef_request_context_handler.h',
+      'include/cef_request_handler.h',
+      'include/cef_resource_bundle.h',
+      'include/cef_resource_bundle_handler.h',
+      'include/cef_resource_handler.h',
+      'include/cef_response.h',
+      'include/cef_response_filter.h',
+      'include/cef_scheme.h',
+      'include/cef_server.h',
+      'include/cef_ssl_info.h',
+      'include/cef_ssl_status.h',
+      'include/cef_stream.h',
+      'include/cef_string_visitor.h',
+      'include/cef_task.h',
+      'include/cef_thread.h',
+      'include/cef_trace.h',
+      'include/cef_urlrequest.h',
+      'include/cef_v8.h',
+      'include/cef_values.h',
+      'include/cef_waitable_event.h',
+      'include/cef_web_plugin.h',
+      'include/cef_x509_certificate.h',
+      'include/cef_xml_reader.h',
+      'include/cef_zip_reader.h',
+      'include/test/cef_test_helpers.h',
+      'include/test/cef_translator_test.h',
+      'include/views/cef_box_layout.h',
+      'include/views/cef_browser_view.h',
+      'include/views/cef_browser_view_delegate.h',
+      'include/views/cef_button.h',
+      'include/views/cef_button_delegate.h',
+      'include/views/cef_display.h',
+      'include/views/cef_fill_layout.h',
+      'include/views/cef_label_button.h',
+      'include/views/cef_layout.h',
+      'include/views/cef_menu_button.h',
+      'include/views/cef_menu_button_delegate.h',
+      'include/views/cef_panel.h',
+      'include/views/cef_panel_delegate.h',
+      'include/views/cef_scroll_view.h',
+      'include/views/cef_textfield.h',
+      'include/views/cef_textfield_delegate.h',
+      'include/views/cef_view.h',
+      'include/views/cef_view_delegate.h',
+      'include/views/cef_window.h',
+      'include/views/cef_window_delegate.h',
+    ],
+    'autogen_capi_includes': [
+      'include/capi/cef_accessibility_handler_capi.h',
+      'include/capi/cef_app_capi.h',
+      'include/capi/cef_audio_bus_capi.h',
+      'include/capi/cef_audio_handler_capi.h',
+      'include/capi/cef_auth_callback_capi.h',
+      'include/capi/cef_browser_capi.h',
+      'include/capi/cef_browser_process_handler_capi.h',
+      'include/capi/cef_callback_capi.h',
+      'include/capi/cef_client_capi.h',
+      'include/capi/cef_command_line_capi.h',
+      'include/capi/cef_context_menu_handler_capi.h',
+      'include/capi/cef_cookie_capi.h',
+      'include/capi/cef_crash_util_capi.h',
+      'include/capi/cef_dialog_handler_capi.h',
+      'include/capi/cef_display_handler_capi.h',
+      'include/capi/cef_dom_capi.h',
+      'include/capi/cef_download_handler_capi.h',
+      'include/capi/cef_download_item_capi.h',
+      'include/capi/cef_drag_data_capi.h',
+      'include/capi/cef_drag_handler_capi.h',
+      'include/capi/cef_extension_capi.h',
+      'include/capi/cef_extension_handler_capi.h',
+      'include/capi/cef_file_util_capi.h',
+      'include/capi/cef_find_handler_capi.h',
+      'include/capi/cef_focus_handler_capi.h',
+      'include/capi/cef_frame_capi.h',
+      'include/capi/cef_image_capi.h',
+      'include/capi/cef_jsdialog_handler_capi.h',
+      'include/capi/cef_keyboard_handler_capi.h',
+      'include/capi/cef_life_span_handler_capi.h',
+      'include/capi/cef_load_handler_capi.h',
+      'include/capi/cef_menu_model_capi.h',
+      'include/capi/cef_menu_model_delegate_capi.h',
+      'include/capi/cef_navigation_entry_capi.h',
+      'include/capi/cef_origin_whitelist_capi.h',
+      'include/capi/cef_parser_capi.h',
+      'include/capi/cef_path_util_capi.h',
+      'include/capi/cef_print_handler_capi.h',
+      'include/capi/cef_print_settings_capi.h',
+      'include/capi/cef_process_message_capi.h',
+      'include/capi/cef_process_util_capi.h',
+      'include/capi/cef_render_handler_capi.h',
+      'include/capi/cef_render_process_handler_capi.h',
+      'include/capi/cef_request_capi.h',
+      'include/capi/cef_request_context_capi.h',
+      'include/capi/cef_request_context_handler_capi.h',
+      'include/capi/cef_request_handler_capi.h',
+      'include/capi/cef_resource_bundle_capi.h',
+      'include/capi/cef_resource_bundle_handler_capi.h',
+      'include/capi/cef_resource_handler_capi.h',
+      'include/capi/cef_response_capi.h',
+      'include/capi/cef_response_filter_capi.h',
+      'include/capi/cef_scheme_capi.h',
+      'include/capi/cef_server_capi.h',
+      'include/capi/cef_ssl_info_capi.h',
+      'include/capi/cef_ssl_status_capi.h',
+      'include/capi/cef_stream_capi.h',
+      'include/capi/cef_string_visitor_capi.h',
+      'include/capi/cef_task_capi.h',
+      'include/capi/cef_thread_capi.h',
+      'include/capi/cef_trace_capi.h',
+      'include/capi/cef_urlrequest_capi.h',
+      'include/capi/cef_v8_capi.h',
+      'include/capi/cef_values_capi.h',
+      'include/capi/cef_waitable_event_capi.h',
+      'include/capi/cef_web_plugin_capi.h',
+      'include/capi/cef_x509_certificate_capi.h',
+      'include/capi/cef_xml_reader_capi.h',
+      'include/capi/cef_zip_reader_capi.h',
+      'include/capi/test/cef_test_helpers_capi.h',
+      'include/capi/test/cef_translator_test_capi.h',
+      'include/capi/views/cef_box_layout_capi.h',
+      'include/capi/views/cef_browser_view_capi.h',
+      'include/capi/views/cef_browser_view_delegate_capi.h',
+      'include/capi/views/cef_button_capi.h',
+      'include/capi/views/cef_button_delegate_capi.h',
+      'include/capi/views/cef_display_capi.h',
+      'include/capi/views/cef_fill_layout_capi.h',
+      'include/capi/views/cef_label_button_capi.h',
+      'include/capi/views/cef_layout_capi.h',
+      'include/capi/views/cef_menu_button_capi.h',
+      'include/capi/views/cef_menu_button_delegate_capi.h',
+      'include/capi/views/cef_panel_capi.h',
+      'include/capi/views/cef_panel_delegate_capi.h',
+      'include/capi/views/cef_scroll_view_capi.h',
+      'include/capi/views/cef_textfield_capi.h',
+      'include/capi/views/cef_textfield_delegate_capi.h',
+      'include/capi/views/cef_view_capi.h',
+      'include/capi/views/cef_view_delegate_capi.h',
+      'include/capi/views/cef_window_capi.h',
+      'include/capi/views/cef_window_delegate_capi.h',
+    ],
+    'autogen_library_side': [
+      'libcef_dll/ctocpp/accessibility_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/accessibility_handler_ctocpp.h',
+      'libcef_dll/ctocpp/app_ctocpp.cc',
+      'libcef_dll/ctocpp/app_ctocpp.h',
+      'libcef_dll/cpptoc/audio_bus_cpptoc.cc',
+      'libcef_dll/cpptoc/audio_bus_cpptoc.h',
+      'libcef_dll/ctocpp/audio_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/audio_handler_ctocpp.h',
+      'libcef_dll/cpptoc/auth_callback_cpptoc.cc',
+      'libcef_dll/cpptoc/auth_callback_cpptoc.h',
+      'libcef_dll/cpptoc/before_download_callback_cpptoc.cc',
+      'libcef_dll/cpptoc/before_download_callback_cpptoc.h',
+      'libcef_dll/cpptoc/binary_value_cpptoc.cc',
+      'libcef_dll/cpptoc/binary_value_cpptoc.h',
+      'libcef_dll/cpptoc/views/box_layout_cpptoc.cc',
+      'libcef_dll/cpptoc/views/box_layout_cpptoc.h',
+      'libcef_dll/cpptoc/browser_cpptoc.cc',
+      'libcef_dll/cpptoc/browser_cpptoc.h',
+      'libcef_dll/cpptoc/browser_host_cpptoc.cc',
+      'libcef_dll/cpptoc/browser_host_cpptoc.h',
+      'libcef_dll/ctocpp/browser_process_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/browser_process_handler_ctocpp.h',
+      'libcef_dll/cpptoc/views/browser_view_cpptoc.cc',
+      'libcef_dll/cpptoc/views/browser_view_cpptoc.h',
+      'libcef_dll/ctocpp/views/browser_view_delegate_ctocpp.cc',
+      'libcef_dll/ctocpp/views/browser_view_delegate_ctocpp.h',
+      'libcef_dll/cpptoc/views/button_cpptoc.cc',
+      'libcef_dll/cpptoc/views/button_cpptoc.h',
+      'libcef_dll/ctocpp/views/button_delegate_ctocpp.cc',
+      'libcef_dll/ctocpp/views/button_delegate_ctocpp.h',
+      'libcef_dll/cpptoc/callback_cpptoc.cc',
+      'libcef_dll/cpptoc/callback_cpptoc.h',
+      'libcef_dll/ctocpp/client_ctocpp.cc',
+      'libcef_dll/ctocpp/client_ctocpp.h',
+      'libcef_dll/cpptoc/command_line_cpptoc.cc',
+      'libcef_dll/cpptoc/command_line_cpptoc.h',
+      'libcef_dll/ctocpp/completion_callback_ctocpp.cc',
+      'libcef_dll/ctocpp/completion_callback_ctocpp.h',
+      'libcef_dll/ctocpp/context_menu_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/context_menu_handler_ctocpp.h',
+      'libcef_dll/cpptoc/context_menu_params_cpptoc.cc',
+      'libcef_dll/cpptoc/context_menu_params_cpptoc.h',
+      'libcef_dll/cpptoc/cookie_manager_cpptoc.cc',
+      'libcef_dll/cpptoc/cookie_manager_cpptoc.h',
+      'libcef_dll/ctocpp/cookie_visitor_ctocpp.cc',
+      'libcef_dll/ctocpp/cookie_visitor_ctocpp.h',
+      'libcef_dll/cpptoc/domdocument_cpptoc.cc',
+      'libcef_dll/cpptoc/domdocument_cpptoc.h',
+      'libcef_dll/cpptoc/domnode_cpptoc.cc',
+      'libcef_dll/cpptoc/domnode_cpptoc.h',
+      'libcef_dll/ctocpp/domvisitor_ctocpp.cc',
+      'libcef_dll/ctocpp/domvisitor_ctocpp.h',
+      'libcef_dll/ctocpp/delete_cookies_callback_ctocpp.cc',
+      'libcef_dll/ctocpp/delete_cookies_callback_ctocpp.h',
+      'libcef_dll/ctocpp/dialog_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/dialog_handler_ctocpp.h',
+      'libcef_dll/cpptoc/dictionary_value_cpptoc.cc',
+      'libcef_dll/cpptoc/dictionary_value_cpptoc.h',
+      'libcef_dll/cpptoc/views/display_cpptoc.cc',
+      'libcef_dll/cpptoc/views/display_cpptoc.h',
+      'libcef_dll/ctocpp/display_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/display_handler_ctocpp.h',
+      'libcef_dll/ctocpp/download_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/download_handler_ctocpp.h',
+      'libcef_dll/ctocpp/download_image_callback_ctocpp.cc',
+      'libcef_dll/ctocpp/download_image_callback_ctocpp.h',
+      'libcef_dll/cpptoc/download_item_cpptoc.cc',
+      'libcef_dll/cpptoc/download_item_cpptoc.h',
+      'libcef_dll/cpptoc/download_item_callback_cpptoc.cc',
+      'libcef_dll/cpptoc/download_item_callback_cpptoc.h',
+      'libcef_dll/cpptoc/drag_data_cpptoc.cc',
+      'libcef_dll/cpptoc/drag_data_cpptoc.h',
+      'libcef_dll/ctocpp/drag_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/drag_handler_ctocpp.h',
+      'libcef_dll/ctocpp/end_tracing_callback_ctocpp.cc',
+      'libcef_dll/ctocpp/end_tracing_callback_ctocpp.h',
+      'libcef_dll/cpptoc/extension_cpptoc.cc',
+      'libcef_dll/cpptoc/extension_cpptoc.h',
+      'libcef_dll/ctocpp/extension_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/extension_handler_ctocpp.h',
+      'libcef_dll/cpptoc/file_dialog_callback_cpptoc.cc',
+      'libcef_dll/cpptoc/file_dialog_callback_cpptoc.h',
+      'libcef_dll/cpptoc/views/fill_layout_cpptoc.cc',
+      'libcef_dll/cpptoc/views/fill_layout_cpptoc.h',
+      'libcef_dll/ctocpp/find_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/find_handler_ctocpp.h',
+      'libcef_dll/ctocpp/focus_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/focus_handler_ctocpp.h',
+      'libcef_dll/cpptoc/frame_cpptoc.cc',
+      'libcef_dll/cpptoc/frame_cpptoc.h',
+      'libcef_dll/cpptoc/get_extension_resource_callback_cpptoc.cc',
+      'libcef_dll/cpptoc/get_extension_resource_callback_cpptoc.h',
+      'libcef_dll/cpptoc/image_cpptoc.cc',
+      'libcef_dll/cpptoc/image_cpptoc.h',
+      'libcef_dll/cpptoc/jsdialog_callback_cpptoc.cc',
+      'libcef_dll/cpptoc/jsdialog_callback_cpptoc.h',
+      'libcef_dll/ctocpp/jsdialog_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/jsdialog_handler_ctocpp.h',
+      'libcef_dll/ctocpp/keyboard_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/keyboard_handler_ctocpp.h',
+      'libcef_dll/cpptoc/views/label_button_cpptoc.cc',
+      'libcef_dll/cpptoc/views/label_button_cpptoc.h',
+      'libcef_dll/cpptoc/views/layout_cpptoc.cc',
+      'libcef_dll/cpptoc/views/layout_cpptoc.h',
+      'libcef_dll/ctocpp/life_span_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/life_span_handler_ctocpp.h',
+      'libcef_dll/cpptoc/list_value_cpptoc.cc',
+      'libcef_dll/cpptoc/list_value_cpptoc.h',
+      'libcef_dll/ctocpp/load_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/load_handler_ctocpp.h',
+      'libcef_dll/cpptoc/views/menu_button_cpptoc.cc',
+      'libcef_dll/cpptoc/views/menu_button_cpptoc.h',
+      'libcef_dll/ctocpp/views/menu_button_delegate_ctocpp.cc',
+      'libcef_dll/ctocpp/views/menu_button_delegate_ctocpp.h',
+      'libcef_dll/cpptoc/views/menu_button_pressed_lock_cpptoc.cc',
+      'libcef_dll/cpptoc/views/menu_button_pressed_lock_cpptoc.h',
+      'libcef_dll/cpptoc/menu_model_cpptoc.cc',
+      'libcef_dll/cpptoc/menu_model_cpptoc.h',
+      'libcef_dll/ctocpp/menu_model_delegate_ctocpp.cc',
+      'libcef_dll/ctocpp/menu_model_delegate_ctocpp.h',
+      'libcef_dll/cpptoc/navigation_entry_cpptoc.cc',
+      'libcef_dll/cpptoc/navigation_entry_cpptoc.h',
+      'libcef_dll/ctocpp/navigation_entry_visitor_ctocpp.cc',
+      'libcef_dll/ctocpp/navigation_entry_visitor_ctocpp.h',
+      'libcef_dll/cpptoc/views/panel_cpptoc.cc',
+      'libcef_dll/cpptoc/views/panel_cpptoc.h',
+      'libcef_dll/ctocpp/views/panel_delegate_ctocpp.cc',
+      'libcef_dll/ctocpp/views/panel_delegate_ctocpp.h',
+      'libcef_dll/ctocpp/pdf_print_callback_ctocpp.cc',
+      'libcef_dll/ctocpp/pdf_print_callback_ctocpp.h',
+      'libcef_dll/cpptoc/post_data_cpptoc.cc',
+      'libcef_dll/cpptoc/post_data_cpptoc.h',
+      'libcef_dll/cpptoc/post_data_element_cpptoc.cc',
+      'libcef_dll/cpptoc/post_data_element_cpptoc.h',
+      'libcef_dll/cpptoc/print_dialog_callback_cpptoc.cc',
+      'libcef_dll/cpptoc/print_dialog_callback_cpptoc.h',
+      'libcef_dll/ctocpp/print_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/print_handler_ctocpp.h',
+      'libcef_dll/cpptoc/print_job_callback_cpptoc.cc',
+      'libcef_dll/cpptoc/print_job_callback_cpptoc.h',
+      'libcef_dll/cpptoc/print_settings_cpptoc.cc',
+      'libcef_dll/cpptoc/print_settings_cpptoc.h',
+      'libcef_dll/cpptoc/process_message_cpptoc.cc',
+      'libcef_dll/cpptoc/process_message_cpptoc.h',
+      'libcef_dll/ctocpp/read_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/read_handler_ctocpp.h',
+      'libcef_dll/ctocpp/register_cdm_callback_ctocpp.cc',
+      'libcef_dll/ctocpp/register_cdm_callback_ctocpp.h',
+      'libcef_dll/ctocpp/render_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/render_handler_ctocpp.h',
+      'libcef_dll/ctocpp/render_process_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/render_process_handler_ctocpp.h',
+      'libcef_dll/cpptoc/request_cpptoc.cc',
+      'libcef_dll/cpptoc/request_cpptoc.h',
+      'libcef_dll/cpptoc/request_callback_cpptoc.cc',
+      'libcef_dll/cpptoc/request_callback_cpptoc.h',
+      'libcef_dll/cpptoc/request_context_cpptoc.cc',
+      'libcef_dll/cpptoc/request_context_cpptoc.h',
+      'libcef_dll/ctocpp/request_context_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/request_context_handler_ctocpp.h',
+      'libcef_dll/ctocpp/request_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/request_handler_ctocpp.h',
+      'libcef_dll/ctocpp/resolve_callback_ctocpp.cc',
+      'libcef_dll/ctocpp/resolve_callback_ctocpp.h',
+      'libcef_dll/cpptoc/resource_bundle_cpptoc.cc',
+      'libcef_dll/cpptoc/resource_bundle_cpptoc.h',
+      'libcef_dll/ctocpp/resource_bundle_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/resource_bundle_handler_ctocpp.h',
+      'libcef_dll/ctocpp/resource_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/resource_handler_ctocpp.h',
+      'libcef_dll/cpptoc/response_cpptoc.cc',
+      'libcef_dll/cpptoc/response_cpptoc.h',
+      'libcef_dll/ctocpp/response_filter_ctocpp.cc',
+      'libcef_dll/ctocpp/response_filter_ctocpp.h',
+      'libcef_dll/cpptoc/run_context_menu_callback_cpptoc.cc',
+      'libcef_dll/cpptoc/run_context_menu_callback_cpptoc.h',
+      'libcef_dll/ctocpp/run_file_dialog_callback_ctocpp.cc',
+      'libcef_dll/ctocpp/run_file_dialog_callback_ctocpp.h',
+      'libcef_dll/cpptoc/sslinfo_cpptoc.cc',
+      'libcef_dll/cpptoc/sslinfo_cpptoc.h',
+      'libcef_dll/cpptoc/sslstatus_cpptoc.cc',
+      'libcef_dll/cpptoc/sslstatus_cpptoc.h',
+      'libcef_dll/ctocpp/scheme_handler_factory_ctocpp.cc',
+      'libcef_dll/ctocpp/scheme_handler_factory_ctocpp.h',
+      'libcef_dll/cpptoc/scheme_registrar_cpptoc.cc',
+      'libcef_dll/cpptoc/scheme_registrar_cpptoc.h',
+      'libcef_dll/cpptoc/views/scroll_view_cpptoc.cc',
+      'libcef_dll/cpptoc/views/scroll_view_cpptoc.h',
+      'libcef_dll/cpptoc/select_client_certificate_callback_cpptoc.cc',
+      'libcef_dll/cpptoc/select_client_certificate_callback_cpptoc.h',
+      'libcef_dll/cpptoc/server_cpptoc.cc',
+      'libcef_dll/cpptoc/server_cpptoc.h',
+      'libcef_dll/ctocpp/server_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/server_handler_ctocpp.h',
+      'libcef_dll/ctocpp/set_cookie_callback_ctocpp.cc',
+      'libcef_dll/ctocpp/set_cookie_callback_ctocpp.h',
+      'libcef_dll/cpptoc/stream_reader_cpptoc.cc',
+      'libcef_dll/cpptoc/stream_reader_cpptoc.h',
+      'libcef_dll/cpptoc/stream_writer_cpptoc.cc',
+      'libcef_dll/cpptoc/stream_writer_cpptoc.h',
+      'libcef_dll/ctocpp/string_visitor_ctocpp.cc',
+      'libcef_dll/ctocpp/string_visitor_ctocpp.h',
+      'libcef_dll/ctocpp/task_ctocpp.cc',
+      'libcef_dll/ctocpp/task_ctocpp.h',
+      'libcef_dll/cpptoc/task_runner_cpptoc.cc',
+      'libcef_dll/cpptoc/task_runner_cpptoc.h',
+      'libcef_dll/cpptoc/views/textfield_cpptoc.cc',
+      'libcef_dll/cpptoc/views/textfield_cpptoc.h',
+      'libcef_dll/ctocpp/views/textfield_delegate_ctocpp.cc',
+      'libcef_dll/ctocpp/views/textfield_delegate_ctocpp.h',
+      'libcef_dll/cpptoc/thread_cpptoc.cc',
+      'libcef_dll/cpptoc/thread_cpptoc.h',
+      'libcef_dll/cpptoc/test/translator_test_cpptoc.cc',
+      'libcef_dll/cpptoc/test/translator_test_cpptoc.h',
+      'libcef_dll/ctocpp/test/translator_test_ref_ptr_client_ctocpp.cc',
+      'libcef_dll/ctocpp/test/translator_test_ref_ptr_client_ctocpp.h',
+      'libcef_dll/ctocpp/test/translator_test_ref_ptr_client_child_ctocpp.cc',
+      'libcef_dll/ctocpp/test/translator_test_ref_ptr_client_child_ctocpp.h',
+      'libcef_dll/cpptoc/test/translator_test_ref_ptr_library_cpptoc.cc',
+      'libcef_dll/cpptoc/test/translator_test_ref_ptr_library_cpptoc.h',
+      'libcef_dll/cpptoc/test/translator_test_ref_ptr_library_child_cpptoc.cc',
+      'libcef_dll/cpptoc/test/translator_test_ref_ptr_library_child_cpptoc.h',
+      'libcef_dll/cpptoc/test/translator_test_ref_ptr_library_child_child_cpptoc.cc',
+      'libcef_dll/cpptoc/test/translator_test_ref_ptr_library_child_child_cpptoc.h',
+      'libcef_dll/ctocpp/test/translator_test_scoped_client_ctocpp.cc',
+      'libcef_dll/ctocpp/test/translator_test_scoped_client_ctocpp.h',
+      'libcef_dll/ctocpp/test/translator_test_scoped_client_child_ctocpp.cc',
+      'libcef_dll/ctocpp/test/translator_test_scoped_client_child_ctocpp.h',
+      'libcef_dll/cpptoc/test/translator_test_scoped_library_cpptoc.cc',
+      'libcef_dll/cpptoc/test/translator_test_scoped_library_cpptoc.h',
+      'libcef_dll/cpptoc/test/translator_test_scoped_library_child_cpptoc.cc',
+      'libcef_dll/cpptoc/test/translator_test_scoped_library_child_cpptoc.h',
+      'libcef_dll/cpptoc/test/translator_test_scoped_library_child_child_cpptoc.cc',
+      'libcef_dll/cpptoc/test/translator_test_scoped_library_child_child_cpptoc.h',
+      'libcef_dll/cpptoc/urlrequest_cpptoc.cc',
+      'libcef_dll/cpptoc/urlrequest_cpptoc.h',
+      'libcef_dll/ctocpp/urlrequest_client_ctocpp.cc',
+      'libcef_dll/ctocpp/urlrequest_client_ctocpp.h',
+      'libcef_dll/ctocpp/v8accessor_ctocpp.cc',
+      'libcef_dll/ctocpp/v8accessor_ctocpp.h',
+      'libcef_dll/ctocpp/v8array_buffer_release_callback_ctocpp.cc',
+      'libcef_dll/ctocpp/v8array_buffer_release_callback_ctocpp.h',
+      'libcef_dll/cpptoc/v8context_cpptoc.cc',
+      'libcef_dll/cpptoc/v8context_cpptoc.h',
+      'libcef_dll/cpptoc/v8exception_cpptoc.cc',
+      'libcef_dll/cpptoc/v8exception_cpptoc.h',
+      'libcef_dll/ctocpp/v8handler_ctocpp.cc',
+      'libcef_dll/ctocpp/v8handler_ctocpp.h',
+      'libcef_dll/ctocpp/v8interceptor_ctocpp.cc',
+      'libcef_dll/ctocpp/v8interceptor_ctocpp.h',
+      'libcef_dll/cpptoc/v8stack_frame_cpptoc.cc',
+      'libcef_dll/cpptoc/v8stack_frame_cpptoc.h',
+      'libcef_dll/cpptoc/v8stack_trace_cpptoc.cc',
+      'libcef_dll/cpptoc/v8stack_trace_cpptoc.h',
+      'libcef_dll/cpptoc/v8value_cpptoc.cc',
+      'libcef_dll/cpptoc/v8value_cpptoc.h',
+      'libcef_dll/cpptoc/value_cpptoc.cc',
+      'libcef_dll/cpptoc/value_cpptoc.h',
+      'libcef_dll/cpptoc/views/view_cpptoc.cc',
+      'libcef_dll/cpptoc/views/view_cpptoc.h',
+      'libcef_dll/ctocpp/views/view_delegate_ctocpp.cc',
+      'libcef_dll/ctocpp/views/view_delegate_ctocpp.h',
+      'libcef_dll/cpptoc/waitable_event_cpptoc.cc',
+      'libcef_dll/cpptoc/waitable_event_cpptoc.h',
+      'libcef_dll/cpptoc/web_plugin_info_cpptoc.cc',
+      'libcef_dll/cpptoc/web_plugin_info_cpptoc.h',
+      'libcef_dll/ctocpp/web_plugin_info_visitor_ctocpp.cc',
+      'libcef_dll/ctocpp/web_plugin_info_visitor_ctocpp.h',
+      'libcef_dll/ctocpp/web_plugin_unstable_callback_ctocpp.cc',
+      'libcef_dll/ctocpp/web_plugin_unstable_callback_ctocpp.h',
+      'libcef_dll/cpptoc/views/window_cpptoc.cc',
+      'libcef_dll/cpptoc/views/window_cpptoc.h',
+      'libcef_dll/ctocpp/views/window_delegate_ctocpp.cc',
+      'libcef_dll/ctocpp/views/window_delegate_ctocpp.h',
+      'libcef_dll/ctocpp/write_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/write_handler_ctocpp.h',
+      'libcef_dll/cpptoc/x509cert_principal_cpptoc.cc',
+      'libcef_dll/cpptoc/x509cert_principal_cpptoc.h',
+      'libcef_dll/cpptoc/x509certificate_cpptoc.cc',
+      'libcef_dll/cpptoc/x509certificate_cpptoc.h',
+      'libcef_dll/cpptoc/xml_reader_cpptoc.cc',
+      'libcef_dll/cpptoc/xml_reader_cpptoc.h',
+      'libcef_dll/cpptoc/zip_reader_cpptoc.cc',
+      'libcef_dll/cpptoc/zip_reader_cpptoc.h',
+    ],
+    'autogen_client_side': [
+      'libcef_dll/cpptoc/accessibility_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/accessibility_handler_cpptoc.h',
+      'libcef_dll/cpptoc/app_cpptoc.cc',
+      'libcef_dll/cpptoc/app_cpptoc.h',
+      'libcef_dll/ctocpp/audio_bus_ctocpp.cc',
+      'libcef_dll/ctocpp/audio_bus_ctocpp.h',
+      'libcef_dll/cpptoc/audio_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/audio_handler_cpptoc.h',
+      'libcef_dll/ctocpp/auth_callback_ctocpp.cc',
+      'libcef_dll/ctocpp/auth_callback_ctocpp.h',
+      'libcef_dll/ctocpp/before_download_callback_ctocpp.cc',
+      'libcef_dll/ctocpp/before_download_callback_ctocpp.h',
+      'libcef_dll/ctocpp/binary_value_ctocpp.cc',
+      'libcef_dll/ctocpp/binary_value_ctocpp.h',
+      'libcef_dll/ctocpp/views/box_layout_ctocpp.cc',
+      'libcef_dll/ctocpp/views/box_layout_ctocpp.h',
+      'libcef_dll/ctocpp/browser_ctocpp.cc',
+      'libcef_dll/ctocpp/browser_ctocpp.h',
+      'libcef_dll/ctocpp/browser_host_ctocpp.cc',
+      'libcef_dll/ctocpp/browser_host_ctocpp.h',
+      'libcef_dll/cpptoc/browser_process_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/browser_process_handler_cpptoc.h',
+      'libcef_dll/ctocpp/views/browser_view_ctocpp.cc',
+      'libcef_dll/ctocpp/views/browser_view_ctocpp.h',
+      'libcef_dll/cpptoc/views/browser_view_delegate_cpptoc.cc',
+      'libcef_dll/cpptoc/views/browser_view_delegate_cpptoc.h',
+      'libcef_dll/ctocpp/views/button_ctocpp.cc',
+      'libcef_dll/ctocpp/views/button_ctocpp.h',
+      'libcef_dll/cpptoc/views/button_delegate_cpptoc.cc',
+      'libcef_dll/cpptoc/views/button_delegate_cpptoc.h',
+      'libcef_dll/ctocpp/callback_ctocpp.cc',
+      'libcef_dll/ctocpp/callback_ctocpp.h',
+      'libcef_dll/cpptoc/client_cpptoc.cc',
+      'libcef_dll/cpptoc/client_cpptoc.h',
+      'libcef_dll/ctocpp/command_line_ctocpp.cc',
+      'libcef_dll/ctocpp/command_line_ctocpp.h',
+      'libcef_dll/cpptoc/completion_callback_cpptoc.cc',
+      'libcef_dll/cpptoc/completion_callback_cpptoc.h',
+      'libcef_dll/cpptoc/context_menu_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/context_menu_handler_cpptoc.h',
+      'libcef_dll/ctocpp/context_menu_params_ctocpp.cc',
+      'libcef_dll/ctocpp/context_menu_params_ctocpp.h',
+      'libcef_dll/ctocpp/cookie_manager_ctocpp.cc',
+      'libcef_dll/ctocpp/cookie_manager_ctocpp.h',
+      'libcef_dll/cpptoc/cookie_visitor_cpptoc.cc',
+      'libcef_dll/cpptoc/cookie_visitor_cpptoc.h',
+      'libcef_dll/ctocpp/domdocument_ctocpp.cc',
+      'libcef_dll/ctocpp/domdocument_ctocpp.h',
+      'libcef_dll/ctocpp/domnode_ctocpp.cc',
+      'libcef_dll/ctocpp/domnode_ctocpp.h',
+      'libcef_dll/cpptoc/domvisitor_cpptoc.cc',
+      'libcef_dll/cpptoc/domvisitor_cpptoc.h',
+      'libcef_dll/cpptoc/delete_cookies_callback_cpptoc.cc',
+      'libcef_dll/cpptoc/delete_cookies_callback_cpptoc.h',
+      'libcef_dll/cpptoc/dialog_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/dialog_handler_cpptoc.h',
+      'libcef_dll/ctocpp/dictionary_value_ctocpp.cc',
+      'libcef_dll/ctocpp/dictionary_value_ctocpp.h',
+      'libcef_dll/ctocpp/views/display_ctocpp.cc',
+      'libcef_dll/ctocpp/views/display_ctocpp.h',
+      'libcef_dll/cpptoc/display_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/display_handler_cpptoc.h',
+      'libcef_dll/cpptoc/download_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/download_handler_cpptoc.h',
+      'libcef_dll/cpptoc/download_image_callback_cpptoc.cc',
+      'libcef_dll/cpptoc/download_image_callback_cpptoc.h',
+      'libcef_dll/ctocpp/download_item_ctocpp.cc',
+      'libcef_dll/ctocpp/download_item_ctocpp.h',
+      'libcef_dll/ctocpp/download_item_callback_ctocpp.cc',
+      'libcef_dll/ctocpp/download_item_callback_ctocpp.h',
+      'libcef_dll/ctocpp/drag_data_ctocpp.cc',
+      'libcef_dll/ctocpp/drag_data_ctocpp.h',
+      'libcef_dll/cpptoc/drag_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/drag_handler_cpptoc.h',
+      'libcef_dll/cpptoc/end_tracing_callback_cpptoc.cc',
+      'libcef_dll/cpptoc/end_tracing_callback_cpptoc.h',
+      'libcef_dll/ctocpp/extension_ctocpp.cc',
+      'libcef_dll/ctocpp/extension_ctocpp.h',
+      'libcef_dll/cpptoc/extension_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/extension_handler_cpptoc.h',
+      'libcef_dll/ctocpp/file_dialog_callback_ctocpp.cc',
+      'libcef_dll/ctocpp/file_dialog_callback_ctocpp.h',
+      'libcef_dll/ctocpp/views/fill_layout_ctocpp.cc',
+      'libcef_dll/ctocpp/views/fill_layout_ctocpp.h',
+      'libcef_dll/cpptoc/find_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/find_handler_cpptoc.h',
+      'libcef_dll/cpptoc/focus_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/focus_handler_cpptoc.h',
+      'libcef_dll/ctocpp/frame_ctocpp.cc',
+      'libcef_dll/ctocpp/frame_ctocpp.h',
+      'libcef_dll/ctocpp/get_extension_resource_callback_ctocpp.cc',
+      'libcef_dll/ctocpp/get_extension_resource_callback_ctocpp.h',
+      'libcef_dll/ctocpp/image_ctocpp.cc',
+      'libcef_dll/ctocpp/image_ctocpp.h',
+      'libcef_dll/ctocpp/jsdialog_callback_ctocpp.cc',
+      'libcef_dll/ctocpp/jsdialog_callback_ctocpp.h',
+      'libcef_dll/cpptoc/jsdialog_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/jsdialog_handler_cpptoc.h',
+      'libcef_dll/cpptoc/keyboard_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/keyboard_handler_cpptoc.h',
+      'libcef_dll/ctocpp/views/label_button_ctocpp.cc',
+      'libcef_dll/ctocpp/views/label_button_ctocpp.h',
+      'libcef_dll/ctocpp/views/layout_ctocpp.cc',
+      'libcef_dll/ctocpp/views/layout_ctocpp.h',
+      'libcef_dll/cpptoc/life_span_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/life_span_handler_cpptoc.h',
+      'libcef_dll/ctocpp/list_value_ctocpp.cc',
+      'libcef_dll/ctocpp/list_value_ctocpp.h',
+      'libcef_dll/cpptoc/load_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/load_handler_cpptoc.h',
+      'libcef_dll/ctocpp/views/menu_button_ctocpp.cc',
+      'libcef_dll/ctocpp/views/menu_button_ctocpp.h',
+      'libcef_dll/cpptoc/views/menu_button_delegate_cpptoc.cc',
+      'libcef_dll/cpptoc/views/menu_button_delegate_cpptoc.h',
+      'libcef_dll/ctocpp/views/menu_button_pressed_lock_ctocpp.cc',
+      'libcef_dll/ctocpp/views/menu_button_pressed_lock_ctocpp.h',
+      'libcef_dll/ctocpp/menu_model_ctocpp.cc',
+      'libcef_dll/ctocpp/menu_model_ctocpp.h',
+      'libcef_dll/cpptoc/menu_model_delegate_cpptoc.cc',
+      'libcef_dll/cpptoc/menu_model_delegate_cpptoc.h',
+      'libcef_dll/ctocpp/navigation_entry_ctocpp.cc',
+      'libcef_dll/ctocpp/navigation_entry_ctocpp.h',
+      'libcef_dll/cpptoc/navigation_entry_visitor_cpptoc.cc',
+      'libcef_dll/cpptoc/navigation_entry_visitor_cpptoc.h',
+      'libcef_dll/ctocpp/views/panel_ctocpp.cc',
+      'libcef_dll/ctocpp/views/panel_ctocpp.h',
+      'libcef_dll/cpptoc/views/panel_delegate_cpptoc.cc',
+      'libcef_dll/cpptoc/views/panel_delegate_cpptoc.h',
+      'libcef_dll/cpptoc/pdf_print_callback_cpptoc.cc',
+      'libcef_dll/cpptoc/pdf_print_callback_cpptoc.h',
+      'libcef_dll/ctocpp/post_data_ctocpp.cc',
+      'libcef_dll/ctocpp/post_data_ctocpp.h',
+      'libcef_dll/ctocpp/post_data_element_ctocpp.cc',
+      'libcef_dll/ctocpp/post_data_element_ctocpp.h',
+      'libcef_dll/ctocpp/print_dialog_callback_ctocpp.cc',
+      'libcef_dll/ctocpp/print_dialog_callback_ctocpp.h',
+      'libcef_dll/cpptoc/print_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/print_handler_cpptoc.h',
+      'libcef_dll/ctocpp/print_job_callback_ctocpp.cc',
+      'libcef_dll/ctocpp/print_job_callback_ctocpp.h',
+      'libcef_dll/ctocpp/print_settings_ctocpp.cc',
+      'libcef_dll/ctocpp/print_settings_ctocpp.h',
+      'libcef_dll/ctocpp/process_message_ctocpp.cc',
+      'libcef_dll/ctocpp/process_message_ctocpp.h',
+      'libcef_dll/cpptoc/read_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/read_handler_cpptoc.h',
+      'libcef_dll/cpptoc/register_cdm_callback_cpptoc.cc',
+      'libcef_dll/cpptoc/register_cdm_callback_cpptoc.h',
+      'libcef_dll/cpptoc/render_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/render_handler_cpptoc.h',
+      'libcef_dll/cpptoc/render_process_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/render_process_handler_cpptoc.h',
+      'libcef_dll/ctocpp/request_ctocpp.cc',
+      'libcef_dll/ctocpp/request_ctocpp.h',
+      'libcef_dll/ctocpp/request_callback_ctocpp.cc',
+      'libcef_dll/ctocpp/request_callback_ctocpp.h',
+      'libcef_dll/ctocpp/request_context_ctocpp.cc',
+      'libcef_dll/ctocpp/request_context_ctocpp.h',
+      'libcef_dll/cpptoc/request_context_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/request_context_handler_cpptoc.h',
+      'libcef_dll/cpptoc/request_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/request_handler_cpptoc.h',
+      'libcef_dll/cpptoc/resolve_callback_cpptoc.cc',
+      'libcef_dll/cpptoc/resolve_callback_cpptoc.h',
+      'libcef_dll/ctocpp/resource_bundle_ctocpp.cc',
+      'libcef_dll/ctocpp/resource_bundle_ctocpp.h',
+      'libcef_dll/cpptoc/resource_bundle_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/resource_bundle_handler_cpptoc.h',
+      'libcef_dll/cpptoc/resource_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/resource_handler_cpptoc.h',
+      'libcef_dll/ctocpp/response_ctocpp.cc',
+      'libcef_dll/ctocpp/response_ctocpp.h',
+      'libcef_dll/cpptoc/response_filter_cpptoc.cc',
+      'libcef_dll/cpptoc/response_filter_cpptoc.h',
+      'libcef_dll/ctocpp/run_context_menu_callback_ctocpp.cc',
+      'libcef_dll/ctocpp/run_context_menu_callback_ctocpp.h',
+      'libcef_dll/cpptoc/run_file_dialog_callback_cpptoc.cc',
+      'libcef_dll/cpptoc/run_file_dialog_callback_cpptoc.h',
+      'libcef_dll/ctocpp/sslinfo_ctocpp.cc',
+      'libcef_dll/ctocpp/sslinfo_ctocpp.h',
+      'libcef_dll/ctocpp/sslstatus_ctocpp.cc',
+      'libcef_dll/ctocpp/sslstatus_ctocpp.h',
+      'libcef_dll/cpptoc/scheme_handler_factory_cpptoc.cc',
+      'libcef_dll/cpptoc/scheme_handler_factory_cpptoc.h',
+      'libcef_dll/ctocpp/scheme_registrar_ctocpp.cc',
+      'libcef_dll/ctocpp/scheme_registrar_ctocpp.h',
+      'libcef_dll/ctocpp/views/scroll_view_ctocpp.cc',
+      'libcef_dll/ctocpp/views/scroll_view_ctocpp.h',
+      'libcef_dll/ctocpp/select_client_certificate_callback_ctocpp.cc',
+      'libcef_dll/ctocpp/select_client_certificate_callback_ctocpp.h',
+      'libcef_dll/ctocpp/server_ctocpp.cc',
+      'libcef_dll/ctocpp/server_ctocpp.h',
+      'libcef_dll/cpptoc/server_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/server_handler_cpptoc.h',
+      'libcef_dll/cpptoc/set_cookie_callback_cpptoc.cc',
+      'libcef_dll/cpptoc/set_cookie_callback_cpptoc.h',
+      'libcef_dll/ctocpp/stream_reader_ctocpp.cc',
+      'libcef_dll/ctocpp/stream_reader_ctocpp.h',
+      'libcef_dll/ctocpp/stream_writer_ctocpp.cc',
+      'libcef_dll/ctocpp/stream_writer_ctocpp.h',
+      'libcef_dll/cpptoc/string_visitor_cpptoc.cc',
+      'libcef_dll/cpptoc/string_visitor_cpptoc.h',
+      'libcef_dll/cpptoc/task_cpptoc.cc',
+      'libcef_dll/cpptoc/task_cpptoc.h',
+      'libcef_dll/ctocpp/task_runner_ctocpp.cc',
+      'libcef_dll/ctocpp/task_runner_ctocpp.h',
+      'libcef_dll/ctocpp/views/textfield_ctocpp.cc',
+      'libcef_dll/ctocpp/views/textfield_ctocpp.h',
+      'libcef_dll/cpptoc/views/textfield_delegate_cpptoc.cc',
+      'libcef_dll/cpptoc/views/textfield_delegate_cpptoc.h',
+      'libcef_dll/ctocpp/thread_ctocpp.cc',
+      'libcef_dll/ctocpp/thread_ctocpp.h',
+      'libcef_dll/ctocpp/test/translator_test_ctocpp.cc',
+      'libcef_dll/ctocpp/test/translator_test_ctocpp.h',
+      'libcef_dll/cpptoc/test/translator_test_ref_ptr_client_cpptoc.cc',
+      'libcef_dll/cpptoc/test/translator_test_ref_ptr_client_cpptoc.h',
+      'libcef_dll/cpptoc/test/translator_test_ref_ptr_client_child_cpptoc.cc',
+      'libcef_dll/cpptoc/test/translator_test_ref_ptr_client_child_cpptoc.h',
+      'libcef_dll/ctocpp/test/translator_test_ref_ptr_library_ctocpp.cc',
+      'libcef_dll/ctocpp/test/translator_test_ref_ptr_library_ctocpp.h',
+      'libcef_dll/ctocpp/test/translator_test_ref_ptr_library_child_ctocpp.cc',
+      'libcef_dll/ctocpp/test/translator_test_ref_ptr_library_child_ctocpp.h',
+      'libcef_dll/ctocpp/test/translator_test_ref_ptr_library_child_child_ctocpp.cc',
+      'libcef_dll/ctocpp/test/translator_test_ref_ptr_library_child_child_ctocpp.h',
+      'libcef_dll/cpptoc/test/translator_test_scoped_client_cpptoc.cc',
+      'libcef_dll/cpptoc/test/translator_test_scoped_client_cpptoc.h',
+      'libcef_dll/cpptoc/test/translator_test_scoped_client_child_cpptoc.cc',
+      'libcef_dll/cpptoc/test/translator_test_scoped_client_child_cpptoc.h',
+      'libcef_dll/ctocpp/test/translator_test_scoped_library_ctocpp.cc',
+      'libcef_dll/ctocpp/test/translator_test_scoped_library_ctocpp.h',
+      'libcef_dll/ctocpp/test/translator_test_scoped_library_child_ctocpp.cc',
+      'libcef_dll/ctocpp/test/translator_test_scoped_library_child_ctocpp.h',
+      'libcef_dll/ctocpp/test/translator_test_scoped_library_child_child_ctocpp.cc',
+      'libcef_dll/ctocpp/test/translator_test_scoped_library_child_child_ctocpp.h',
+      'libcef_dll/ctocpp/urlrequest_ctocpp.cc',
+      'libcef_dll/ctocpp/urlrequest_ctocpp.h',
+      'libcef_dll/cpptoc/urlrequest_client_cpptoc.cc',
+      'libcef_dll/cpptoc/urlrequest_client_cpptoc.h',
+      'libcef_dll/cpptoc/v8accessor_cpptoc.cc',
+      'libcef_dll/cpptoc/v8accessor_cpptoc.h',
+      'libcef_dll/cpptoc/v8array_buffer_release_callback_cpptoc.cc',
+      'libcef_dll/cpptoc/v8array_buffer_release_callback_cpptoc.h',
+      'libcef_dll/ctocpp/v8context_ctocpp.cc',
+      'libcef_dll/ctocpp/v8context_ctocpp.h',
+      'libcef_dll/ctocpp/v8exception_ctocpp.cc',
+      'libcef_dll/ctocpp/v8exception_ctocpp.h',
+      'libcef_dll/cpptoc/v8handler_cpptoc.cc',
+      'libcef_dll/cpptoc/v8handler_cpptoc.h',
+      'libcef_dll/cpptoc/v8interceptor_cpptoc.cc',
+      'libcef_dll/cpptoc/v8interceptor_cpptoc.h',
+      'libcef_dll/ctocpp/v8stack_frame_ctocpp.cc',
+      'libcef_dll/ctocpp/v8stack_frame_ctocpp.h',
+      'libcef_dll/ctocpp/v8stack_trace_ctocpp.cc',
+      'libcef_dll/ctocpp/v8stack_trace_ctocpp.h',
+      'libcef_dll/ctocpp/v8value_ctocpp.cc',
+      'libcef_dll/ctocpp/v8value_ctocpp.h',
+      'libcef_dll/ctocpp/value_ctocpp.cc',
+      'libcef_dll/ctocpp/value_ctocpp.h',
+      'libcef_dll/ctocpp/views/view_ctocpp.cc',
+      'libcef_dll/ctocpp/views/view_ctocpp.h',
+      'libcef_dll/cpptoc/views/view_delegate_cpptoc.cc',
+      'libcef_dll/cpptoc/views/view_delegate_cpptoc.h',
+      'libcef_dll/ctocpp/waitable_event_ctocpp.cc',
+      'libcef_dll/ctocpp/waitable_event_ctocpp.h',
+      'libcef_dll/ctocpp/web_plugin_info_ctocpp.cc',
+      'libcef_dll/ctocpp/web_plugin_info_ctocpp.h',
+      'libcef_dll/cpptoc/web_plugin_info_visitor_cpptoc.cc',
+      'libcef_dll/cpptoc/web_plugin_info_visitor_cpptoc.h',
+      'libcef_dll/cpptoc/web_plugin_unstable_callback_cpptoc.cc',
+      'libcef_dll/cpptoc/web_plugin_unstable_callback_cpptoc.h',
+      'libcef_dll/ctocpp/views/window_ctocpp.cc',
+      'libcef_dll/ctocpp/views/window_ctocpp.h',
+      'libcef_dll/cpptoc/views/window_delegate_cpptoc.cc',
+      'libcef_dll/cpptoc/views/window_delegate_cpptoc.h',
+      'libcef_dll/cpptoc/write_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/write_handler_cpptoc.h',
+      'libcef_dll/ctocpp/x509cert_principal_ctocpp.cc',
+      'libcef_dll/ctocpp/x509cert_principal_ctocpp.h',
+      'libcef_dll/ctocpp/x509certificate_ctocpp.cc',
+      'libcef_dll/ctocpp/x509certificate_ctocpp.h',
+      'libcef_dll/ctocpp/xml_reader_ctocpp.cc',
+      'libcef_dll/ctocpp/xml_reader_ctocpp.h',
+      'libcef_dll/ctocpp/zip_reader_ctocpp.cc',
+      'libcef_dll/ctocpp/zip_reader_ctocpp.h',
+    ],
+  },
+}
diff --git a/create.bat b/create.bat
new file mode 100644
index 0000000..47c4701
--- /dev/null
+++ b/create.bat
@@ -0,0 +1,4 @@
+set CEF_USE_GN=1
+set GN_DEFINES=use_jumbo_build=true
+set GN_ARGUMENTS=--ide=vs2017 --sln=cef --filters=//cef/*
+call cef_create_projects.bat
\ No newline at end of file
diff --git a/include/capi/cef_audio_bus_capi.h b/include/capi/cef_audio_bus_capi.h
new file mode 100644
index 0000000..c4591a7
--- /dev/null
+++ b/include/capi/cef_audio_bus_capi.h
@@ -0,0 +1,94 @@
+// Copyright (c) 2018 Marshall A. Greenblatt. All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are
+// met:
+//
+//    * Redistributions of source code must retain the above copyright
+// notice, this list of conditions and the following disclaimer.
+//    * Redistributions in binary form must reproduce the above
+// copyright notice, this list of conditions and the following disclaimer
+// in the documentation and/or other materials provided with the
+// distribution.
+//    * Neither the name of Google Inc. nor the name Chromium Embedded
+// Framework nor the names of its contributors may be used to endorse
+// or promote products derived from this software without specific prior
+// written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool and should not edited
+// by hand. See the translator.README.txt file in the tools directory for
+// more information.
+//
+// $hash=7ab3d666d5994ad83a87f5f2c898f4ed12ac2fe7$
+//
+
+#ifndef CEF_INCLUDE_CAPI_CEF_AUDIO_BUS_CAPI_H_
+#define CEF_INCLUDE_CAPI_CEF_AUDIO_BUS_CAPI_H_
+#pragma once
+
+#include "include/capi/cef_base_capi.h"
+#include "include/capi/cef_drag_data_capi.h"
+#include "include/capi/cef_frame_capi.h"
+#include "include/capi/cef_image_capi.h"
+#include "include/capi/cef_navigation_entry_capi.h"
+#include "include/capi/cef_process_message_capi.h"
+#include "include/capi/cef_request_context_capi.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+struct _cef_browser_host_t;
+struct _cef_client_t;
+
+///
+// Structure used to represent a browser window. When used in the browser
+// process the functions of this structure may be called on any thread unless
+// otherwise indicated in the comments. When used in the render process the
+// functions of this structure may only be called on the main thread.
+///
+typedef struct _cef_audio_bus_t {
+  ///
+  // Base structure.
+  ///
+  cef_base_ref_counted_t base;
+
+  ///
+  // Returns number of frames
+  ///
+  int(CEF_CALLBACK* num__frames)(struct _cef_audio_bus_t* self);
+
+  ///
+  // Gets interleaved float buffer
+  ///
+  void(CEF_CALLBACK* to_interleaved_float_buffer)(struct _cef_audio_bus_t* self,
+                                                  int num_frames_to_read,
+                                                  float* dest_buffer);
+
+  ///
+  // Gets interleaved unsigned int8 buffer
+  ///
+  void(CEF_CALLBACK* to_interleaved_uint8buffer)(struct _cef_audio_bus_t* self,
+                                                 int num_frames_to_read,
+                                                 char* dest_buffer);
+} cef_audio_bus_t;
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  // CEF_INCLUDE_CAPI_CEF_AUDIO_BUS_CAPI_H_
diff --git a/include/capi/cef_audio_handler_capi.h b/include/capi/cef_audio_handler_capi.h
new file mode 100644
index 0000000..351ff20
--- /dev/null
+++ b/include/capi/cef_audio_handler_capi.h
@@ -0,0 +1,132 @@
+// Copyright (c) 2018 Marshall A. Greenblatt. All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are
+// met:
+//
+//    * Redistributions of source code must retain the above copyright
+// notice, this list of conditions and the following disclaimer.
+//    * Redistributions in binary form must reproduce the above
+// copyright notice, this list of conditions and the following disclaimer
+// in the documentation and/or other materials provided with the
+// distribution.
+//    * Neither the name of Google Inc. nor the name Chromium Embedded
+// Framework nor the names of its contributors may be used to endorse
+// or promote products derived from this software without specific prior
+// written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool and should not edited
+// by hand. See the translator.README.txt file in the tools directory for
+// more information.
+//
+// $hash=3a79551f76f89f68ba3071bc0bc94c80eb481ff5$
+//
+
+#ifndef CEF_INCLUDE_CAPI_CEF_AUDIO_HANDLER_CAPI_H_
+#define CEF_INCLUDE_CAPI_CEF_AUDIO_HANDLER_CAPI_H_
+#pragma once
+
+#include "include/capi/cef_audio_bus_capi.h"
+#include "include/capi/cef_base_capi.h"
+#include "include/capi/cef_browser_capi.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+///
+// Implement this structure to handle audio events
+///
+typedef struct _cef_audio_handler_t {
+  ///
+  // Base structure.
+  ///
+  cef_base_ref_counted_t base;
+
+  ///
+  // Event handler for every new audio stream, |audio_stream_id| will identify
+  // this stream in future events, and is unique across all other audio stream.
+  // OnAudioStreamStarted can be called also after OnAudioSteamStopped was
+  // called.
+  //
+  // Will be called on the UI thread
+  ///
+  void(CEF_CALLBACK* on_audio_stream_started)(struct _cef_audio_handler_t* self,
+                                              struct _cef_browser_t* browser,
+                                              int audio_stream_id,
+                                              int sample_rate,
+                                              int channels,
+                                              int bits_per_sample,
+                                              int64 buffer_duration);
+
+  ///
+  // Event handler for new audio packet from |audio_stream_id|, |data| is a
+  // uint8 array representing a raw PCM packet |data_length| is the size of the
+  // array.
+  //
+  // Will be called on the UI thread
+  ///
+  void(CEF_CALLBACK* on_audio_stream_packet)(struct _cef_audio_handler_t* self,
+                                             struct _cef_browser_t* browser,
+                                             int audio_stream_id,
+                                             const void* data,
+                                             int data_length);
+
+  ///
+  // Event handler for stream |audio_stream_id| has been stopped, for every
+  // OnAudioStreamStarted, OnAudioSteamStopped will be called.
+  //
+  // Will be called on the UI thread
+  ///
+  void(CEF_CALLBACK* on_audio_steam_stopped)(struct _cef_audio_handler_t* self,
+                                             struct _cef_browser_t* browser,
+                                             int audio_stream_id);
+
+  ///
+  // Event handler for stream mirroring
+  //
+  // Will be called on the UI thread
+  ///
+  void(CEF_CALLBACK* on_audio_data)(struct _cef_audio_handler_t* self,
+                                    struct _cef_browser_t* browser,
+                                    int frames,
+                                    int channels,
+                                    int bits_per_sample,
+                                    const void* data_buffer);
+
+  ///
+  // Will be called before every OnAudioStreamPacket call, this getter should
+  // return the amount of time in milliseconds the audio should be delayed.
+  //
+  // Returning any number greater then 0 will also delay any video attached to
+  // the stream identified by |audio_stream_id|.
+  //
+  // The return value should be a non negative number.
+  //
+  // Will be called on the UI thread
+  ///
+  int(CEF_CALLBACK* get_latency_in_milliseconds)(
+      struct _cef_audio_handler_t* self,
+      struct _cef_browser_t* browser,
+      int audio_stream_id);
+} cef_audio_handler_t;
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  // CEF_INCLUDE_CAPI_CEF_AUDIO_HANDLER_CAPI_H_
diff --git a/include/capi/cef_browser_capi.h b/include/capi/cef_browser_capi.h
index e8a8d8d..6a2aea9 100644
--- a/include/capi/cef_browser_capi.h
+++ b/include/capi/cef_browser_capi.h
@@ -1,872 +1,875 @@
-// Copyright (c) 2018 Marshall A. Greenblatt. All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are
-// met:
-//
-//    * Redistributions of source code must retain the above copyright
-// notice, this list of conditions and the following disclaimer.
-//    * Redistributions in binary form must reproduce the above
-// copyright notice, this list of conditions and the following disclaimer
-// in the documentation and/or other materials provided with the
-// distribution.
-//    * Neither the name of Google Inc. nor the name Chromium Embedded
-// Framework nor the names of its contributors may be used to endorse
-// or promote products derived from this software without specific prior
-// written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-//
-// ---------------------------------------------------------------------------
-//
-// This file was generated by the CEF translator tool and should not edited
-// by hand. See the translator.README.txt file in the tools directory for
-// more information.
-//
-// $hash=ff3ebc51ed5743aabac0be94caf2edeedbd413b7$
-//
-
-#ifndef CEF_INCLUDE_CAPI_CEF_BROWSER_CAPI_H_
-#define CEF_INCLUDE_CAPI_CEF_BROWSER_CAPI_H_
-#pragma once
-
-#include "include/capi/cef_base_capi.h"
-#include "include/capi/cef_drag_data_capi.h"
-#include "include/capi/cef_frame_capi.h"
-#include "include/capi/cef_image_capi.h"
-#include "include/capi/cef_navigation_entry_capi.h"
-#include "include/capi/cef_process_message_capi.h"
-#include "include/capi/cef_request_context_capi.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-struct _cef_browser_host_t;
-struct _cef_client_t;
-
-///
-// Structure used to represent a browser window. When used in the browser
-// process the functions of this structure may be called on any thread unless
-// otherwise indicated in the comments. When used in the render process the
-// functions of this structure may only be called on the main thread.
-///
-typedef struct _cef_browser_t {
-  ///
-  // Base structure.
-  ///
-  cef_base_ref_counted_t base;
-
-  ///
-  // Returns the browser host object. This function can only be called in the
-  // browser process.
-  ///
-  struct _cef_browser_host_t*(CEF_CALLBACK* get_host)(
-      struct _cef_browser_t* self);
-
-  ///
-  // Returns true (1) if the browser can navigate backwards.
-  ///
-  int(CEF_CALLBACK* can_go_back)(struct _cef_browser_t* self);
-
-  ///
-  // Navigate backwards.
-  ///
-  void(CEF_CALLBACK* go_back)(struct _cef_browser_t* self);
-
-  ///
-  // Returns true (1) if the browser can navigate forwards.
-  ///
-  int(CEF_CALLBACK* can_go_forward)(struct _cef_browser_t* self);
-
-  ///
-  // Navigate forwards.
-  ///
-  void(CEF_CALLBACK* go_forward)(struct _cef_browser_t* self);
-
-  ///
-  // Returns true (1) if the browser is currently loading.
-  ///
-  int(CEF_CALLBACK* is_loading)(struct _cef_browser_t* self);
-
-  ///
-  // Reload the current page.
-  ///
-  void(CEF_CALLBACK* reload)(struct _cef_browser_t* self);
-
-  ///
-  // Reload the current page ignoring any cached data.
-  ///
-  void(CEF_CALLBACK* reload_ignore_cache)(struct _cef_browser_t* self);
-
-  ///
-  // Stop loading the page.
-  ///
-  void(CEF_CALLBACK* stop_load)(struct _cef_browser_t* self);
-
-  ///
-  // Returns the globally unique identifier for this browser. This value is also
-  // used as the tabId for extension APIs.
-  ///
-  int(CEF_CALLBACK* get_identifier)(struct _cef_browser_t* self);
-
-  ///
-  // Returns true (1) if this object is pointing to the same handle as |that|
-  // object.
-  ///
-  int(CEF_CALLBACK* is_same)(struct _cef_browser_t* self,
-                             struct _cef_browser_t* that);
-
-  ///
-  // Returns true (1) if the window is a popup window.
-  ///
-  int(CEF_CALLBACK* is_popup)(struct _cef_browser_t* self);
-
-  ///
-  // Returns true (1) if a document has been loaded in the browser.
-  ///
-  int(CEF_CALLBACK* has_document)(struct _cef_browser_t* self);
-
-  ///
-  // Returns the main (top-level) frame for the browser window.
-  ///
-  struct _cef_frame_t*(CEF_CALLBACK* get_main_frame)(
-      struct _cef_browser_t* self);
-
-  ///
-  // Returns the focused frame for the browser window.
-  ///
-  struct _cef_frame_t*(CEF_CALLBACK* get_focused_frame)(
-      struct _cef_browser_t* self);
-
-  ///
-  // Returns the frame with the specified identifier, or NULL if not found.
-  ///
-  struct _cef_frame_t*(CEF_CALLBACK* get_frame_byident)(
-      struct _cef_browser_t* self,
-      int64 identifier);
-
-  ///
-  // Returns the frame with the specified name, or NULL if not found.
-  ///
-  struct _cef_frame_t*(CEF_CALLBACK* get_frame)(struct _cef_browser_t* self,
-                                                const cef_string_t* name);
-
-  ///
-  // Returns the number of frames that currently exist.
-  ///
-  size_t(CEF_CALLBACK* get_frame_count)(struct _cef_browser_t* self);
-
-  ///
-  // Returns the identifiers of all existing frames.
-  ///
-  void(CEF_CALLBACK* get_frame_identifiers)(struct _cef_browser_t* self,
-                                            size_t* identifiersCount,
-                                            int64* identifiers);
-
-  ///
-  // Returns the names of all existing frames.
-  ///
-  void(CEF_CALLBACK* get_frame_names)(struct _cef_browser_t* self,
-                                      cef_string_list_t names);
-
-  ///
-  // Send a message to the specified |target_process|. Returns true (1) if the
-  // message was sent successfully.
-  ///
-  int(CEF_CALLBACK* send_process_message)(
-      struct _cef_browser_t* self,
-      cef_process_id_t target_process,
-      struct _cef_process_message_t* message);
-} cef_browser_t;
-
-///
-// Callback structure for cef_browser_host_t::RunFileDialog. The functions of
-// this structure will be called on the browser process UI thread.
-///
-typedef struct _cef_run_file_dialog_callback_t {
-  ///
-  // Base structure.
-  ///
-  cef_base_ref_counted_t base;
-
-  ///
-  // Called asynchronously after the file dialog is dismissed.
-  // |selected_accept_filter| is the 0-based index of the value selected from
-  // the accept filters array passed to cef_browser_host_t::RunFileDialog.
-  // |file_paths| will be a single value or a list of values depending on the
-  // dialog mode. If the selection was cancelled |file_paths| will be NULL.
-  ///
-  void(CEF_CALLBACK* on_file_dialog_dismissed)(
-      struct _cef_run_file_dialog_callback_t* self,
-      int selected_accept_filter,
-      cef_string_list_t file_paths);
-} cef_run_file_dialog_callback_t;
-
-///
-// Callback structure for cef_browser_host_t::GetNavigationEntries. The
-// functions of this structure will be called on the browser process UI thread.
-///
-typedef struct _cef_navigation_entry_visitor_t {
-  ///
-  // Base structure.
-  ///
-  cef_base_ref_counted_t base;
-
-  ///
-  // Method that will be executed. Do not keep a reference to |entry| outside of
-  // this callback. Return true (1) to continue visiting entries or false (0) to
-  // stop. |current| is true (1) if this entry is the currently loaded
-  // navigation entry. |index| is the 0-based index of this entry and |total| is
-  // the total number of entries.
-  ///
-  int(CEF_CALLBACK* visit)(struct _cef_navigation_entry_visitor_t* self,
-                           struct _cef_navigation_entry_t* entry,
-                           int current,
-                           int index,
-                           int total);
-} cef_navigation_entry_visitor_t;
-
-///
-// Callback structure for cef_browser_host_t::PrintToPDF. The functions of this
-// structure will be called on the browser process UI thread.
-///
-typedef struct _cef_pdf_print_callback_t {
-  ///
-  // Base structure.
-  ///
-  cef_base_ref_counted_t base;
-
-  ///
-  // Method that will be executed when the PDF printing has completed. |path| is
-  // the output path. |ok| will be true (1) if the printing completed
-  // successfully or false (0) otherwise.
-  ///
-  void(CEF_CALLBACK* on_pdf_print_finished)(
-      struct _cef_pdf_print_callback_t* self,
-      const cef_string_t* path,
-      int ok);
-} cef_pdf_print_callback_t;
-
-///
-// Callback structure for cef_browser_host_t::DownloadImage. The functions of
-// this structure will be called on the browser process UI thread.
-///
-typedef struct _cef_download_image_callback_t {
-  ///
-  // Base structure.
-  ///
-  cef_base_ref_counted_t base;
-
-  ///
-  // Method that will be executed when the image download has completed.
-  // |image_url| is the URL that was downloaded and |http_status_code| is the
-  // resulting HTTP status code. |image| is the resulting image, possibly at
-  // multiple scale factors, or NULL if the download failed.
-  ///
-  void(CEF_CALLBACK* on_download_image_finished)(
-      struct _cef_download_image_callback_t* self,
-      const cef_string_t* image_url,
-      int http_status_code,
-      struct _cef_image_t* image);
-} cef_download_image_callback_t;
-
-///
-// Structure used to represent the browser process aspects of a browser window.
-// The functions of this structure can only be called in the browser process.
-// They may be called on any thread in that process unless otherwise indicated
-// in the comments.
-///
-typedef struct _cef_browser_host_t {
-  ///
-  // Base structure.
-  ///
-  cef_base_ref_counted_t base;
-
-  ///
-  // Returns the hosted browser object.
-  ///
-  struct _cef_browser_t*(CEF_CALLBACK* get_browser)(
-      struct _cef_browser_host_t* self);
-
-  ///
-  // Request that the browser close. The JavaScript 'onbeforeunload' event will
-  // be fired. If |force_close| is false (0) the event handler, if any, will be
-  // allowed to prompt the user and the user can optionally cancel the close. If
-  // |force_close| is true (1) the prompt will not be displayed and the close
-  // will proceed. Results in a call to cef_life_span_handler_t::do_close() if
-  // the event handler allows the close or if |force_close| is true (1). See
-  // cef_life_span_handler_t::do_close() documentation for additional usage
-  // information.
-  ///
-  void(CEF_CALLBACK* close_browser)(struct _cef_browser_host_t* self,
-                                    int force_close);
-
-  ///
-  // Helper for closing a browser. Call this function from the top-level window
-  // close handler. Internally this calls CloseBrowser(false (0)) if the close
-  // has not yet been initiated. This function returns false (0) while the close
-  // is pending and true (1) after the close has completed. See close_browser()
-  // and cef_life_span_handler_t::do_close() documentation for additional usage
-  // information. This function must be called on the browser process UI thread.
-  ///
-  int(CEF_CALLBACK* try_close_browser)(struct _cef_browser_host_t* self);
-
-  ///
-  // Set whether the browser is focused.
-  ///
-  void(CEF_CALLBACK* set_focus)(struct _cef_browser_host_t* self, int focus);
-
-  ///
-  // Retrieve the window handle for this browser. If this browser is wrapped in
-  // a cef_browser_view_t this function should be called on the browser process
-  // UI thread and it will return the handle for the top-level native window.
-  ///
-  cef_window_handle_t(CEF_CALLBACK* get_window_handle)(
-      struct _cef_browser_host_t* self);
-
-  ///
-  // Retrieve the window handle of the browser that opened this browser. Will
-  // return NULL for non-popup windows or if this browser is wrapped in a
-  // cef_browser_view_t. This function can be used in combination with custom
-  // handling of modal windows.
-  ///
-  cef_window_handle_t(CEF_CALLBACK* get_opener_window_handle)(
-      struct _cef_browser_host_t* self);
-
-  ///
-  // Returns true (1) if this browser is wrapped in a cef_browser_view_t.
-  ///
-  int(CEF_CALLBACK* has_view)(struct _cef_browser_host_t* self);
-
-  ///
-  // Returns the client for this browser.
-  ///
-  struct _cef_client_t*(CEF_CALLBACK* get_client)(
-      struct _cef_browser_host_t* self);
-
-  ///
-  // Returns the request context for this browser.
-  ///
-  struct _cef_request_context_t*(CEF_CALLBACK* get_request_context)(
-      struct _cef_browser_host_t* self);
-
-  ///
-  // Get the current zoom level. The default zoom level is 0.0. This function
-  // can only be called on the UI thread.
-  ///
-  double(CEF_CALLBACK* get_zoom_level)(struct _cef_browser_host_t* self);
-
-  ///
-  // Change the zoom level to the specified value. Specify 0.0 to reset the zoom
-  // level. If called on the UI thread the change will be applied immediately.
-  // Otherwise, the change will be applied asynchronously on the UI thread.
-  ///
-  void(CEF_CALLBACK* set_zoom_level)(struct _cef_browser_host_t* self,
-                                     double zoomLevel);
-
-  ///
-  // Call to run a file chooser dialog. Only a single file chooser dialog may be
-  // pending at any given time. |mode| represents the type of dialog to display.
-  // |title| to the title to be used for the dialog and may be NULL to show the
-  // default title ("Open" or "Save" depending on the mode). |default_file_path|
-  // is the path with optional directory and/or file name component that will be
-  // initially selected in the dialog. |accept_filters| are used to restrict the
-  // selectable file types and may any combination of (a) valid lower-cased MIME
-  // types (e.g. "text/*" or "image/*"), (b) individual file extensions (e.g.
-  // ".txt" or ".png"), or (c) combined description and file extension delimited
-  // using "|" and ";" (e.g. "Image Types|.png;.gif;.jpg").
-  // |selected_accept_filter| is the 0-based index of the filter that will be
-  // selected by default. |callback| will be executed after the dialog is
-  // dismissed or immediately if another dialog is already pending. The dialog
-  // will be initiated asynchronously on the UI thread.
-  ///
-  void(CEF_CALLBACK* run_file_dialog)(
-      struct _cef_browser_host_t* self,
-      cef_file_dialog_mode_t mode,
-      const cef_string_t* title,
-      const cef_string_t* default_file_path,
-      cef_string_list_t accept_filters,
-      int selected_accept_filter,
-      struct _cef_run_file_dialog_callback_t* callback);
-
-  ///
-  // Download the file at |url| using cef_download_handler_t.
-  ///
-  void(CEF_CALLBACK* start_download)(struct _cef_browser_host_t* self,
-                                     const cef_string_t* url);
-
-  ///
-  // Download |image_url| and execute |callback| on completion with the images
-  // received from the renderer. If |is_favicon| is true (1) then cookies are
-  // not sent and not accepted during download. Images with density independent
-  // pixel (DIP) sizes larger than |max_image_size| are filtered out from the
-  // image results. Versions of the image at different scale factors may be
-  // downloaded up to the maximum scale factor supported by the system. If there
-  // are no image results <= |max_image_size| then the smallest image is resized
-  // to |max_image_size| and is the only result. A |max_image_size| of 0 means
-  // unlimited. If |bypass_cache| is true (1) then |image_url| is requested from
-  // the server even if it is present in the browser cache.
-  ///
-  void(CEF_CALLBACK* download_image)(
-      struct _cef_browser_host_t* self,
-      const cef_string_t* image_url,
-      int is_favicon,
-      uint32 max_image_size,
-      int bypass_cache,
-      struct _cef_download_image_callback_t* callback);
-
-  ///
-  // Print the current browser contents.
-  ///
-  void(CEF_CALLBACK* print)(struct _cef_browser_host_t* self);
-
-  ///
-  // Print the current browser contents to the PDF file specified by |path| and
-  // execute |callback| on completion. The caller is responsible for deleting
-  // |path| when done. For PDF printing to work on Linux you must implement the
-  // cef_print_handler_t::GetPdfPaperSize function.
-  ///
-  void(CEF_CALLBACK* print_to_pdf)(
-      struct _cef_browser_host_t* self,
-      const cef_string_t* path,
-      const struct _cef_pdf_print_settings_t* settings,
-      struct _cef_pdf_print_callback_t* callback);
-
-  ///
-  // Search for |searchText|. |identifier| must be a unique ID and these IDs
-  // must strictly increase so that newer requests always have greater IDs than
-  // older requests. If |identifier| is zero or less than the previous ID value
-  // then it will be automatically assigned a new valid ID. |forward| indicates
-  // whether to search forward or backward within the page. |matchCase|
-  // indicates whether the search should be case-sensitive. |findNext| indicates
-  // whether this is the first request or a follow-up. The cef_find_handler_t
-  // instance, if any, returned via cef_client_t::GetFindHandler will be called
-  // to report find results.
-  ///
-  void(CEF_CALLBACK* find)(struct _cef_browser_host_t* self,
-                           int identifier,
-                           const cef_string_t* searchText,
-                           int forward,
-                           int matchCase,
-                           int findNext);
-
-  ///
-  // Cancel all searches that are currently going on.
-  ///
-  void(CEF_CALLBACK* stop_finding)(struct _cef_browser_host_t* self,
-                                   int clearSelection);
-
-  ///
-  // Open developer tools (DevTools) in its own browser. The DevTools browser
-  // will remain associated with this browser. If the DevTools browser is
-  // already open then it will be focused, in which case the |windowInfo|,
-  // |client| and |settings| parameters will be ignored. If |inspect_element_at|
-  // is non-NULL then the element at the specified (x,y) location will be
-  // inspected. The |windowInfo| parameter will be ignored if this browser is
-  // wrapped in a cef_browser_view_t.
-  ///
-  void(CEF_CALLBACK* show_dev_tools)(
-      struct _cef_browser_host_t* self,
-      const struct _cef_window_info_t* windowInfo,
-      struct _cef_client_t* client,
-      const struct _cef_browser_settings_t* settings,
-      const cef_point_t* inspect_element_at);
-
-  ///
-  // Explicitly close the associated DevTools browser, if any.
-  ///
-  void(CEF_CALLBACK* close_dev_tools)(struct _cef_browser_host_t* self);
-
-  ///
-  // Returns true (1) if this browser currently has an associated DevTools
-  // browser. Must be called on the browser process UI thread.
-  ///
-  int(CEF_CALLBACK* has_dev_tools)(struct _cef_browser_host_t* self);
-
-  ///
-  // Retrieve a snapshot of current navigation entries as values sent to the
-  // specified visitor. If |current_only| is true (1) only the current
-  // navigation entry will be sent, otherwise all navigation entries will be
-  // sent.
-  ///
-  void(CEF_CALLBACK* get_navigation_entries)(
-      struct _cef_browser_host_t* self,
-      struct _cef_navigation_entry_visitor_t* visitor,
-      int current_only);
-
-  ///
-  // Set whether mouse cursor change is disabled.
-  ///
-  void(CEF_CALLBACK* set_mouse_cursor_change_disabled)(
-      struct _cef_browser_host_t* self,
-      int disabled);
-
-  ///
-  // Returns true (1) if mouse cursor change is disabled.
-  ///
-  int(CEF_CALLBACK* is_mouse_cursor_change_disabled)(
-      struct _cef_browser_host_t* self);
-
-  ///
-  // If a misspelled word is currently selected in an editable node calling this
-  // function will replace it with the specified |word|.
-  ///
-  void(CEF_CALLBACK* replace_misspelling)(struct _cef_browser_host_t* self,
-                                          const cef_string_t* word);
-
-  ///
-  // Add the specified |word| to the spelling dictionary.
-  ///
-  void(CEF_CALLBACK* add_word_to_dictionary)(struct _cef_browser_host_t* self,
-                                             const cef_string_t* word);
-
-  ///
-  // Returns true (1) if window rendering is disabled.
-  ///
-  int(CEF_CALLBACK* is_window_rendering_disabled)(
-      struct _cef_browser_host_t* self);
-
-  ///
-  // Notify the browser that the widget has been resized. The browser will first
-  // call cef_render_handler_t::GetViewRect to get the new size and then call
-  // cef_render_handler_t::OnPaint asynchronously with the updated regions. This
-  // function is only used when window rendering is disabled.
-  ///
-  void(CEF_CALLBACK* was_resized)(struct _cef_browser_host_t* self);
-
-  ///
-  // Notify the browser that it has been hidden or shown. Layouting and
-  // cef_render_handler_t::OnPaint notification will stop when the browser is
-  // hidden. This function is only used when window rendering is disabled.
-  ///
-  void(CEF_CALLBACK* was_hidden)(struct _cef_browser_host_t* self, int hidden);
-
-  ///
-  // Send a notification to the browser that the screen info has changed. The
-  // browser will then call cef_render_handler_t::GetScreenInfo to update the
-  // screen information with the new values. This simulates moving the webview
-  // window from one display to another, or changing the properties of the
-  // current display. This function is only used when window rendering is
-  // disabled.
-  ///
-  void(CEF_CALLBACK* notify_screen_info_changed)(
-      struct _cef_browser_host_t* self);
-
-  ///
-  // Invalidate the view. The browser will call cef_render_handler_t::OnPaint
-  // asynchronously. This function is only used when window rendering is
-  // disabled.
-  ///
-  void(CEF_CALLBACK* invalidate)(struct _cef_browser_host_t* self,
-                                 cef_paint_element_type_t type);
-
-  ///
-  // Send a key event to the browser.
-  ///
-  void(CEF_CALLBACK* send_key_event)(struct _cef_browser_host_t* self,
-                                     const struct _cef_key_event_t* event);
-
-  ///
-  // Send a mouse click event to the browser. The |x| and |y| coordinates are
-  // relative to the upper-left corner of the view.
-  ///
-  void(CEF_CALLBACK* send_mouse_click_event)(
-      struct _cef_browser_host_t* self,
-      const struct _cef_mouse_event_t* event,
-      cef_mouse_button_type_t type,
-      int mouseUp,
-      int clickCount);
-
-  ///
-  // Send a mouse move event to the browser. The |x| and |y| coordinates are
-  // relative to the upper-left corner of the view.
-  ///
-  void(CEF_CALLBACK* send_mouse_move_event)(
-      struct _cef_browser_host_t* self,
-      const struct _cef_mouse_event_t* event,
-      int mouseLeave);
-
-  ///
-  // Send a mouse wheel event to the browser. The |x| and |y| coordinates are
-  // relative to the upper-left corner of the view. The |deltaX| and |deltaY|
-  // values represent the movement delta in the X and Y directions respectively.
-  // In order to scroll inside select popups with window rendering disabled
-  // cef_render_handler_t::GetScreenPoint should be implemented properly.
-  ///
-  void(CEF_CALLBACK* send_mouse_wheel_event)(
-      struct _cef_browser_host_t* self,
-      const struct _cef_mouse_event_t* event,
-      int deltaX,
-      int deltaY);
-
-  ///
-  // Send a focus event to the browser.
-  ///
-  void(CEF_CALLBACK* send_focus_event)(struct _cef_browser_host_t* self,
-                                       int setFocus);
-
-  ///
-  // Send a capture lost event to the browser.
-  ///
-  void(CEF_CALLBACK* send_capture_lost_event)(struct _cef_browser_host_t* self);
-
-  ///
-  // Notify the browser that the window hosting it is about to be moved or
-  // resized. This function is only used on Windows and Linux.
-  ///
-  void(CEF_CALLBACK* notify_move_or_resize_started)(
-      struct _cef_browser_host_t* self);
-
-  ///
-  // Returns the maximum rate in frames per second (fps) that
-  // cef_render_handler_t:: OnPaint will be called for a windowless browser. The
-  // actual fps may be lower if the browser cannot generate frames at the
-  // requested rate. The minimum value is 1 and the maximum value is 60 (default
-  // 30). This function can only be called on the UI thread.
-  ///
-  int(CEF_CALLBACK* get_windowless_frame_rate)(
-      struct _cef_browser_host_t* self);
-
-  ///
-  // Set the maximum rate in frames per second (fps) that cef_render_handler_t::
-  // OnPaint will be called for a windowless browser. The actual fps may be
-  // lower if the browser cannot generate frames at the requested rate. The
-  // minimum value is 1 and the maximum value is 60 (default 30). Can also be
-  // set at browser creation via cef_browser_tSettings.windowless_frame_rate.
-  ///
-  void(CEF_CALLBACK* set_windowless_frame_rate)(
-      struct _cef_browser_host_t* self,
-      int frame_rate);
-
-  ///
-  // Begins a new composition or updates the existing composition. Blink has a
-  // special node (a composition node) that allows the input function to change
-  // text without affecting other DOM nodes. |text| is the optional text that
-  // will be inserted into the composition node. |underlines| is an optional set
-  // of ranges that will be underlined in the resulting text.
-  // |replacement_range| is an optional range of the existing text that will be
-  // replaced. |selection_range| is an optional range of the resulting text that
-  // will be selected after insertion or replacement. The |replacement_range|
-  // value is only used on OS X.
-  //
-  // This function may be called multiple times as the composition changes. When
-  // the client is done making changes the composition should either be canceled
-  // or completed. To cancel the composition call ImeCancelComposition. To
-  // complete the composition call either ImeCommitText or
-  // ImeFinishComposingText. Completion is usually signaled when:
-  //   A. The client receives a WM_IME_COMPOSITION message with a GCS_RESULTSTR
-  //      flag (on Windows), or;
-  //   B. The client receives a "commit" signal of GtkIMContext (on Linux), or;
-  //   C. insertText of NSTextInput is called (on Mac).
-  //
-  // This function is only used when window rendering is disabled.
-  ///
-  void(CEF_CALLBACK* ime_set_composition)(
-      struct _cef_browser_host_t* self,
-      const cef_string_t* text,
-      size_t underlinesCount,
-      cef_composition_underline_t const* underlines,
-      const cef_range_t* replacement_range,
-      const cef_range_t* selection_range);
-
-  ///
-  // Completes the existing composition by optionally inserting the specified
-  // |text| into the composition node. |replacement_range| is an optional range
-  // of the existing text that will be replaced. |relative_cursor_pos| is where
-  // the cursor will be positioned relative to the current cursor position. See
-  // comments on ImeSetComposition for usage. The |replacement_range| and
-  // |relative_cursor_pos| values are only used on OS X. This function is only
-  // used when window rendering is disabled.
-  ///
-  void(CEF_CALLBACK* ime_commit_text)(struct _cef_browser_host_t* self,
-                                      const cef_string_t* text,
-                                      const cef_range_t* replacement_range,
-                                      int relative_cursor_pos);
-
-  ///
-  // Completes the existing composition by applying the current composition node
-  // contents. If |keep_selection| is false (0) the current selection, if any,
-  // will be discarded. See comments on ImeSetComposition for usage. This
-  // function is only used when window rendering is disabled.
-  ///
-  void(CEF_CALLBACK* ime_finish_composing_text)(
-      struct _cef_browser_host_t* self,
-      int keep_selection);
-
-  ///
-  // Cancels the existing composition and discards the composition node contents
-  // without applying them. See comments on ImeSetComposition for usage. This
-  // function is only used when window rendering is disabled.
-  ///
-  void(CEF_CALLBACK* ime_cancel_composition)(struct _cef_browser_host_t* self);
-
-  ///
-  // Call this function when the user drags the mouse into the web view (before
-  // calling DragTargetDragOver/DragTargetLeave/DragTargetDrop). |drag_data|
-  // should not contain file contents as this type of data is not allowed to be
-  // dragged into the web view. File contents can be removed using
-  // cef_drag_data_t::ResetFileContents (for example, if |drag_data| comes from
-  // cef_render_handler_t::StartDragging). This function is only used when
-  // window rendering is disabled.
-  ///
-  void(CEF_CALLBACK* drag_target_drag_enter)(
-      struct _cef_browser_host_t* self,
-      struct _cef_drag_data_t* drag_data,
-      const struct _cef_mouse_event_t* event,
-      cef_drag_operations_mask_t allowed_ops);
-
-  ///
-  // Call this function each time the mouse is moved across the web view during
-  // a drag operation (after calling DragTargetDragEnter and before calling
-  // DragTargetDragLeave/DragTargetDrop). This function is only used when window
-  // rendering is disabled.
-  ///
-  void(CEF_CALLBACK* drag_target_drag_over)(
-      struct _cef_browser_host_t* self,
-      const struct _cef_mouse_event_t* event,
-      cef_drag_operations_mask_t allowed_ops);
-
-  ///
-  // Call this function when the user drags the mouse out of the web view (after
-  // calling DragTargetDragEnter). This function is only used when window
-  // rendering is disabled.
-  ///
-  void(CEF_CALLBACK* drag_target_drag_leave)(struct _cef_browser_host_t* self);
-
-  ///
-  // Call this function when the user completes the drag operation by dropping
-  // the object onto the web view (after calling DragTargetDragEnter). The
-  // object being dropped is |drag_data|, given as an argument to the previous
-  // DragTargetDragEnter call. This function is only used when window rendering
-  // is disabled.
-  ///
-  void(CEF_CALLBACK* drag_target_drop)(struct _cef_browser_host_t* self,
-                                       const struct _cef_mouse_event_t* event);
-
-  ///
-  // Call this function when the drag operation started by a
-  // cef_render_handler_t::StartDragging call has ended either in a drop or by
-  // being cancelled. |x| and |y| are mouse coordinates relative to the upper-
-  // left corner of the view. If the web view is both the drag source and the
-  // drag target then all DragTarget* functions should be called before
-  // DragSource* mthods. This function is only used when window rendering is
-  // disabled.
-  ///
-  void(CEF_CALLBACK* drag_source_ended_at)(struct _cef_browser_host_t* self,
-                                           int x,
-                                           int y,
-                                           cef_drag_operations_mask_t op);
-
-  ///
-  // Call this function when the drag operation started by a
-  // cef_render_handler_t::StartDragging call has completed. This function may
-  // be called immediately without first calling DragSourceEndedAt to cancel a
-  // drag operation. If the web view is both the drag source and the drag target
-  // then all DragTarget* functions should be called before DragSource* mthods.
-  // This function is only used when window rendering is disabled.
-  ///
-  void(CEF_CALLBACK* drag_source_system_drag_ended)(
-      struct _cef_browser_host_t* self);
-
-  ///
-  // Returns the current visible navigation entry for this browser. This
-  // function can only be called on the UI thread.
-  ///
-  struct _cef_navigation_entry_t*(CEF_CALLBACK* get_visible_navigation_entry)(
-      struct _cef_browser_host_t* self);
-
-  ///
-  // Set accessibility state for all frames. |accessibility_state| may be
-  // default, enabled or disabled. If |accessibility_state| is STATE_DEFAULT
-  // then accessibility will be disabled by default and the state may be further
-  // controlled with the "force-renderer-accessibility" and "disable-renderer-
-  // accessibility" command-line switches. If |accessibility_state| is
-  // STATE_ENABLED then accessibility will be enabled. If |accessibility_state|
-  // is STATE_DISABLED then accessibility will be completely disabled.
-  //
-  // For windowed browsers accessibility will be enabled in Complete mode (which
-  // corresponds to kAccessibilityModeComplete in Chromium). In this mode all
-  // platform accessibility objects will be created and managed by Chromium's
-  // internal implementation. The client needs only to detect the screen reader
-  // and call this function appropriately. For example, on macOS the client can
-  // handle the @"AXEnhancedUserStructure" accessibility attribute to detect
-  // VoiceOver state changes and on Windows the client can handle WM_GETOBJECT
-  // with OBJID_CLIENT to detect accessibility readers.
-  //
-  // For windowless browsers accessibility will be enabled in TreeOnly mode
-  // (which corresponds to kAccessibilityModeWebContentsOnly in Chromium). In
-  // this mode renderer accessibility is enabled, the full tree is computed, and
-  // events are passed to CefAccessibiltyHandler, but platform accessibility
-  // objects are not created. The client may implement platform accessibility
-  // objects using CefAccessibiltyHandler callbacks if desired.
-  ///
-  void(CEF_CALLBACK* set_accessibility_state)(struct _cef_browser_host_t* self,
-                                              cef_state_t accessibility_state);
-
-  ///
-  // Enable notifications of auto resize via
-  // cef_display_handler_t::OnAutoResize. Notifications are disabled by default.
-  // |min_size| and |max_size| define the range of allowed sizes.
-  ///
-  void(CEF_CALLBACK* set_auto_resize_enabled)(struct _cef_browser_host_t* self,
-                                              int enabled,
-                                              const cef_size_t* min_size,
-                                              const cef_size_t* max_size);
-
-  ///
-  // Returns the extension hosted in this browser or NULL if no extension is
-  // hosted. See cef_request_tContext::LoadExtension for details.
-  ///
-  struct _cef_extension_t*(CEF_CALLBACK* get_extension)(
-      struct _cef_browser_host_t* self);
-
-  ///
-  // Returns true (1) if this browser is hosting an extension background script.
-  // Background hosts do not have a window and are not displayable. See
-  // cef_request_tContext::LoadExtension for details.
-  ///
-  int(CEF_CALLBACK* is_background_host)(struct _cef_browser_host_t* self);
-} cef_browser_host_t;
-
-///
-// Create a new browser window using the window parameters specified by
-// |windowInfo|. All values will be copied internally and the actual window will
-// be created on the UI thread. If |request_context| is NULL the global request
-// context will be used. This function can be called on any browser process
-// thread and will not block.
-///
-CEF_EXPORT int cef_browser_host_create_browser(
-    const cef_window_info_t* windowInfo,
-    struct _cef_client_t* client,
-    const cef_string_t* url,
-    const struct _cef_browser_settings_t* settings,
-    struct _cef_request_context_t* request_context);
-
-///
-// Create a new browser window using the window parameters specified by
-// |windowInfo|. If |request_context| is NULL the global request context will be
-// used. This function can only be called on the browser process UI thread.
-///
-CEF_EXPORT cef_browser_t* cef_browser_host_create_browser_sync(
-    const cef_window_info_t* windowInfo,
-    struct _cef_client_t* client,
-    const cef_string_t* url,
-    const struct _cef_browser_settings_t* settings,
-    struct _cef_request_context_t* request_context);
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif  // CEF_INCLUDE_CAPI_CEF_BROWSER_CAPI_H_
+// Copyright (c) 2018 Marshall A. Greenblatt. All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are
+// met:
+//
+//    * Redistributions of source code must retain the above copyright
+// notice, this list of conditions and the following disclaimer.
+//    * Redistributions in binary form must reproduce the above
+// copyright notice, this list of conditions and the following disclaimer
+// in the documentation and/or other materials provided with the
+// distribution.
+//    * Neither the name of Google Inc. nor the name Chromium Embedded
+// Framework nor the names of its contributors may be used to endorse
+// or promote products derived from this software without specific prior
+// written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool and should not edited
+// by hand. See the translator.README.txt file in the tools directory for
+// more information.
+//
+// $hash=70ad2db918b06d70899ee5eeb620a3c2f416c81b$
+//
+
+#ifndef CEF_INCLUDE_CAPI_CEF_BROWSER_CAPI_H_
+#define CEF_INCLUDE_CAPI_CEF_BROWSER_CAPI_H_
+#pragma once
+
+#include "include/capi/cef_base_capi.h"
+#include "include/capi/cef_drag_data_capi.h"
+#include "include/capi/cef_frame_capi.h"
+#include "include/capi/cef_image_capi.h"
+#include "include/capi/cef_navigation_entry_capi.h"
+#include "include/capi/cef_process_message_capi.h"
+#include "include/capi/cef_request_context_capi.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+struct _cef_browser_host_t;
+struct _cef_client_t;
+
+///
+// Structure used to represent a browser window. When used in the browser
+// process the functions of this structure may be called on any thread unless
+// otherwise indicated in the comments. When used in the render process the
+// functions of this structure may only be called on the main thread.
+///
+typedef struct _cef_browser_t {
+  ///
+  // Base structure.
+  ///
+  cef_base_ref_counted_t base;
+
+  ///
+  // Returns the browser host object. This function can only be called in the
+  // browser process.
+  ///
+  struct _cef_browser_host_t*(CEF_CALLBACK* get_host)(
+      struct _cef_browser_t* self);
+
+  ///
+  // Returns true (1) if the browser can navigate backwards.
+  ///
+  int(CEF_CALLBACK* can_go_back)(struct _cef_browser_t* self);
+
+  ///
+  // Navigate backwards.
+  ///
+  void(CEF_CALLBACK* go_back)(struct _cef_browser_t* self);
+
+  ///
+  // Returns true (1) if the browser can navigate forwards.
+  ///
+  int(CEF_CALLBACK* can_go_forward)(struct _cef_browser_t* self);
+
+  ///
+  // Navigate forwards.
+  ///
+  void(CEF_CALLBACK* go_forward)(struct _cef_browser_t* self);
+
+  ///
+  // Returns true (1) if the browser is currently loading.
+  ///
+  int(CEF_CALLBACK* is_loading)(struct _cef_browser_t* self);
+
+  ///
+  // Reload the current page.
+  ///
+  void(CEF_CALLBACK* reload)(struct _cef_browser_t* self);
+
+  ///
+  // Reload the current page ignoring any cached data.
+  ///
+  void(CEF_CALLBACK* reload_ignore_cache)(struct _cef_browser_t* self);
+
+  ///
+  // Stop loading the page.
+  ///
+  void(CEF_CALLBACK* stop_load)(struct _cef_browser_t* self);
+
+  ///
+  // Returns the globally unique identifier for this browser. This value is also
+  // used as the tabId for extension APIs.
+  ///
+  int(CEF_CALLBACK* get_identifier)(struct _cef_browser_t* self);
+
+  ///
+  // Returns true (1) if this object is pointing to the same handle as |that|
+  // object.
+  ///
+  int(CEF_CALLBACK* is_same)(struct _cef_browser_t* self,
+                             struct _cef_browser_t* that);
+
+  ///
+  // Returns true (1) if the window is a popup window.
+  ///
+  int(CEF_CALLBACK* is_popup)(struct _cef_browser_t* self);
+
+  ///
+  // Returns true (1) if a document has been loaded in the browser.
+  ///
+  int(CEF_CALLBACK* has_document)(struct _cef_browser_t* self);
+
+  ///
+  // Returns the main (top-level) frame for the browser window.
+  ///
+  struct _cef_frame_t*(CEF_CALLBACK* get_main_frame)(
+      struct _cef_browser_t* self);
+
+  ///
+  // Returns the focused frame for the browser window.
+  ///
+  struct _cef_frame_t*(CEF_CALLBACK* get_focused_frame)(
+      struct _cef_browser_t* self);
+
+  ///
+  // Returns the frame with the specified identifier, or NULL if not found.
+  ///
+  struct _cef_frame_t*(CEF_CALLBACK* get_frame_byident)(
+      struct _cef_browser_t* self,
+      int64 identifier);
+
+  ///
+  // Returns the frame with the specified name, or NULL if not found.
+  ///
+  struct _cef_frame_t*(CEF_CALLBACK* get_frame)(struct _cef_browser_t* self,
+                                                const cef_string_t* name);
+
+  ///
+  // Returns the number of frames that currently exist.
+  ///
+  size_t(CEF_CALLBACK* get_frame_count)(struct _cef_browser_t* self);
+
+  ///
+  // Returns the identifiers of all existing frames.
+  ///
+  void(CEF_CALLBACK* get_frame_identifiers)(struct _cef_browser_t* self,
+                                            size_t* identifiersCount,
+                                            int64* identifiers);
+
+  ///
+  // Returns the names of all existing frames.
+  ///
+  void(CEF_CALLBACK* get_frame_names)(struct _cef_browser_t* self,
+                                      cef_string_list_t names);
+
+  ///
+  // Send a message to the specified |target_process|. Returns true (1) if the
+  // message was sent successfully.
+  ///
+  int(CEF_CALLBACK* send_process_message)(
+      struct _cef_browser_t* self,
+      cef_process_id_t target_process,
+      struct _cef_process_message_t* message);
+} cef_browser_t;
+
+///
+// Callback structure for cef_browser_host_t::RunFileDialog. The functions of
+// this structure will be called on the browser process UI thread.
+///
+typedef struct _cef_run_file_dialog_callback_t {
+  ///
+  // Base structure.
+  ///
+  cef_base_ref_counted_t base;
+
+  ///
+  // Called asynchronously after the file dialog is dismissed.
+  // |selected_accept_filter| is the 0-based index of the value selected from
+  // the accept filters array passed to cef_browser_host_t::RunFileDialog.
+  // |file_paths| will be a single value or a list of values depending on the
+  // dialog mode. If the selection was cancelled |file_paths| will be NULL.
+  ///
+  void(CEF_CALLBACK* on_file_dialog_dismissed)(
+      struct _cef_run_file_dialog_callback_t* self,
+      int selected_accept_filter,
+      cef_string_list_t file_paths);
+} cef_run_file_dialog_callback_t;
+
+///
+// Callback structure for cef_browser_host_t::GetNavigationEntries. The
+// functions of this structure will be called on the browser process UI thread.
+///
+typedef struct _cef_navigation_entry_visitor_t {
+  ///
+  // Base structure.
+  ///
+  cef_base_ref_counted_t base;
+
+  ///
+  // Method that will be executed. Do not keep a reference to |entry| outside of
+  // this callback. Return true (1) to continue visiting entries or false (0) to
+  // stop. |current| is true (1) if this entry is the currently loaded
+  // navigation entry. |index| is the 0-based index of this entry and |total| is
+  // the total number of entries.
+  ///
+  int(CEF_CALLBACK* visit)(struct _cef_navigation_entry_visitor_t* self,
+                           struct _cef_navigation_entry_t* entry,
+                           int current,
+                           int index,
+                           int total);
+} cef_navigation_entry_visitor_t;
+
+///
+// Callback structure for cef_browser_host_t::PrintToPDF. The functions of this
+// structure will be called on the browser process UI thread.
+///
+typedef struct _cef_pdf_print_callback_t {
+  ///
+  // Base structure.
+  ///
+  cef_base_ref_counted_t base;
+
+  ///
+  // Method that will be executed when the PDF printing has completed. |path| is
+  // the output path. |ok| will be true (1) if the printing completed
+  // successfully or false (0) otherwise.
+  ///
+  void(CEF_CALLBACK* on_pdf_print_finished)(
+      struct _cef_pdf_print_callback_t* self,
+      const cef_string_t* path,
+      int ok);
+} cef_pdf_print_callback_t;
+
+///
+// Callback structure for cef_browser_host_t::DownloadImage. The functions of
+// this structure will be called on the browser process UI thread.
+///
+typedef struct _cef_download_image_callback_t {
+  ///
+  // Base structure.
+  ///
+  cef_base_ref_counted_t base;
+
+  ///
+  // Method that will be executed when the image download has completed.
+  // |image_url| is the URL that was downloaded and |http_status_code| is the
+  // resulting HTTP status code. |image| is the resulting image, possibly at
+  // multiple scale factors, or NULL if the download failed.
+  ///
+  void(CEF_CALLBACK* on_download_image_finished)(
+      struct _cef_download_image_callback_t* self,
+      const cef_string_t* image_url,
+      int http_status_code,
+      struct _cef_image_t* image);
+} cef_download_image_callback_t;
+
+///
+// Structure used to represent the browser process aspects of a browser window.
+// The functions of this structure can only be called in the browser process.
+// They may be called on any thread in that process unless otherwise indicated
+// in the comments.
+///
+typedef struct _cef_browser_host_t {
+  ///
+  // Base structure.
+  ///
+  cef_base_ref_counted_t base;
+
+  ///
+  // Returns the hosted browser object.
+  ///
+  struct _cef_browser_t*(CEF_CALLBACK* get_browser)(
+      struct _cef_browser_host_t* self);
+
+  ///
+  // Request that the browser close. The JavaScript 'onbeforeunload' event will
+  // be fired. If |force_close| is false (0) the event handler, if any, will be
+  // allowed to prompt the user and the user can optionally cancel the close. If
+  // |force_close| is true (1) the prompt will not be displayed and the close
+  // will proceed. Results in a call to cef_life_span_handler_t::do_close() if
+  // the event handler allows the close or if |force_close| is true (1). See
+  // cef_life_span_handler_t::do_close() documentation for additional usage
+  // information.
+  ///
+  void(CEF_CALLBACK* close_browser)(struct _cef_browser_host_t* self,
+                                    int force_close);
+
+  ///
+  // Helper for closing a browser. Call this function from the top-level window
+  // close handler. Internally this calls CloseBrowser(false (0)) if the close
+  // has not yet been initiated. This function returns false (0) while the close
+  // is pending and true (1) after the close has completed. See close_browser()
+  // and cef_life_span_handler_t::do_close() documentation for additional usage
+  // information. This function must be called on the browser process UI thread.
+  ///
+  int(CEF_CALLBACK* try_close_browser)(struct _cef_browser_host_t* self);
+
+  ///
+  // Set whether the browser is focused.
+  ///
+  void(CEF_CALLBACK* set_focus)(struct _cef_browser_host_t* self, int focus);
+
+  ///
+  // Retrieve the window handle for this browser. If this browser is wrapped in
+  // a cef_browser_view_t this function should be called on the browser process
+  // UI thread and it will return the handle for the top-level native window.
+  ///
+  cef_window_handle_t(CEF_CALLBACK* get_window_handle)(
+      struct _cef_browser_host_t* self);
+
+  ///
+  // Retrieve the window handle of the browser that opened this browser. Will
+  // return NULL for non-popup windows or if this browser is wrapped in a
+  // cef_browser_view_t. This function can be used in combination with custom
+  // handling of modal windows.
+  ///
+  cef_window_handle_t(CEF_CALLBACK* get_opener_window_handle)(
+      struct _cef_browser_host_t* self);
+
+  ///
+  // Returns true (1) if this browser is wrapped in a cef_browser_view_t.
+  ///
+  int(CEF_CALLBACK* has_view)(struct _cef_browser_host_t* self);
+
+  ///
+  // Returns the client for this browser.
+  ///
+  struct _cef_client_t*(CEF_CALLBACK* get_client)(
+      struct _cef_browser_host_t* self);
+
+  ///
+  // Returns the request context for this browser.
+  ///
+  struct _cef_request_context_t*(CEF_CALLBACK* get_request_context)(
+      struct _cef_browser_host_t* self);
+
+  ///
+  // Get the current zoom level. The default zoom level is 0.0. This function
+  // can only be called on the UI thread.
+  ///
+  double(CEF_CALLBACK* get_zoom_level)(struct _cef_browser_host_t* self);
+
+  ///
+  // Change the zoom level to the specified value. Specify 0.0 to reset the zoom
+  // level. If called on the UI thread the change will be applied immediately.
+  // Otherwise, the change will be applied asynchronously on the UI thread.
+  ///
+  void(CEF_CALLBACK* set_zoom_level)(struct _cef_browser_host_t* self,
+                                     double zoomLevel);
+
+  ///
+  // Call to run a file chooser dialog. Only a single file chooser dialog may be
+  // pending at any given time. |mode| represents the type of dialog to display.
+  // |title| to the title to be used for the dialog and may be NULL to show the
+  // default title ("Open" or "Save" depending on the mode). |default_file_path|
+  // is the path with optional directory and/or file name component that will be
+  // initially selected in the dialog. |accept_filters| are used to restrict the
+  // selectable file types and may any combination of (a) valid lower-cased MIME
+  // types (e.g. "text/*" or "image/*"), (b) individual file extensions (e.g.
+  // ".txt" or ".png"), or (c) combined description and file extension delimited
+  // using "|" and ";" (e.g. "Image Types|.png;.gif;.jpg").
+  // |selected_accept_filter| is the 0-based index of the filter that will be
+  // selected by default. |callback| will be executed after the dialog is
+  // dismissed or immediately if another dialog is already pending. The dialog
+  // will be initiated asynchronously on the UI thread.
+  ///
+  void(CEF_CALLBACK* run_file_dialog)(
+      struct _cef_browser_host_t* self,
+      cef_file_dialog_mode_t mode,
+      const cef_string_t* title,
+      const cef_string_t* default_file_path,
+      cef_string_list_t accept_filters,
+      int selected_accept_filter,
+      struct _cef_run_file_dialog_callback_t* callback);
+
+  ///
+  // Download the file at |url| using cef_download_handler_t.
+  ///
+  void(CEF_CALLBACK* start_download)(struct _cef_browser_host_t* self,
+                                     const cef_string_t* url);
+
+  // Audio Mirroring virtual bool StartMirroring() = 0; virtual bool
+  // StopMirroring() = 0;
+
+  ///
+  // Download |image_url| and execute |callback| on completion with the images
+  // received from the renderer. If |is_favicon| is true (1) then cookies are
+  // not sent and not accepted during download. Images with density independent
+  // pixel (DIP) sizes larger than |max_image_size| are filtered out from the
+  // image results. Versions of the image at different scale factors may be
+  // downloaded up to the maximum scale factor supported by the system. If there
+  // are no image results <= |max_image_size| then the smallest image is resized
+  // to |max_image_size| and is the only result. A |max_image_size| of 0 means
+  // unlimited. If |bypass_cache| is true (1) then |image_url| is requested from
+  // the server even if it is present in the browser cache.
+  ///
+  void(CEF_CALLBACK* download_image)(
+      struct _cef_browser_host_t* self,
+      const cef_string_t* image_url,
+      int is_favicon,
+      uint32 max_image_size,
+      int bypass_cache,
+      struct _cef_download_image_callback_t* callback);
+
+  ///
+  // Print the current browser contents.
+  ///
+  void(CEF_CALLBACK* print)(struct _cef_browser_host_t* self);
+
+  ///
+  // Print the current browser contents to the PDF file specified by |path| and
+  // execute |callback| on completion. The caller is responsible for deleting
+  // |path| when done. For PDF printing to work on Linux you must implement the
+  // cef_print_handler_t::GetPdfPaperSize function.
+  ///
+  void(CEF_CALLBACK* print_to_pdf)(
+      struct _cef_browser_host_t* self,
+      const cef_string_t* path,
+      const struct _cef_pdf_print_settings_t* settings,
+      struct _cef_pdf_print_callback_t* callback);
+
+  ///
+  // Search for |searchText|. |identifier| must be a unique ID and these IDs
+  // must strictly increase so that newer requests always have greater IDs than
+  // older requests. If |identifier| is zero or less than the previous ID value
+  // then it will be automatically assigned a new valid ID. |forward| indicates
+  // whether to search forward or backward within the page. |matchCase|
+  // indicates whether the search should be case-sensitive. |findNext| indicates
+  // whether this is the first request or a follow-up. The cef_find_handler_t
+  // instance, if any, returned via cef_client_t::GetFindHandler will be called
+  // to report find results.
+  ///
+  void(CEF_CALLBACK* find)(struct _cef_browser_host_t* self,
+                           int identifier,
+                           const cef_string_t* searchText,
+                           int forward,
+                           int matchCase,
+                           int findNext);
+
+  ///
+  // Cancel all searches that are currently going on.
+  ///
+  void(CEF_CALLBACK* stop_finding)(struct _cef_browser_host_t* self,
+                                   int clearSelection);
+
+  ///
+  // Open developer tools (DevTools) in its own browser. The DevTools browser
+  // will remain associated with this browser. If the DevTools browser is
+  // already open then it will be focused, in which case the |windowInfo|,
+  // |client| and |settings| parameters will be ignored. If |inspect_element_at|
+  // is non-NULL then the element at the specified (x,y) location will be
+  // inspected. The |windowInfo| parameter will be ignored if this browser is
+  // wrapped in a cef_browser_view_t.
+  ///
+  void(CEF_CALLBACK* show_dev_tools)(
+      struct _cef_browser_host_t* self,
+      const struct _cef_window_info_t* windowInfo,
+      struct _cef_client_t* client,
+      const struct _cef_browser_settings_t* settings,
+      const cef_point_t* inspect_element_at);
+
+  ///
+  // Explicitly close the associated DevTools browser, if any.
+  ///
+  void(CEF_CALLBACK* close_dev_tools)(struct _cef_browser_host_t* self);
+
+  ///
+  // Returns true (1) if this browser currently has an associated DevTools
+  // browser. Must be called on the browser process UI thread.
+  ///
+  int(CEF_CALLBACK* has_dev_tools)(struct _cef_browser_host_t* self);
+
+  ///
+  // Retrieve a snapshot of current navigation entries as values sent to the
+  // specified visitor. If |current_only| is true (1) only the current
+  // navigation entry will be sent, otherwise all navigation entries will be
+  // sent.
+  ///
+  void(CEF_CALLBACK* get_navigation_entries)(
+      struct _cef_browser_host_t* self,
+      struct _cef_navigation_entry_visitor_t* visitor,
+      int current_only);
+
+  ///
+  // Set whether mouse cursor change is disabled.
+  ///
+  void(CEF_CALLBACK* set_mouse_cursor_change_disabled)(
+      struct _cef_browser_host_t* self,
+      int disabled);
+
+  ///
+  // Returns true (1) if mouse cursor change is disabled.
+  ///
+  int(CEF_CALLBACK* is_mouse_cursor_change_disabled)(
+      struct _cef_browser_host_t* self);
+
+  ///
+  // If a misspelled word is currently selected in an editable node calling this
+  // function will replace it with the specified |word|.
+  ///
+  void(CEF_CALLBACK* replace_misspelling)(struct _cef_browser_host_t* self,
+                                          const cef_string_t* word);
+
+  ///
+  // Add the specified |word| to the spelling dictionary.
+  ///
+  void(CEF_CALLBACK* add_word_to_dictionary)(struct _cef_browser_host_t* self,
+                                             const cef_string_t* word);
+
+  ///
+  // Returns true (1) if window rendering is disabled.
+  ///
+  int(CEF_CALLBACK* is_window_rendering_disabled)(
+      struct _cef_browser_host_t* self);
+
+  ///
+  // Notify the browser that the widget has been resized. The browser will first
+  // call cef_render_handler_t::GetViewRect to get the new size and then call
+  // cef_render_handler_t::OnPaint asynchronously with the updated regions. This
+  // function is only used when window rendering is disabled.
+  ///
+  void(CEF_CALLBACK* was_resized)(struct _cef_browser_host_t* self);
+
+  ///
+  // Notify the browser that it has been hidden or shown. Layouting and
+  // cef_render_handler_t::OnPaint notification will stop when the browser is
+  // hidden. This function is only used when window rendering is disabled.
+  ///
+  void(CEF_CALLBACK* was_hidden)(struct _cef_browser_host_t* self, int hidden);
+
+  ///
+  // Send a notification to the browser that the screen info has changed. The
+  // browser will then call cef_render_handler_t::GetScreenInfo to update the
+  // screen information with the new values. This simulates moving the webview
+  // window from one display to another, or changing the properties of the
+  // current display. This function is only used when window rendering is
+  // disabled.
+  ///
+  void(CEF_CALLBACK* notify_screen_info_changed)(
+      struct _cef_browser_host_t* self);
+
+  ///
+  // Invalidate the view. The browser will call cef_render_handler_t::OnPaint
+  // asynchronously. This function is only used when window rendering is
+  // disabled.
+  ///
+  void(CEF_CALLBACK* invalidate)(struct _cef_browser_host_t* self,
+                                 cef_paint_element_type_t type);
+
+  ///
+  // Send a key event to the browser.
+  ///
+  void(CEF_CALLBACK* send_key_event)(struct _cef_browser_host_t* self,
+                                     const struct _cef_key_event_t* event);
+
+  ///
+  // Send a mouse click event to the browser. The |x| and |y| coordinates are
+  // relative to the upper-left corner of the view.
+  ///
+  void(CEF_CALLBACK* send_mouse_click_event)(
+      struct _cef_browser_host_t* self,
+      const struct _cef_mouse_event_t* event,
+      cef_mouse_button_type_t type,
+      int mouseUp,
+      int clickCount);
+
+  ///
+  // Send a mouse move event to the browser. The |x| and |y| coordinates are
+  // relative to the upper-left corner of the view.
+  ///
+  void(CEF_CALLBACK* send_mouse_move_event)(
+      struct _cef_browser_host_t* self,
+      const struct _cef_mouse_event_t* event,
+      int mouseLeave);
+
+  ///
+  // Send a mouse wheel event to the browser. The |x| and |y| coordinates are
+  // relative to the upper-left corner of the view. The |deltaX| and |deltaY|
+  // values represent the movement delta in the X and Y directions respectively.
+  // In order to scroll inside select popups with window rendering disabled
+  // cef_render_handler_t::GetScreenPoint should be implemented properly.
+  ///
+  void(CEF_CALLBACK* send_mouse_wheel_event)(
+      struct _cef_browser_host_t* self,
+      const struct _cef_mouse_event_t* event,
+      int deltaX,
+      int deltaY);
+
+  ///
+  // Send a focus event to the browser.
+  ///
+  void(CEF_CALLBACK* send_focus_event)(struct _cef_browser_host_t* self,
+                                       int setFocus);
+
+  ///
+  // Send a capture lost event to the browser.
+  ///
+  void(CEF_CALLBACK* send_capture_lost_event)(struct _cef_browser_host_t* self);
+
+  ///
+  // Notify the browser that the window hosting it is about to be moved or
+  // resized. This function is only used on Windows and Linux.
+  ///
+  void(CEF_CALLBACK* notify_move_or_resize_started)(
+      struct _cef_browser_host_t* self);
+
+  ///
+  // Returns the maximum rate in frames per second (fps) that
+  // cef_render_handler_t:: OnPaint will be called for a windowless browser. The
+  // actual fps may be lower if the browser cannot generate frames at the
+  // requested rate. The minimum value is 1 and the maximum value is 60 (default
+  // 30). This function can only be called on the UI thread.
+  ///
+  int(CEF_CALLBACK* get_windowless_frame_rate)(
+      struct _cef_browser_host_t* self);
+
+  ///
+  // Set the maximum rate in frames per second (fps) that cef_render_handler_t::
+  // OnPaint will be called for a windowless browser. The actual fps may be
+  // lower if the browser cannot generate frames at the requested rate. The
+  // minimum value is 1 and the maximum value is 60 (default 30). Can also be
+  // set at browser creation via cef_browser_tSettings.windowless_frame_rate.
+  ///
+  void(CEF_CALLBACK* set_windowless_frame_rate)(
+      struct _cef_browser_host_t* self,
+      int frame_rate);
+
+  ///
+  // Begins a new composition or updates the existing composition. Blink has a
+  // special node (a composition node) that allows the input function to change
+  // text without affecting other DOM nodes. |text| is the optional text that
+  // will be inserted into the composition node. |underlines| is an optional set
+  // of ranges that will be underlined in the resulting text.
+  // |replacement_range| is an optional range of the existing text that will be
+  // replaced. |selection_range| is an optional range of the resulting text that
+  // will be selected after insertion or replacement. The |replacement_range|
+  // value is only used on OS X.
+  //
+  // This function may be called multiple times as the composition changes. When
+  // the client is done making changes the composition should either be canceled
+  // or completed. To cancel the composition call ImeCancelComposition. To
+  // complete the composition call either ImeCommitText or
+  // ImeFinishComposingText. Completion is usually signaled when:
+  //   A. The client receives a WM_IME_COMPOSITION message with a GCS_RESULTSTR
+  //      flag (on Windows), or;
+  //   B. The client receives a "commit" signal of GtkIMContext (on Linux), or;
+  //   C. insertText of NSTextInput is called (on Mac).
+  //
+  // This function is only used when window rendering is disabled.
+  ///
+  void(CEF_CALLBACK* ime_set_composition)(
+      struct _cef_browser_host_t* self,
+      const cef_string_t* text,
+      size_t underlinesCount,
+      cef_composition_underline_t const* underlines,
+      const cef_range_t* replacement_range,
+      const cef_range_t* selection_range);
+
+  ///
+  // Completes the existing composition by optionally inserting the specified
+  // |text| into the composition node. |replacement_range| is an optional range
+  // of the existing text that will be replaced. |relative_cursor_pos| is where
+  // the cursor will be positioned relative to the current cursor position. See
+  // comments on ImeSetComposition for usage. The |replacement_range| and
+  // |relative_cursor_pos| values are only used on OS X. This function is only
+  // used when window rendering is disabled.
+  ///
+  void(CEF_CALLBACK* ime_commit_text)(struct _cef_browser_host_t* self,
+                                      const cef_string_t* text,
+                                      const cef_range_t* replacement_range,
+                                      int relative_cursor_pos);
+
+  ///
+  // Completes the existing composition by applying the current composition node
+  // contents. If |keep_selection| is false (0) the current selection, if any,
+  // will be discarded. See comments on ImeSetComposition for usage. This
+  // function is only used when window rendering is disabled.
+  ///
+  void(CEF_CALLBACK* ime_finish_composing_text)(
+      struct _cef_browser_host_t* self,
+      int keep_selection);
+
+  ///
+  // Cancels the existing composition and discards the composition node contents
+  // without applying them. See comments on ImeSetComposition for usage. This
+  // function is only used when window rendering is disabled.
+  ///
+  void(CEF_CALLBACK* ime_cancel_composition)(struct _cef_browser_host_t* self);
+
+  ///
+  // Call this function when the user drags the mouse into the web view (before
+  // calling DragTargetDragOver/DragTargetLeave/DragTargetDrop). |drag_data|
+  // should not contain file contents as this type of data is not allowed to be
+  // dragged into the web view. File contents can be removed using
+  // cef_drag_data_t::ResetFileContents (for example, if |drag_data| comes from
+  // cef_render_handler_t::StartDragging). This function is only used when
+  // window rendering is disabled.
+  ///
+  void(CEF_CALLBACK* drag_target_drag_enter)(
+      struct _cef_browser_host_t* self,
+      struct _cef_drag_data_t* drag_data,
+      const struct _cef_mouse_event_t* event,
+      cef_drag_operations_mask_t allowed_ops);
+
+  ///
+  // Call this function each time the mouse is moved across the web view during
+  // a drag operation (after calling DragTargetDragEnter and before calling
+  // DragTargetDragLeave/DragTargetDrop). This function is only used when window
+  // rendering is disabled.
+  ///
+  void(CEF_CALLBACK* drag_target_drag_over)(
+      struct _cef_browser_host_t* self,
+      const struct _cef_mouse_event_t* event,
+      cef_drag_operations_mask_t allowed_ops);
+
+  ///
+  // Call this function when the user drags the mouse out of the web view (after
+  // calling DragTargetDragEnter). This function is only used when window
+  // rendering is disabled.
+  ///
+  void(CEF_CALLBACK* drag_target_drag_leave)(struct _cef_browser_host_t* self);
+
+  ///
+  // Call this function when the user completes the drag operation by dropping
+  // the object onto the web view (after calling DragTargetDragEnter). The
+  // object being dropped is |drag_data|, given as an argument to the previous
+  // DragTargetDragEnter call. This function is only used when window rendering
+  // is disabled.
+  ///
+  void(CEF_CALLBACK* drag_target_drop)(struct _cef_browser_host_t* self,
+                                       const struct _cef_mouse_event_t* event);
+
+  ///
+  // Call this function when the drag operation started by a
+  // cef_render_handler_t::StartDragging call has ended either in a drop or by
+  // being cancelled. |x| and |y| are mouse coordinates relative to the upper-
+  // left corner of the view. If the web view is both the drag source and the
+  // drag target then all DragTarget* functions should be called before
+  // DragSource* mthods. This function is only used when window rendering is
+  // disabled.
+  ///
+  void(CEF_CALLBACK* drag_source_ended_at)(struct _cef_browser_host_t* self,
+                                           int x,
+                                           int y,
+                                           cef_drag_operations_mask_t op);
+
+  ///
+  // Call this function when the drag operation started by a
+  // cef_render_handler_t::StartDragging call has completed. This function may
+  // be called immediately without first calling DragSourceEndedAt to cancel a
+  // drag operation. If the web view is both the drag source and the drag target
+  // then all DragTarget* functions should be called before DragSource* mthods.
+  // This function is only used when window rendering is disabled.
+  ///
+  void(CEF_CALLBACK* drag_source_system_drag_ended)(
+      struct _cef_browser_host_t* self);
+
+  ///
+  // Returns the current visible navigation entry for this browser. This
+  // function can only be called on the UI thread.
+  ///
+  struct _cef_navigation_entry_t*(CEF_CALLBACK* get_visible_navigation_entry)(
+      struct _cef_browser_host_t* self);
+
+  ///
+  // Set accessibility state for all frames. |accessibility_state| may be
+  // default, enabled or disabled. If |accessibility_state| is STATE_DEFAULT
+  // then accessibility will be disabled by default and the state may be further
+  // controlled with the "force-renderer-accessibility" and "disable-renderer-
+  // accessibility" command-line switches. If |accessibility_state| is
+  // STATE_ENABLED then accessibility will be enabled. If |accessibility_state|
+  // is STATE_DISABLED then accessibility will be completely disabled.
+  //
+  // For windowed browsers accessibility will be enabled in Complete mode (which
+  // corresponds to kAccessibilityModeComplete in Chromium). In this mode all
+  // platform accessibility objects will be created and managed by Chromium's
+  // internal implementation. The client needs only to detect the screen reader
+  // and call this function appropriately. For example, on macOS the client can
+  // handle the @"AXEnhancedUserStructure" accessibility attribute to detect
+  // VoiceOver state changes and on Windows the client can handle WM_GETOBJECT
+  // with OBJID_CLIENT to detect accessibility readers.
+  //
+  // For windowless browsers accessibility will be enabled in TreeOnly mode
+  // (which corresponds to kAccessibilityModeWebContentsOnly in Chromium). In
+  // this mode renderer accessibility is enabled, the full tree is computed, and
+  // events are passed to CefAccessibiltyHandler, but platform accessibility
+  // objects are not created. The client may implement platform accessibility
+  // objects using CefAccessibiltyHandler callbacks if desired.
+  ///
+  void(CEF_CALLBACK* set_accessibility_state)(struct _cef_browser_host_t* self,
+                                              cef_state_t accessibility_state);
+
+  ///
+  // Enable notifications of auto resize via
+  // cef_display_handler_t::OnAutoResize. Notifications are disabled by default.
+  // |min_size| and |max_size| define the range of allowed sizes.
+  ///
+  void(CEF_CALLBACK* set_auto_resize_enabled)(struct _cef_browser_host_t* self,
+                                              int enabled,
+                                              const cef_size_t* min_size,
+                                              const cef_size_t* max_size);
+
+  ///
+  // Returns the extension hosted in this browser or NULL if no extension is
+  // hosted. See cef_request_tContext::LoadExtension for details.
+  ///
+  struct _cef_extension_t*(CEF_CALLBACK* get_extension)(
+      struct _cef_browser_host_t* self);
+
+  ///
+  // Returns true (1) if this browser is hosting an extension background script.
+  // Background hosts do not have a window and are not displayable. See
+  // cef_request_tContext::LoadExtension for details.
+  ///
+  int(CEF_CALLBACK* is_background_host)(struct _cef_browser_host_t* self);
+} cef_browser_host_t;
+
+///
+// Create a new browser window using the window parameters specified by
+// |windowInfo|. All values will be copied internally and the actual window will
+// be created on the UI thread. If |request_context| is NULL the global request
+// context will be used. This function can be called on any browser process
+// thread and will not block.
+///
+CEF_EXPORT int cef_browser_host_create_browser(
+    const cef_window_info_t* windowInfo,
+    struct _cef_client_t* client,
+    const cef_string_t* url,
+    const struct _cef_browser_settings_t* settings,
+    struct _cef_request_context_t* request_context);
+
+///
+// Create a new browser window using the window parameters specified by
+// |windowInfo|. If |request_context| is NULL the global request context will be
+// used. This function can only be called on the browser process UI thread.
+///
+CEF_EXPORT cef_browser_t* cef_browser_host_create_browser_sync(
+    const cef_window_info_t* windowInfo,
+    struct _cef_client_t* client,
+    const cef_string_t* url,
+    const struct _cef_browser_settings_t* settings,
+    struct _cef_request_context_t* request_context);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  // CEF_INCLUDE_CAPI_CEF_BROWSER_CAPI_H_
diff --git a/include/capi/cef_client_capi.h b/include/capi/cef_client_capi.h
index 5603646..387aaf1 100644
--- a/include/capi/cef_client_capi.h
+++ b/include/capi/cef_client_capi.h
@@ -1,170 +1,177 @@
-// Copyright (c) 2018 Marshall A. Greenblatt. All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are
-// met:
-//
-//    * Redistributions of source code must retain the above copyright
-// notice, this list of conditions and the following disclaimer.
-//    * Redistributions in binary form must reproduce the above
-// copyright notice, this list of conditions and the following disclaimer
-// in the documentation and/or other materials provided with the
-// distribution.
-//    * Neither the name of Google Inc. nor the name Chromium Embedded
-// Framework nor the names of its contributors may be used to endorse
-// or promote products derived from this software without specific prior
-// written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-//
-// ---------------------------------------------------------------------------
-//
-// This file was generated by the CEF translator tool and should not edited
-// by hand. See the translator.README.txt file in the tools directory for
-// more information.
-//
-// $hash=1dbb0adf7ac5fd42b5a79d271834781664a7fd47$
-//
-
-#ifndef CEF_INCLUDE_CAPI_CEF_CLIENT_CAPI_H_
-#define CEF_INCLUDE_CAPI_CEF_CLIENT_CAPI_H_
-#pragma once
-
-#include "include/capi/cef_base_capi.h"
-#include "include/capi/cef_context_menu_handler_capi.h"
-#include "include/capi/cef_dialog_handler_capi.h"
-#include "include/capi/cef_display_handler_capi.h"
-#include "include/capi/cef_download_handler_capi.h"
-#include "include/capi/cef_drag_handler_capi.h"
-#include "include/capi/cef_find_handler_capi.h"
-#include "include/capi/cef_focus_handler_capi.h"
-#include "include/capi/cef_jsdialog_handler_capi.h"
-#include "include/capi/cef_keyboard_handler_capi.h"
-#include "include/capi/cef_life_span_handler_capi.h"
-#include "include/capi/cef_load_handler_capi.h"
-#include "include/capi/cef_process_message_capi.h"
-#include "include/capi/cef_render_handler_capi.h"
-#include "include/capi/cef_request_handler_capi.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-///
-// Implement this structure to provide handler implementations.
-///
-typedef struct _cef_client_t {
-  ///
-  // Base structure.
-  ///
-  cef_base_ref_counted_t base;
-
-  ///
-  // Return the handler for context menus. If no handler is provided the default
-  // implementation will be used.
-  ///
-  struct _cef_context_menu_handler_t*(CEF_CALLBACK* get_context_menu_handler)(
-      struct _cef_client_t* self);
-
-  ///
-  // Return the handler for dialogs. If no handler is provided the default
-  // implementation will be used.
-  ///
-  struct _cef_dialog_handler_t*(CEF_CALLBACK* get_dialog_handler)(
-      struct _cef_client_t* self);
-
-  ///
-  // Return the handler for browser display state events.
-  ///
-  struct _cef_display_handler_t*(CEF_CALLBACK* get_display_handler)(
-      struct _cef_client_t* self);
-
-  ///
-  // Return the handler for download events. If no handler is returned downloads
-  // will not be allowed.
-  ///
-  struct _cef_download_handler_t*(CEF_CALLBACK* get_download_handler)(
-      struct _cef_client_t* self);
-
-  ///
-  // Return the handler for drag events.
-  ///
-  struct _cef_drag_handler_t*(CEF_CALLBACK* get_drag_handler)(
-      struct _cef_client_t* self);
-
-  ///
-  // Return the handler for find result events.
-  ///
-  struct _cef_find_handler_t*(CEF_CALLBACK* get_find_handler)(
-      struct _cef_client_t* self);
-
-  ///
-  // Return the handler for focus events.
-  ///
-  struct _cef_focus_handler_t*(CEF_CALLBACK* get_focus_handler)(
-      struct _cef_client_t* self);
-
-  ///
-  // Return the handler for JavaScript dialogs. If no handler is provided the
-  // default implementation will be used.
-  ///
-  struct _cef_jsdialog_handler_t*(CEF_CALLBACK* get_jsdialog_handler)(
-      struct _cef_client_t* self);
-
-  ///
-  // Return the handler for keyboard events.
-  ///
-  struct _cef_keyboard_handler_t*(CEF_CALLBACK* get_keyboard_handler)(
-      struct _cef_client_t* self);
-
-  ///
-  // Return the handler for browser life span events.
-  ///
-  struct _cef_life_span_handler_t*(CEF_CALLBACK* get_life_span_handler)(
-      struct _cef_client_t* self);
-
-  ///
-  // Return the handler for browser load status events.
-  ///
-  struct _cef_load_handler_t*(CEF_CALLBACK* get_load_handler)(
-      struct _cef_client_t* self);
-
-  ///
-  // Return the handler for off-screen rendering events.
-  ///
-  struct _cef_render_handler_t*(CEF_CALLBACK* get_render_handler)(
-      struct _cef_client_t* self);
-
-  ///
-  // Return the handler for browser request events.
-  ///
-  struct _cef_request_handler_t*(CEF_CALLBACK* get_request_handler)(
-      struct _cef_client_t* self);
-
-  ///
-  // Called when a new message is received from a different process. Return true
-  // (1) if the message was handled or false (0) otherwise. Do not keep a
-  // reference to or attempt to access the message outside of this callback.
-  ///
-  int(CEF_CALLBACK* on_process_message_received)(
-      struct _cef_client_t* self,
-      struct _cef_browser_t* browser,
-      cef_process_id_t source_process,
-      struct _cef_process_message_t* message);
-} cef_client_t;
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif  // CEF_INCLUDE_CAPI_CEF_CLIENT_CAPI_H_
+// Copyright (c) 2018 Marshall A. Greenblatt. All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are
+// met:
+//
+//    * Redistributions of source code must retain the above copyright
+// notice, this list of conditions and the following disclaimer.
+//    * Redistributions in binary form must reproduce the above
+// copyright notice, this list of conditions and the following disclaimer
+// in the documentation and/or other materials provided with the
+// distribution.
+//    * Neither the name of Google Inc. nor the name Chromium Embedded
+// Framework nor the names of its contributors may be used to endorse
+// or promote products derived from this software without specific prior
+// written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool and should not edited
+// by hand. See the translator.README.txt file in the tools directory for
+// more information.
+//
+// $hash=dcc710dd346280cc54c75a99d90e25a07a7f5898$
+//
+
+#ifndef CEF_INCLUDE_CAPI_CEF_CLIENT_CAPI_H_
+#define CEF_INCLUDE_CAPI_CEF_CLIENT_CAPI_H_
+#pragma once
+
+#include "include/capi/cef_audio_handler_capi.h"
+#include "include/capi/cef_base_capi.h"
+#include "include/capi/cef_context_menu_handler_capi.h"
+#include "include/capi/cef_dialog_handler_capi.h"
+#include "include/capi/cef_display_handler_capi.h"
+#include "include/capi/cef_download_handler_capi.h"
+#include "include/capi/cef_drag_handler_capi.h"
+#include "include/capi/cef_find_handler_capi.h"
+#include "include/capi/cef_focus_handler_capi.h"
+#include "include/capi/cef_jsdialog_handler_capi.h"
+#include "include/capi/cef_keyboard_handler_capi.h"
+#include "include/capi/cef_life_span_handler_capi.h"
+#include "include/capi/cef_load_handler_capi.h"
+#include "include/capi/cef_process_message_capi.h"
+#include "include/capi/cef_render_handler_capi.h"
+#include "include/capi/cef_request_handler_capi.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+///
+// Implement this structure to provide handler implementations.
+///
+typedef struct _cef_client_t {
+  ///
+  // Base structure.
+  ///
+  cef_base_ref_counted_t base;
+
+  ///
+  // Return the handler for off-screen audio rendering events.
+  ///
+  struct _cef_audio_handler_t*(CEF_CALLBACK* get_audio_handler)(
+      struct _cef_client_t* self);
+
+  ///
+  // Return the handler for context menus. If no handler is provided the default
+  // implementation will be used.
+  ///
+  struct _cef_context_menu_handler_t*(CEF_CALLBACK* get_context_menu_handler)(
+      struct _cef_client_t* self);
+
+  ///
+  // Return the handler for dialogs. If no handler is provided the default
+  // implementation will be used.
+  ///
+  struct _cef_dialog_handler_t*(CEF_CALLBACK* get_dialog_handler)(
+      struct _cef_client_t* self);
+
+  ///
+  // Return the handler for browser display state events.
+  ///
+  struct _cef_display_handler_t*(CEF_CALLBACK* get_display_handler)(
+      struct _cef_client_t* self);
+
+  ///
+  // Return the handler for download events. If no handler is returned downloads
+  // will not be allowed.
+  ///
+  struct _cef_download_handler_t*(CEF_CALLBACK* get_download_handler)(
+      struct _cef_client_t* self);
+
+  ///
+  // Return the handler for drag events.
+  ///
+  struct _cef_drag_handler_t*(CEF_CALLBACK* get_drag_handler)(
+      struct _cef_client_t* self);
+
+  ///
+  // Return the handler for find result events.
+  ///
+  struct _cef_find_handler_t*(CEF_CALLBACK* get_find_handler)(
+      struct _cef_client_t* self);
+
+  ///
+  // Return the handler for focus events.
+  ///
+  struct _cef_focus_handler_t*(CEF_CALLBACK* get_focus_handler)(
+      struct _cef_client_t* self);
+
+  ///
+  // Return the handler for JavaScript dialogs. If no handler is provided the
+  // default implementation will be used.
+  ///
+  struct _cef_jsdialog_handler_t*(CEF_CALLBACK* get_jsdialog_handler)(
+      struct _cef_client_t* self);
+
+  ///
+  // Return the handler for keyboard events.
+  ///
+  struct _cef_keyboard_handler_t*(CEF_CALLBACK* get_keyboard_handler)(
+      struct _cef_client_t* self);
+
+  ///
+  // Return the handler for browser life span events.
+  ///
+  struct _cef_life_span_handler_t*(CEF_CALLBACK* get_life_span_handler)(
+      struct _cef_client_t* self);
+
+  ///
+  // Return the handler for browser load status events.
+  ///
+  struct _cef_load_handler_t*(CEF_CALLBACK* get_load_handler)(
+      struct _cef_client_t* self);
+
+  ///
+  // Return the handler for off-screen rendering events.
+  ///
+  struct _cef_render_handler_t*(CEF_CALLBACK* get_render_handler)(
+      struct _cef_client_t* self);
+
+  ///
+  // Return the handler for browser request events.
+  ///
+  struct _cef_request_handler_t*(CEF_CALLBACK* get_request_handler)(
+      struct _cef_client_t* self);
+
+  ///
+  // Called when a new message is received from a different process. Return true
+  // (1) if the message was handled or false (0) otherwise. Do not keep a
+  // reference to or attempt to access the message outside of this callback.
+  ///
+  int(CEF_CALLBACK* on_process_message_received)(
+      struct _cef_client_t* self,
+      struct _cef_browser_t* browser,
+      cef_process_id_t source_process,
+      struct _cef_process_message_t* message);
+} cef_client_t;
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  // CEF_INCLUDE_CAPI_CEF_CLIENT_CAPI_H_
diff --git a/include/cef_audio_bus.h b/include/cef_audio_bus.h
new file mode 100644
index 0000000..696e90e
--- /dev/null
+++ b/include/cef_audio_bus.h
@@ -0,0 +1,82 @@
+// Copyright (c) 2012 Marshall A. Greenblatt. All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are
+// met:
+//
+//    * Redistributions of source code must retain the above copyright
+// notice, this list of conditions and the following disclaimer.
+//    * Redistributions in binary form must reproduce the above
+// copyright notice, this list of conditions and the following disclaimer
+// in the documentation and/or other materials provided with the
+// distribution.
+//    * Neither the name of Google Inc. nor the name Chromium Embedded
+// Framework nor the names of its contributors may be used to endorse
+// or promote products derived from this software without specific prior
+// written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//
+// ---------------------------------------------------------------------------
+//
+// The contents of this file must follow a specific format in order to
+// support the CEF translator tool. See the translator.README.txt file in the
+// tools directory for more information.
+//
+
+#ifndef CEF_INCLUDE_CEF_AUDIO_BUS_H_
+#define CEF_INCLUDE_CEF_AUDIO_BUS_H_
+#pragma once
+
+#include <vector>
+#include "include/cef_base.h"
+#include "include/cef_drag_data.h"
+#include "include/cef_frame.h"
+#include "include/cef_image.h"
+#include "include/cef_navigation_entry.h"
+#include "include/cef_process_message.h"
+#include "include/cef_request_context.h"
+
+class CefBrowserHost;
+class CefClient;
+///
+// Class used to represent a browser window. When used in the browser process
+// the methods of this class may be called on any thread unless otherwise
+// indicated in the comments. When used in the render process the methods of
+// this class may only be called on the main thread.
+///
+/*--cef(source=library)--*/
+class CefAudioBus : public virtual CefBaseRefCounted {
+public:
+	///
+	// Returns number of frames
+	///
+	/*--cef()--*/
+	virtual int num_frames() = 0;
+
+	///
+	// Gets interleaved float buffer
+	///
+	/*--cef()--*/
+	virtual void ToInterleavedFloatBuffer(int num_frames_to_read,
+		float* dest_buffer) = 0;
+
+	///
+	// Gets interleaved unsigned int8 buffer
+	///
+	/*--cef()--*/
+	virtual void ToInterleavedUint8Buffer(int num_frames_to_read,
+		char* dest_buffer) = 0;
+};
+
+#endif  // CEF_INCLUDE_CEF_AUDIO_BUS_H_
\ No newline at end of file
diff --git a/include/cef_audio_handler.h b/include/cef_audio_handler.h
new file mode 100644
index 0000000..004e1b8
--- /dev/null
+++ b/include/cef_audio_handler.h
@@ -0,0 +1,123 @@
+// Copyright (c) 2015 Marshall A. Greenblatt. All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are
+// met:
+//
+//    * Redistributions of source code must retain the above copyright
+// notice, this list of conditions and the following disclaimer.
+//    * Redistributions in binary form must reproduce the above
+// copyright notice, this list of conditions and the following disclaimer
+// in the documentation and/or other materials provided with the
+// distribution.
+//    * Neither the name of Google Inc. nor the name Chromium Embedded
+// Framework nor the names of its contributors may be used to endorse
+// or promote products derived from this software without specific prior
+// written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//
+// ---------------------------------------------------------------------------
+//
+// The contents of this file must follow a specific format in order to
+// support the CEF translator tool. See the translator.README.txt file in the
+// tools directory for more information.
+//
+
+// NOTE: This has been borrowed from the pre-existing CEF PR
+// https://bitbucket.org/chromiumembedded/cef/pull-requests/18
+
+#ifndef CEF_INCLUDE_CEF_AUDIO_HANDLER_H_
+#define CEF_INCLUDE_CEF_AUDIO_HANDLER_H_
+#pragma once
+
+#include "include/cef_base.h"
+#include "include/cef_browser.h"
+#include "include/cef_audio_bus.h"
+
+///
+// Implement this interface to handle audio events
+///
+/*--cef(source=client)--*/
+class CefAudioHandler : public virtual CefBaseRefCounted {
+public:
+	///
+	// Event handler for every new audio stream, |audio_stream_id|
+	// will identify this stream in future events, and is unique across 
+	// all other audio stream. OnAudioStreamStarted can be called also 
+	// after OnAudioSteamStopped was called.
+	//
+	// Will be called on the UI thread 
+	///
+	/*--cef()--*/
+	virtual void OnAudioStreamStarted(CefRefPtr<CefBrowser> browser,
+		int audio_stream_id,
+		int sample_rate,
+		int channels,
+		int bits_per_sample,
+		int64 buffer_duration) { }
+
+	///
+	// Event handler for new audio packet from |audio_stream_id|,
+	// |data| is a uint8 array representing a raw PCM packet
+	// |data_length| is the size of the array.
+	//
+	// Will be called on the UI thread 
+	///
+	/*--cef()--*/
+	virtual void OnAudioStreamPacket(CefRefPtr<CefBrowser> browser,
+		int audio_stream_id,
+		const void* data,
+		int data_length) { }
+
+	///
+	// Event handler for stream |audio_stream_id| has been stopped,
+	// for every OnAudioStreamStarted, OnAudioSteamStopped will be 
+	// called.
+	//
+	// Will be called on the UI thread
+	///
+	/*--cef()--*/
+	virtual void OnAudioSteamStopped(CefRefPtr<CefBrowser> browser,
+		int audio_stream_id) { }
+
+	///
+	// Event handler for stream mirroring
+	//
+	// Will be called on the UI thread
+	///
+	/*--cef()--*/
+	virtual void OnAudioData(CefRefPtr<CefBrowser> browser, 
+                             int frames, int channels, int bits_per_sample,
+							 const void* data_buffer) { }
+
+	///
+	// Will be called before every OnAudioStreamPacket call,
+	// this getter should return the amount of time in milliseconds
+	// the audio should be delayed.
+	//
+	// Returning any number greater then 0 will also delay any
+	// video attached to the stream identified by |audio_stream_id|.
+	//
+	// The return value should be a non negative number.
+	//
+	// Will be called on the UI thread
+	///
+	/*--cef()--*/
+	virtual int GetLatencyInMilliseconds(CefRefPtr<CefBrowser> browser,
+		int audio_stream_id) {
+		return 0;
+	}
+};
+
+#endif  // CEF_INCLUDE_CEF_AUDIO_HANDLER_H_
\ No newline at end of file
diff --git a/include/cef_browser.h b/include/cef_browser.h
index 72d9b3b..659aa5e 100644
--- a/include/cef_browser.h
+++ b/include/cef_browser.h
@@ -429,6 +429,10 @@ class CefBrowserHost : public virtual CefBaseRefCounted {
   /*--cef()--*/
   virtual void StartDownload(const CefString& url) = 0;
 
+  // Audio Mirroring
+  //virtual bool StartMirroring() = 0;
+  //virtual bool StopMirroring() = 0;
+
   ///
   // Download |image_url| and execute |callback| on completion with the images
   // received from the renderer. If |is_favicon| is true then cookies are not
diff --git a/include/cef_client.h b/include/cef_client.h
index 59173c7..2f6c8e6 100644
--- a/include/cef_client.h
+++ b/include/cef_client.h
@@ -39,6 +39,7 @@
 #pragma once
 
 #include "include/cef_base.h"
+#include "include/cef_audio_handler.h"
 #include "include/cef_context_menu_handler.h"
 #include "include/cef_dialog_handler.h"
 #include "include/cef_display_handler.h"
@@ -60,6 +61,14 @@
 /*--cef(source=client,no_debugct_check)--*/
 class CefClient : public virtual CefBaseRefCounted {
  public:
+  ///
+  // Return the handler for off-screen audio rendering events.
+  ///
+  /*--cef()--*/
+  virtual CefRefPtr<CefAudioHandler> GetAudioHandler() {
+    return NULL;
+  }
+
   ///
   // Return the handler for context menus. If no handler is provided the default
   // implementation will be used.
diff --git a/libcef/browser/audio_bus.cc b/libcef/browser/audio_bus.cc
new file mode 100644
index 0000000..c952343
--- /dev/null
+++ b/libcef/browser/audio_bus.cc
@@ -0,0 +1,39 @@
+// Copyright (c) 2015 The Chromium Embedded Framework Authors.
+// Portions copyright (c) 2011 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "audio_bus.h"
+#include "media/base/audio_sample_types.h"
+
+CefAudioBusImpl::CefAudioBusImpl(std::unique_ptr<media::AudioBus> audio_bus) 
+	: audio_bus_(std::move(audio_bus))
+{
+	// empty
+}
+
+int CefAudioBusImpl::num_frames() {
+	if(audio_bus_ != nullptr)
+		return audio_bus_->frames();
+
+	return -1;
+}
+
+void CefAudioBusImpl::ToInterleavedFloatBuffer(int num_frames_to_read,
+	float* dest_buffer) {
+
+	if(audio_bus_ != nullptr)
+		audio_bus_->ToInterleaved<media::Float32SampleTypeTraits>(
+			num_frames_to_read, 
+			dest_buffer);
+}
+
+void CefAudioBusImpl::ToInterleavedUint8Buffer(int num_frames_to_read,
+	char* dest_buffer) {
+
+	if(audio_bus_ != nullptr)
+		audio_bus_->ToInterleaved<media::UnsignedInt8SampleTypeTraits>(
+			num_frames_to_read, 
+			(uint8_t*)dest_buffer);
+}
+
diff --git a/libcef/browser/audio_bus.h b/libcef/browser/audio_bus.h
new file mode 100644
index 0000000..62154f7
--- /dev/null
+++ b/libcef/browser/audio_bus.h
@@ -0,0 +1,48 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CEF_LIBCEF_AUDIO_BUS_H_
+#define CEF_LIBCEF_AUDIO_BUS_H_
+#pragma once
+
+#include "include/cef_base.h"
+#include "include/cef_audio_bus.h"
+#include "include/cef_audio_handler.h"
+#include "libcef/browser/browser_host_impl.h"
+#include "base/callback.h"
+#include "base/threading/thread_checker.h"
+#include "base/memory/weak_ptr.h"
+#include "base/message_loop/message_loop.h"
+#include "base/task_runner.h"
+#include "media/audio/audio_io.h"
+#include "media/base/audio_converter.h"
+#include "media/audio/audio_source_diverter.h"
+
+// Represents a sequence of audio frames containing frames() audio samples for
+// each of channels() channels. The data is stored as a set of contiguous
+// float arrays with one array per channel. The memory for the arrays is either
+// allocated and owned by the AudioBus or it is provided to one of the factory
+// methods. AudioBus guarantees that it allocates memory such that float array
+// for each channel is aligned by AudioBus::kChannelAlignment bytes and it
+// requires the same for memory passed to its Wrap...() factory methods.
+class CefAudioBusImpl : public CefAudioBus {
+public:
+	CefAudioBusImpl(std::unique_ptr<media::AudioBus> audio_bus);
+
+	virtual int num_frames() override;
+
+	// This is a proxy class for AudioBus
+	virtual void ToInterleavedFloatBuffer(int num_frames_to_read,
+								  float* dest_buffer) override;
+
+	virtual void ToInterleavedUint8Buffer(int num_frames_to_read,
+							      char* dest_buffer) override;
+
+private:
+	std::unique_ptr<media::AudioBus> audio_bus_ = nullptr;
+
+	IMPLEMENT_REFCOUNTING(CefAudioBusImpl);
+};
+
+#endif  // CEF_LIBCEF_AUDIO_BUS_H_
\ No newline at end of file
diff --git a/libcef/browser/audio_mirror_destination.cc b/libcef/browser/audio_mirror_destination.cc
new file mode 100644
index 0000000..fd5b269
--- /dev/null
+++ b/libcef/browser/audio_mirror_destination.cc
@@ -0,0 +1,53 @@
+// Copyright (c) 2015 The Chromium Embedded Framework Authors.
+// Portions copyright (c) 2011 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "audio_mirror_destination.h"
+#include "audio_output_stream.h"
+#include "audio_push_sink.h"
+
+
+// Asynchronously query whether this MirroringDestination wants to consume
+// audio sourced from each of the |candidates|.  |results_callback| is run
+// to indicate which of them (or none) should have audio routed to this
+// MirroringDestination.  |results_callback| must be run on the same thread
+// as the one that called QueryForMatches().
+void CefAudioMirrorDestination::QueryForMatches(
+	const std::set<content::AudioMirroringManager::SourceFrameRef>& candidates,
+	const MatchesCallback& results_callback) {
+	std::set<content::AudioMirroringManager::SourceFrameRef> result;
+
+	for (auto& source_frame : candidates) {
+		CefRefPtr<CefBrowserHostImpl> browser =
+			CefBrowserHostImpl::GetBrowserForFrame(source_frame.first,
+				                                   source_frame.second);
+		if (browser == browser_) {
+			result.insert(source_frame);
+		}
+	}
+
+	// Request mirrored audio (duplicate).
+	// TODO: Expose this, mirror vs sink
+	results_callback.Run(result, true);
+}
+
+// Create a consumer of audio data in the format specified by |params|, and
+// connect it as an input to mirroring.  This is used to provide
+// MirroringDestination with exclusive access to pull the audio flow from
+// the source. When Close() is called on the returned AudioOutputStream, the
+// input is disconnected and the object becomes invalid.
+media::AudioOutputStream* CefAudioMirrorDestination::AddInput(
+	const media::AudioParameters& params) {
+	return new CefAudioOutputStream(params, browser_, cef_audio_handler_);
+}
+
+// Create a consumer of audio data in the format specified by |params|, and
+// connect it as an input to mirroring.  This is used to provide
+// MirroringDestination with duplicate audio data, which is pushed from the
+// main audio flow. When Close() is called on the returned AudioPushSink,
+// the input is disconnected and the object becomes invalid.
+media::AudioPushSink* CefAudioMirrorDestination::AddPushInput(
+	const media::AudioParameters& params) {
+	return new CefAudioPushSink(params, browser_, cef_audio_handler_);
+}
\ No newline at end of file
diff --git a/libcef/browser/audio_mirror_destination.h b/libcef/browser/audio_mirror_destination.h
new file mode 100644
index 0000000..837278c
--- /dev/null
+++ b/libcef/browser/audio_mirror_destination.h
@@ -0,0 +1,65 @@
+// Copyright (c) 2015 The Chromium Embedded Framework Authors.
+// Portions copyright (c) 2011 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CEF_LIBCEF_AUDIO_MIRROR_DESTINATION_H_
+#define CEF_LIBCEF_AUDIO_MIRROR_DESTINATION_H_
+#pragma once
+
+
+#include "base/callback.h"
+#include "base/threading/thread_checker.h"
+#include "content/browser/media/capture/audio_mirroring_manager.h"
+#include "include/cef_base.h"
+#include "include/cef_audio_handler.h"
+#include "libcef/browser/browser_host_impl.h"
+#include "media/audio/audio_io.h"
+#include "media/base/audio_converter.h"
+
+class CefAudioMirrorDestination
+	: public CefBaseRefCounted,
+	  public content::AudioMirroringManager::MirroringDestination {
+public:
+
+	CefAudioMirrorDestination(CefRefPtr<CefBrowserHostImpl> browser,
+		CefRefPtr<CefAudioHandler> cef_audio_handler)
+		: browser_(browser),
+		cef_audio_handler_(cef_audio_handler) {}
+
+	// Asynchronously query whether this MirroringDestination wants to consume
+	// audio sourced from each of the |candidates|.  |results_callback| is run
+	// to indicate which of them (or none) should have audio routed to this
+	// MirroringDestination.  |results_callback| must be run on the same thread
+	// as the one that called QueryForMatches().
+	void QueryForMatches(
+		const std::set<content::AudioMirroringManager::SourceFrameRef>& candidates,
+		const MatchesCallback& results_callback) override;
+
+	// Create a consumer of audio data in the format specified by |params|, and
+	// connect it as an input to mirroring.  This is used to provide
+	// MirroringDestination with exclusive access to pull the audio flow from
+	// the source. When Close() is called on the returned AudioOutputStream, the
+	// input is disconnected and the object becomes invalid.
+	media::AudioOutputStream* AddInput(
+		const media::AudioParameters& params) override;
+
+	// Create a consumer of audio data in the format specified by |params|, and
+	// connect it as an input to mirroring.  This is used to provide
+	// MirroringDestination with duplicate audio data, which is pushed from the
+	// main audio flow. When Close() is called on the returned AudioPushSink,
+	// the input is disconnected and the object becomes invalid.
+	virtual media::AudioPushSink* AddPushInput(
+		const media::AudioParameters& params) override;
+
+protected:
+	virtual ~CefAudioMirrorDestination() {}
+
+private:
+	CefRefPtr<CefBrowserHostImpl> browser_;
+	CefRefPtr<CefAudioHandler> cef_audio_handler_;
+
+	IMPLEMENT_REFCOUNTING(CefAudioMirrorDestination);
+};
+
+#endif  // CEF_LIBCEF_AUDIO_MIRROR_DESTINATION_H_
\ No newline at end of file
diff --git a/libcef/browser/audio_output_stream.cc b/libcef/browser/audio_output_stream.cc
new file mode 100644
index 0000000..0cbb947
--- /dev/null
+++ b/libcef/browser/audio_output_stream.cc
@@ -0,0 +1,210 @@
+// Copyright (c) 2015 The Chromium Embedded Framework Authors.
+// Portions copyright (c) 2011 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "audio_output_stream.h"
+#include "media/audio/virtual_audio_output_stream.h"
+
+#include "base/logging.h"
+#include "base/bind.h"
+#include "media/base/data_buffer.h"
+#include "media/audio/virtual_audio_input_stream.h"
+
+using namespace media;
+int CefAudioOutputStream::audio_stream_id = 0;
+
+CefAudioOutputStream::CefAudioOutputStream(
+	const AudioParameters& params,
+	CefRefPtr<CefBrowserHostImpl> browser,
+	CefRefPtr<CefAudioHandler> cef_audio_handler)
+	: params_(params),
+	browser_(browser),
+	cef_audio_handler_(cef_audio_handler),
+	callback_(NULL),
+	volume_(1.0f),
+	message_loop_(base::MessageLoop::current()),
+	stop_stream_(true),
+	audio_bus_(AudioBus::Create(params)),
+	weak_factory_(this),
+	buffer_duration_(base::TimeDelta::FromMicroseconds(
+		params.frames_per_buffer() * base::Time::kMicrosecondsPerSecond /
+		static_cast<float>(params.sample_rate()))) {
+	DCHECK(params_.IsValid());
+	DCHECK(browser);
+	DCHECK(cef_audio_handler);
+
+	// VAOS can be constructed on any thread, but will DCHECK that all
+	// AudioOutputStream methods are called from the same thread.
+	thread_checker_.DetachFromThread();
+}
+
+CefAudioOutputStream::~CefAudioOutputStream() {
+	DCHECK(!callback_);
+	DCHECK(!browser_);
+	DCHECK(!cef_audio_handler_);
+}
+
+bool CefAudioOutputStream::Open() {
+	DCHECK(thread_checker_.CalledOnValidThread());
+	return true;
+}
+
+void CefAudioOutputStream::Start(AudioSourceCallback* callback) {
+	DCHECK(thread_checker_.CalledOnValidThread());
+	DCHECK(!callback_);
+	audio_stream_id_ = ++audio_stream_id;
+	stop_stream_ = false;
+	callback_ = callback;
+
+	cef_audio_handler_->OnAudioStreamStarted(browser_->GetBrowser(),
+		audio_stream_id_,
+		params_.sample_rate(),
+		params_.channels(),
+		params_.bits_per_sample(),
+		buffer_duration_.InMilliseconds());
+
+	next_read_time_ = base::TimeTicks::Now();
+
+	//WriteTask();
+
+	
+}
+
+void CefAudioOutputStream::Stop() {
+	DCHECK(thread_checker_.CalledOnValidThread());
+
+	if (!stop_stream_)
+	{
+		cef_audio_handler_->OnAudioSteamStopped(browser_->GetBrowser(),
+			audio_stream_id_);
+	}
+
+	stop_stream_ = true;
+	callback_ = NULL;
+}
+
+void CefAudioOutputStream::Close() {
+	DCHECK(thread_checker_.CalledOnValidThread());
+
+	Stop();
+}
+
+void CefAudioOutputStream::SetVolume(double volume) {
+	DCHECK(thread_checker_.CalledOnValidThread());
+	volume_ = volume;
+}
+
+void CefAudioOutputStream::GetVolume(double* volume) {
+	DCHECK(thread_checker_.CalledOnValidThread());
+	*volume = volume_;
+}
+
+void CefAudioOutputStream::BufferPacket(bool* source_exhausted) {
+	// If stopped, simulate a 0-length packet.
+	if (stop_stream_) {
+		*source_exhausted = true;
+		return;
+	}
+
+	*source_exhausted = false;
+
+	// Initializing new buffer
+	scoped_refptr<media::DataBuffer> packet =
+		new media::DataBuffer(params_.GetBytesPerBuffer());
+
+	int delay = cef_audio_handler_->GetLatencyInMilliseconds(
+		browser_->GetBrowser(),
+		audio_stream_id_);
+
+		// Read from audio input
+		int frames_filled = ProvideInput(audio_bus_.get(),
+			base::TimeDelta::FromMilliseconds(delay));
+
+	int packet_size = frames_filled * params_.GetBytesPerFrame();
+
+	if (packet_size > 0) {
+		// Set volume
+		audio_bus_->Scale(volume_);
+
+		// Move data to buffer
+		audio_bus_->ToInterleaved(frames_filled, params_.bits_per_sample() / 8,
+			packet->writable_data());
+
+		packet->set_data_size(packet_size);
+
+		// Add the packet to the buffer.
+		cef_audio_handler_->OnAudioStreamPacket(
+			browser_->GetBrowser(),
+			audio_stream_id_,
+			static_cast<const void*>(packet->data()), packet->data_size());
+	}
+	else {
+		*source_exhausted = true;
+	}
+}
+
+double CefAudioOutputStream::ProvideInput(AudioBus* audio_bus,
+										  base::TimeDelta buffer_delay) {
+	// Note: This method may be invoked on any one thread, depending on the
+	// platform.
+	DCHECK(callback_);
+
+	DCHECK_GE(buffer_delay, base::TimeDelta());
+
+	//const int64 upstream_delay_in_bytes =
+	//	params_.GetBytesPerSecond() * buffer_delay /
+	//	base::TimeDelta::FromSeconds(1);
+
+	int prior_frames_skipped = 0;
+	base::TimeTicks delay_timestamp = base::TimeTicks::Now();
+
+	const int frames = callback_->OnMoreData(
+		buffer_delay, delay_timestamp, prior_frames_skipped, audio_bus);
+
+	if (frames < audio_bus->frames())
+		audio_bus->ZeroFramesPartial(frames, audio_bus->frames() - frames);
+
+	audio_bus->Scale(volume_);
+
+	return (frames > 0) ? frames : 0;
+}
+
+void CefAudioOutputStream::ScheduleNextWrite(bool source_exhausted) {
+	if (stop_stream_)
+		return;
+
+	const base::TimeTicks now = base::TimeTicks::Now();
+	base::TimeDelta delay = next_read_time_ + buffer_duration_ - now;
+
+	if (delay < base::TimeDelta())
+		delay += buffer_duration_ * (-delay / buffer_duration_ + 1);
+	next_read_time_ = now + delay;
+
+	/*
+	message_loop_->PostDelayedTask(FROM_HERE, base::Bind(
+		&CefAudioOutputStream::WriteTask, weak_factory_.GetWeakPtr()),
+		delay);
+		*/
+
+	// TODO: Need to schedule next read, get Audio Manager and get it's 
+	// task manager
+
+	/*
+	message_loop_->task_runner->PostDelayedTask(FROM_HERE, base::Bind(
+		&CefAudioOutputStream::WriteTask, weak_factory_.GetWeakPtr()),
+		delay);
+	*/
+
+	
+}
+
+void CefAudioOutputStream::WriteTask() {
+	if (stop_stream_)
+		return;
+
+	bool source_exhausted;
+	BufferPacket(&source_exhausted);
+
+	ScheduleNextWrite(source_exhausted);
+}
\ No newline at end of file
diff --git a/libcef/browser/audio_output_stream.h b/libcef/browser/audio_output_stream.h
new file mode 100644
index 0000000..83979b2
--- /dev/null
+++ b/libcef/browser/audio_output_stream.h
@@ -0,0 +1,82 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CEF_LIBCEF_AUDIO_OUTPUT_STREAM_H_
+#define CEF_LIBCEF_AUDIO_OUTPUT_STREAM_H_
+#pragma once
+
+#include "include/cef_base.h"
+#include "include/cef_audio_handler.h"
+#include "libcef/browser/browser_host_impl.h"
+#include "base/callback.h"
+#include "base/threading/thread_checker.h"
+#include "base/memory/weak_ptr.h"
+#include "base/message_loop/message_loop.h"
+#include "base/task_runner.h"
+#include "media/audio/audio_io.h"
+#include "media/base/audio_converter.h"
+#include "media/audio/audio_source_diverter.h"
+
+// CefAudioOutputStream attaches to a CefAudioHandler when Start()
+// is called and is used as an audio source. CefAudioOutputStream also
+// implements an interface so it can be used as an input to AudioConverter so
+// that we can get audio frames that match the AudioParameters that
+// CefAudioHandler expects.
+class CefAudioOutputStream
+	: public media::AudioOutputStream {
+public:
+	// Construct an audio loop back pathway to the given |target| (not owned).
+	// |target| must outlive this instance.
+	CefAudioOutputStream(const media::AudioParameters& params,
+		CefRefPtr<CefBrowserHostImpl> browser,
+		CefRefPtr<CefAudioHandler> cef_audio_handler);
+
+	virtual ~CefAudioOutputStream();
+
+	// AudioOutputStream:
+	bool Open() override;
+	void Start(AudioSourceCallback* callback) override;
+	void Stop() override;
+	void SetVolume(double volume) override;
+	void GetVolume(double* volume) override;
+	void Close() override;
+
+private:
+	// AudioConverter::InputCallback:
+	double ProvideInput(media::AudioBus* audio_bus,
+		base::TimeDelta buffer_delay);
+	void BufferPacket(bool* source_exhausted);
+	void ScheduleNextWrite(bool source_exhausted);
+	void WriteTask();
+
+	const media::AudioParameters params_;
+	// Pointer to the CefAudioHandler to attach to when Start() is called.
+	// This pointer should always be valid because CefAudioHandler should
+	// outlive this class.
+	CefRefPtr<CefBrowserHostImpl> browser_;
+	CefRefPtr<CefAudioHandler> cef_audio_handler_;
+
+	AudioSourceCallback* callback_;
+	double volume_;
+
+	base::ThreadChecker thread_checker_;
+
+	base::MessageLoop* message_loop_;
+
+	bool stop_stream_;
+	//scoped_ptr<media::AudioBus> audio_bus_;
+	//CefRefPtr<media::AudioBus> audio_bus_;
+	std::unique_ptr<media::AudioBus> audio_bus_;
+
+	base::WeakPtrFactory<CefAudioOutputStream> weak_factory_;
+	base::TimeTicks next_read_time_;
+	const base::TimeDelta buffer_duration_;
+	int audio_stream_id_;
+
+	static int audio_stream_id;
+
+	DISALLOW_COPY_AND_ASSIGN(CefAudioOutputStream);
+};
+
+#endif  // CEF_LIBCEF_AUDIO_OUTPUT_STREAM_H_
\ No newline at end of file
diff --git a/libcef/browser/audio_push_sink.cc b/libcef/browser/audio_push_sink.cc
new file mode 100644
index 0000000..60836ad
--- /dev/null
+++ b/libcef/browser/audio_push_sink.cc
@@ -0,0 +1,118 @@
+// Copyright (c) 2015 The Chromium Embedded Framework Authors.
+// Portions copyright (c) 2011 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "audio_push_sink.h"
+#include "media/audio/virtual_audio_output_stream.h"
+
+#include "base/logging.h"
+#include "base/bind.h"
+#include "media/base/data_buffer.h"
+#include "media/audio/virtual_audio_input_stream.h"
+
+#include "include/cef_audio_bus.h"
+
+#include "audio_bus.h"
+#include "media/base/audio_sample_types.h"
+
+// Construct an audio loop back pathway to the given |target| (not owned).
+// |target| must outlive this instance.
+CefAudioPushSink::CefAudioPushSink(const media::AudioParameters& params,
+	CefRefPtr<CefBrowserHostImpl> browser,
+	CefRefPtr<CefAudioHandler> cef_audio_handler)
+	: params_(params),
+	browser_(browser),
+	cef_audio_handler_(cef_audio_handler) {
+	DCHECK(params_.IsValid());
+	DCHECK(browser);
+	DCHECK(cef_audio_handler);
+
+	LOG(INFO) << "CEF Audio Push Sink: , channels: " << params_.channels() <<
+		", samplerate: " << params_.sample_rate() <<
+		", buffer_duration: " << params_.GetBufferDuration() <<
+		", bits_per_sample: " << params_.bits_per_sample();
+
+	// VAOS can be constructed on any thread, but will DCHECK that all
+	// AudioPushSink methods are called from the same thread.
+	thread_checker_.DetachFromThread();
+
+	/*
+	output_audio_file_ = std::make_shared<std::ofstream>();
+
+	if (output_audio_file_) {
+		output_audio_file_->open("C:\\temp\\pcmOutfile.pcm", std::ios::out | std::ios::binary | std::ios::trunc);      //open a file
+
+		if (!output_audio_file_->is_open()) {
+			output_audio_file_ = NULL;
+		}
+	}
+	*/
+}
+
+// Call this function to push audio data into the sink.
+void CefAudioPushSink::OnData(std::unique_ptr<media::AudioBus> source,
+	base::TimeTicks reference_time) {
+
+	const int frames = source->frames();
+
+	const int buffer_size = params_.GetBytesPerBuffer();
+
+	scoped_refptr<media::DataBuffer> packet = new media::DataBuffer(buffer_size);
+
+	//int packet_size = frames * params_.GetBytesPerFrame();
+	int channels = params_.channels();
+	int bits_per_sample = params_.bits_per_sample();
+
+	//LOG(INFO) << "CefAudioPushSink::OnData " << frames << " frames " << packet_size << " packet size "  << buffer_size << " buffersize";
+
+	if (packet) {
+		source->Scale(1.0f);
+
+		source->ToInterleaved<media::FixedSampleTypeTraits<int16_t>>(frames, (int16_t*)packet->writable_data());
+		packet->set_data_size(buffer_size);
+
+		cef_audio_handler_->OnAudioData(browser_->GetBrowser(), frames, channels, bits_per_sample, (int16_t*)(packet->data()));
+
+		/*
+		//float *channel_left = source->channel(0);
+		//float *channel_right = source->channel(0);
+
+		if (output_audio_file_) {
+			//const uint8_t* data_array = static_cast<const uint8_t*>(packet->data());
+			//int16_t* data_array = (int16_t*)(packet->data());
+
+			//const uint8_t* data_array = (uint8_t*)(packet->data());
+
+			for (int i = 0; i < frames; ++i) {
+				//for (int chan = 0; chan < 2; chan++) {
+				for (int chan = 0; chan < 2; chan++) {
+					float val = source->channel(chan)[i];
+
+					if (val > 1.0f)
+						val = 1.0f;
+					else if (val < -1.0f)
+						val = -1.0f;
+
+					//uint8_t uVal = ((val + 1.0f) / 2.0f) * 0xFF;
+					int16_t uVal = (int16_t)(val * 0x7FFF);
+
+					output_audio_file_->write((char*)&uVal, sizeof(int16_t));
+				}
+			}
+		}
+
+		// Release frames here
+		//delete [] dest_buffer;
+		//dest_buffer = NULL;
+		*/
+	}
+
+	
+}
+
+// Close the stream.
+// After calling this method, the object should not be used anymore.
+void CefAudioPushSink::Close() {
+	DCHECK(thread_checker_.CalledOnValidThread());
+}
\ No newline at end of file
diff --git a/libcef/browser/audio_push_sink.h b/libcef/browser/audio_push_sink.h
new file mode 100644
index 0000000..c0730d1
--- /dev/null
+++ b/libcef/browser/audio_push_sink.h
@@ -0,0 +1,58 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CEF_LIBCEF_AUDIO_PUSH_SINK_H_
+#define CEF_LIBCEF_AUDIO_PUSH_SINK_H_
+#pragma once
+
+#include "include/cef_base.h"
+#include "include/cef_audio_bus.h"
+#include "include/cef_audio_handler.h"
+#include "libcef/browser/browser_host_impl.h"
+#include "base/callback.h"
+#include "base/threading/thread_checker.h"
+#include "base/memory/weak_ptr.h"
+#include "base/message_loop/message_loop.h"
+#include "base/task_runner.h"
+#include "media/audio/audio_io.h"
+#include "media/base/audio_converter.h"
+#include "media/audio/audio_source_diverter.h"
+
+// Audio sources may optionally implement AudioSourceDiverter to temporarily
+// divert audio data to an alternate AudioOutputStream.  This allows the audio
+// data to be plumbed to an alternate consumer; for example, a loopback
+// mechanism for audio mirroring.
+class CefAudioPushSink : public media::AudioPushSink {
+public:
+	// Construct an audio loop back pathway to the given |target| (not owned).
+	// |target| must outlive this instance.
+	CefAudioPushSink(const media::AudioParameters& params,
+		CefRefPtr<CefBrowserHostImpl> browser,
+		CefRefPtr<CefAudioHandler> cef_audio_handler);
+
+	// Call this function to push audio data into the sink.
+	virtual void OnData(std::unique_ptr<media::AudioBus> source,
+		base::TimeTicks reference_time) override;
+
+	// Close the stream.
+	// After calling this method, the object should not be used anymore.
+	virtual void Close() override;
+
+private:
+	const media::AudioParameters params_;
+
+	// Pointer to the CefAudioHandler to attach to when Start() is called.
+	// This pointer should always be valid because CefAudioHandler should
+	// outlive this class.
+	CefRefPtr<CefBrowserHostImpl> browser_;
+	CefRefPtr<CefAudioHandler> cef_audio_handler_;
+
+	//double volume_;
+
+	base::ThreadChecker thread_checker_;
+
+	//std::shared_ptr<std::ofstream> output_audio_file_;
+};
+
+#endif // CEF_LIBCEF_AUDIO_PUSH_SINK_H_
\ No newline at end of file
diff --git a/libcef/browser/browser_host_impl.cc b/libcef/browser/browser_host_impl.cc
index b686c78..35c9338 100644
--- a/libcef/browser/browser_host_impl.cc
+++ b/libcef/browser/browser_host_impl.cc
@@ -13,6 +13,9 @@
 #include "libcef/browser/browser_info_manager.h"
 #include "libcef/browser/browser_platform_delegate.h"
 #include "libcef/browser/browser_util.h"
+//#include "libcef/browser/browser_pref_store.h"
+#include "libcef/browser/audio_mirror_destination.h"
+//#include "libcef/browser/chrome_scheme_handler.h"
 #include "libcef/browser/content_browser_client.h"
 #include "libcef/browser/context.h"
 #include "libcef/browser/devtools_frontend.h"
@@ -50,6 +53,8 @@
 #include "components/zoom/zoom_controller.h"
 #include "content/browser/gpu/compositor_util.h"
 #include "content/browser/web_contents/web_contents_impl.h"
+#include "content/browser/media/capture/audio_mirroring_manager.h"
+#include "content/browser/renderer_host/render_widget_host_impl.h"
 #include "content/common/view_messages.h"
 #include "content/public/browser/desktop_media_id.h"
 #include "content/public/browser/download_manager.h"
@@ -1535,6 +1540,9 @@ void CefBrowserHostImpl::DestroyBrowser() {
   // Disassociate the platform delegate from this browser.
   platform_delegate_->BrowserDestroyed(this);
 
+  // TODO: This is probably not the best place for this
+  StopMirroring();
+
   while (!queued_messages_.empty()) {
     delete queued_messages_.front();
     queued_messages_.pop();
@@ -2925,6 +2933,42 @@ bool CefBrowserHostImpl::HasObserver(Observer* observer) const {
   return observers_.HasObserver(observer);
 }
 
+// Audio Mirroring 
+void CefBrowserHostImpl::StartMirroring()
+{
+  if (client_.get()) {
+    CefRefPtr<CefAudioHandler> audio_handler = client_->GetAudioHandler();
+
+	if (audio_handler.get()) {
+		if (content::BrowserThread::CurrentlyOn(content::BrowserThread::IO)) {
+			mirror_destination_ = new CefAudioMirrorDestination(this, audio_handler);
+			content::AudioMirroringManager::GetInstance()->StartMirroring(mirror_destination_.get());
+		}
+		else {
+			content::BrowserThread::GetTaskRunnerForThread(content::BrowserThread::IO)
+				->PostTask(FROM_HERE, base::BindOnce(&CefBrowserHostImpl::StartMirroring, this));
+		}
+	}
+  }
+
+  return;
+}
+
+void CefBrowserHostImpl::StopMirroring()
+{ 
+  if (mirror_destination_.get()) {
+	  if (content::BrowserThread::CurrentlyOn(content::BrowserThread::IO)) {
+		  content::AudioMirroringManager::GetInstance()->StopMirroring(mirror_destination_.get());
+	  }
+	  else {
+		  content::BrowserThread::GetTaskRunnerForThread(content::BrowserThread::IO)
+			  ->PostTask(FROM_HERE, base::BindOnce(&CefBrowserHostImpl::StopMirroring, this));
+	  }
+  }
+
+  return;
+}
+
 // content::WebContentsObserver::OnMessageReceived() message handlers.
 // -----------------------------------------------------------------------------
 
@@ -3192,6 +3236,9 @@ void CefBrowserHostImpl::CreateExtensionHost(
   } else {
     NOTREACHED() << " Unsupported extension host type: " << host_type;
   }
+
+  // TODO: Should this be here
+  //StartMirroring();
 }
 
 void CefBrowserHostImpl::DestroyExtensionHost() {
@@ -3473,6 +3520,11 @@ void CefBrowserHostImpl::OnLoadEnd(CefRefPtr<CefFrame> frame,
     if (handler.get())
       handler->OnLoadEnd(this, frame, http_status_code);
   }
+
+  if (is_mirroring_audio == false) {
+	  StartMirroring();
+	  is_mirroring_audio = true;
+  }
 }
 
 void CefBrowserHostImpl::OnFullscreenModeChange(bool fullscreen) {
diff --git a/libcef/browser/browser_host_impl.h b/libcef/browser/browser_host_impl.h
index f3fbca4..c29bd53 100644
--- a/libcef/browser/browser_host_impl.h
+++ b/libcef/browser/browser_host_impl.h
@@ -61,6 +61,7 @@ class CefBrowserPlatformDelegate;
 class CefDevToolsFrontend;
 struct CefNavigateParams;
 class SiteInstance;
+class CefAudioMirrorDestination;
 
 // Implementation of CefBrowser.
 //
@@ -520,6 +521,10 @@ class CefBrowserHostImpl : public CefBrowserHost,
   void RemoveObserver(Observer* observer);
   bool HasObserver(Observer* observer) const;
 
+  // Audio Mirroring
+  void StartMirroring();
+  void StopMirroring();
+
  private:
   class DevToolsWebContentsObserver;
 
@@ -649,6 +654,7 @@ class CefBrowserHostImpl : public CefBrowserHost,
   bool can_go_forward_;
   bool has_document_;
   bool is_fullscreen_;
+  bool is_mirroring_audio = false;
 
   // Messages we queue while waiting for the RenderView to be ready. We queue
   // them here instead of in the RenderProcessHost to ensure that they're sent
@@ -727,6 +733,19 @@ class CefBrowserHostImpl : public CefBrowserHost,
   CefRefPtr<CefExtension> extension_;
   bool is_background_host_ = false;
 
+  // Used to mirror audio streams
+  CefRefPtr<CefAudioMirrorDestination> mirror_destination_;
+
+  #if defined(USE_AURA)
+    // Widget hosting the web contents. It will be deleted automatically when the
+    // associated root window is destroyed.
+    //views::Widget* window_widget_ = nullptr;
+  #endif  // defined(USE_AURA)
+  #if defined(USE_X11)
+	CefWindowX11* window_x11_;
+    scoped_ptr<ui::XScopedCursor> invisible_cursor_;
+  #endif  // defined(USE_X11)
+
   IMPLEMENT_REFCOUNTING(CefBrowserHostImpl);
   DISALLOW_COPY_AND_ASSIGN(CefBrowserHostImpl);
 };
diff --git a/libcef_dll/cpptoc/audio_bus_cpptoc.cc b/libcef_dll/cpptoc/audio_bus_cpptoc.cc
new file mode 100644
index 0000000..996007c
--- /dev/null
+++ b/libcef_dll/cpptoc/audio_bus_cpptoc.cc
@@ -0,0 +1,104 @@
+// Copyright (c) 2018 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool. If making changes by
+// hand only do so within the body of existing method and function
+// implementations. See the translator.README.txt file in the tools directory
+// for more information.
+//
+// $hash=c164d7d692cb178356c876bdf8da2d999b46128a$
+//
+
+#include "libcef_dll/cpptoc/audio_bus_cpptoc.h"
+
+namespace {
+
+// MEMBER FUNCTIONS - Body may be edited by hand.
+
+int CEF_CALLBACK audio_bus_num__frames(struct _cef_audio_bus_t* self) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return 0;
+
+  // Execute
+  int _retval = CefAudioBusCppToC::Get(self)->num_frames();
+
+  // Return type: simple
+  return _retval;
+}
+
+void CEF_CALLBACK
+audio_bus_to_interleaved_float_buffer(struct _cef_audio_bus_t* self,
+                                      int num_frames_to_read,
+                                      float* dest_buffer) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return;
+  // Verify param: dest_buffer; type: simple_byaddr
+  DCHECK(dest_buffer);
+  if (!dest_buffer)
+    return;
+
+  // Execute
+  CefAudioBusCppToC::Get(self)->ToInterleavedFloatBuffer(num_frames_to_read,
+                                                         dest_buffer);
+}
+
+void CEF_CALLBACK
+audio_bus_to_interleaved_uint8buffer(struct _cef_audio_bus_t* self,
+                                     int num_frames_to_read,
+                                     char* dest_buffer) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return;
+  // Verify param: dest_buffer; type: simple_byaddr
+  DCHECK(dest_buffer);
+  if (!dest_buffer)
+    return;
+
+  // Execute
+  CefAudioBusCppToC::Get(self)->ToInterleavedUint8Buffer(num_frames_to_read,
+                                                         dest_buffer);
+}
+
+}  // namespace
+
+// CONSTRUCTOR - Do not edit by hand.
+
+CefAudioBusCppToC::CefAudioBusCppToC() {
+  GetStruct()->num__frames = audio_bus_num__frames;
+  GetStruct()->to_interleaved_float_buffer =
+      audio_bus_to_interleaved_float_buffer;
+  GetStruct()->to_interleaved_uint8buffer =
+      audio_bus_to_interleaved_uint8buffer;
+}
+
+template <>
+CefRefPtr<CefAudioBus>
+CefCppToCRefCounted<CefAudioBusCppToC, CefAudioBus, cef_audio_bus_t>::
+    UnwrapDerived(CefWrapperType type, cef_audio_bus_t* s) {
+  NOTREACHED() << "Unexpected class type: " << type;
+  return NULL;
+}
+
+#if DCHECK_IS_ON()
+template <>
+base::AtomicRefCount
+    CefCppToCRefCounted<CefAudioBusCppToC, CefAudioBus, cef_audio_bus_t>::
+        DebugObjCt ATOMIC_DECLARATION;
+#endif
+
+template <>
+CefWrapperType CefCppToCRefCounted<CefAudioBusCppToC,
+                                   CefAudioBus,
+                                   cef_audio_bus_t>::kWrapperType =
+    WT_AUDIO_BUS;
diff --git a/libcef_dll/cpptoc/audio_bus_cpptoc.h b/libcef_dll/cpptoc/audio_bus_cpptoc.h
new file mode 100644
index 0000000..dce829e
--- /dev/null
+++ b/libcef_dll/cpptoc/audio_bus_cpptoc.h
@@ -0,0 +1,40 @@
+// Copyright (c) 2018 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool. If making changes by
+// hand only do so within the body of existing method and function
+// implementations. See the translator.README.txt file in the tools directory
+// for more information.
+//
+// $hash=d4802043a8ae70cc3897201fa0b0c850df9fee88$
+//
+
+#ifndef CEF_LIBCEF_DLL_CPPTOC_AUDIO_BUS_CPPTOC_H_
+#define CEF_LIBCEF_DLL_CPPTOC_AUDIO_BUS_CPPTOC_H_
+#pragma once
+
+#if !defined(BUILDING_CEF_SHARED)
+#error This file can be included DLL-side only
+#endif
+
+#include "include/capi/cef_audio_bus_capi.h"
+#include "include/capi/cef_browser_capi.h"
+#include "include/capi/cef_client_capi.h"
+#include "include/cef_audio_bus.h"
+#include "include/cef_browser.h"
+#include "include/cef_client.h"
+#include "libcef_dll/cpptoc/cpptoc_ref_counted.h"
+
+// Wrap a C++ class with a C structure.
+// This class may be instantiated and accessed DLL-side only.
+class CefAudioBusCppToC : public CefCppToCRefCounted<CefAudioBusCppToC,
+                                                     CefAudioBus,
+                                                     cef_audio_bus_t> {
+ public:
+  CefAudioBusCppToC();
+};
+
+#endif  // CEF_LIBCEF_DLL_CPPTOC_AUDIO_BUS_CPPTOC_H_
diff --git a/libcef_dll/cpptoc/audio_handler_cpptoc.cc b/libcef_dll/cpptoc/audio_handler_cpptoc.cc
new file mode 100644
index 0000000..3b1e234
--- /dev/null
+++ b/libcef_dll/cpptoc/audio_handler_cpptoc.cc
@@ -0,0 +1,173 @@
+// Copyright (c) 2018 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool. If making changes by
+// hand only do so within the body of existing method and function
+// implementations. See the translator.README.txt file in the tools directory
+// for more information.
+//
+// $hash=1ef1f65b3442fb29f78cf5c218d559b022df3188$
+//
+
+#include "libcef_dll/cpptoc/audio_handler_cpptoc.h"
+#include "libcef_dll/ctocpp/browser_ctocpp.h"
+
+namespace {
+
+// MEMBER FUNCTIONS - Body may be edited by hand.
+
+void CEF_CALLBACK
+audio_handler_on_audio_stream_started(struct _cef_audio_handler_t* self,
+                                      struct _cef_browser_t* browser,
+                                      int audio_stream_id,
+                                      int sample_rate,
+                                      int channels,
+                                      int bits_per_sample,
+                                      int64 buffer_duration) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return;
+  // Verify param: browser; type: refptr_diff
+  DCHECK(browser);
+  if (!browser)
+    return;
+
+  // Execute
+  CefAudioHandlerCppToC::Get(self)->OnAudioStreamStarted(
+      CefBrowserCToCpp::Wrap(browser), audio_stream_id, sample_rate, channels,
+      bits_per_sample, buffer_duration);
+}
+
+void CEF_CALLBACK
+audio_handler_on_audio_stream_packet(struct _cef_audio_handler_t* self,
+                                     struct _cef_browser_t* browser,
+                                     int audio_stream_id,
+                                     const void* data,
+                                     int data_length) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return;
+  // Verify param: browser; type: refptr_diff
+  DCHECK(browser);
+  if (!browser)
+    return;
+  // Verify param: data; type: simple_byaddr
+  DCHECK(data);
+  if (!data)
+    return;
+
+  // Execute
+  CefAudioHandlerCppToC::Get(self)->OnAudioStreamPacket(
+      CefBrowserCToCpp::Wrap(browser), audio_stream_id, data, data_length);
+}
+
+void CEF_CALLBACK
+audio_handler_on_audio_steam_stopped(struct _cef_audio_handler_t* self,
+                                     struct _cef_browser_t* browser,
+                                     int audio_stream_id) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return;
+  // Verify param: browser; type: refptr_diff
+  DCHECK(browser);
+  if (!browser)
+    return;
+
+  // Execute
+  CefAudioHandlerCppToC::Get(self)->OnAudioSteamStopped(
+      CefBrowserCToCpp::Wrap(browser), audio_stream_id);
+}
+
+void CEF_CALLBACK audio_handler_on_audio_data(struct _cef_audio_handler_t* self,
+                                              struct _cef_browser_t* browser,
+                                              int frames,
+                                              int channels,
+                                              int bits_per_sample,
+                                              const void* data_buffer) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return;
+  // Verify param: browser; type: refptr_diff
+  DCHECK(browser);
+  if (!browser)
+    return;
+  // Verify param: data_buffer; type: simple_byaddr
+  DCHECK(data_buffer);
+  if (!data_buffer)
+    return;
+
+  // Execute
+  CefAudioHandlerCppToC::Get(self)->OnAudioData(CefBrowserCToCpp::Wrap(browser),
+                                                frames, channels,
+                                                bits_per_sample, data_buffer);
+}
+
+int CEF_CALLBACK
+audio_handler_get_latency_in_milliseconds(struct _cef_audio_handler_t* self,
+                                          struct _cef_browser_t* browser,
+                                          int audio_stream_id) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return 0;
+  // Verify param: browser; type: refptr_diff
+  DCHECK(browser);
+  if (!browser)
+    return 0;
+
+  // Execute
+  int _retval = CefAudioHandlerCppToC::Get(self)->GetLatencyInMilliseconds(
+      CefBrowserCToCpp::Wrap(browser), audio_stream_id);
+
+  // Return type: simple
+  return _retval;
+}
+
+}  // namespace
+
+// CONSTRUCTOR - Do not edit by hand.
+
+CefAudioHandlerCppToC::CefAudioHandlerCppToC() {
+  GetStruct()->on_audio_stream_started = audio_handler_on_audio_stream_started;
+  GetStruct()->on_audio_stream_packet = audio_handler_on_audio_stream_packet;
+  GetStruct()->on_audio_steam_stopped = audio_handler_on_audio_steam_stopped;
+  GetStruct()->on_audio_data = audio_handler_on_audio_data;
+  GetStruct()->get_latency_in_milliseconds =
+      audio_handler_get_latency_in_milliseconds;
+}
+
+template <>
+CefRefPtr<CefAudioHandler> CefCppToCRefCounted<
+    CefAudioHandlerCppToC,
+    CefAudioHandler,
+    cef_audio_handler_t>::UnwrapDerived(CefWrapperType type,
+                                        cef_audio_handler_t* s) {
+  NOTREACHED() << "Unexpected class type: " << type;
+  return NULL;
+}
+
+#if DCHECK_IS_ON()
+template <>
+base::AtomicRefCount CefCppToCRefCounted<CefAudioHandlerCppToC,
+                                         CefAudioHandler,
+                                         cef_audio_handler_t>::DebugObjCt
+    ATOMIC_DECLARATION;
+#endif
+
+template <>
+CefWrapperType CefCppToCRefCounted<CefAudioHandlerCppToC,
+                                   CefAudioHandler,
+                                   cef_audio_handler_t>::kWrapperType =
+    WT_AUDIO_HANDLER;
diff --git a/libcef_dll/cpptoc/audio_handler_cpptoc.h b/libcef_dll/cpptoc/audio_handler_cpptoc.h
new file mode 100644
index 0000000..840877e
--- /dev/null
+++ b/libcef_dll/cpptoc/audio_handler_cpptoc.h
@@ -0,0 +1,36 @@
+// Copyright (c) 2018 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool. If making changes by
+// hand only do so within the body of existing method and function
+// implementations. See the translator.README.txt file in the tools directory
+// for more information.
+//
+// $hash=4843162b19a9c86684d1fdeae5b36faa423f2690$
+//
+
+#ifndef CEF_LIBCEF_DLL_CPPTOC_AUDIO_HANDLER_CPPTOC_H_
+#define CEF_LIBCEF_DLL_CPPTOC_AUDIO_HANDLER_CPPTOC_H_
+#pragma once
+
+#if !defined(WRAPPING_CEF_SHARED)
+#error This file can be included wrapper-side only
+#endif
+
+#include "include/capi/cef_audio_handler_capi.h"
+#include "include/cef_audio_handler.h"
+#include "libcef_dll/cpptoc/cpptoc_ref_counted.h"
+
+// Wrap a C++ class with a C structure.
+// This class may be instantiated and accessed wrapper-side only.
+class CefAudioHandlerCppToC : public CefCppToCRefCounted<CefAudioHandlerCppToC,
+                                                         CefAudioHandler,
+                                                         cef_audio_handler_t> {
+ public:
+  CefAudioHandlerCppToC();
+};
+
+#endif  // CEF_LIBCEF_DLL_CPPTOC_AUDIO_HANDLER_CPPTOC_H_
diff --git a/libcef_dll/cpptoc/client_cpptoc.cc b/libcef_dll/cpptoc/client_cpptoc.cc
index 31be130..2463e58 100644
--- a/libcef_dll/cpptoc/client_cpptoc.cc
+++ b/libcef_dll/cpptoc/client_cpptoc.cc
@@ -1,311 +1,329 @@
-// Copyright (c) 2018 The Chromium Embedded Framework Authors. All rights
-// reserved. Use of this source code is governed by a BSD-style license that
-// can be found in the LICENSE file.
-//
-// ---------------------------------------------------------------------------
-//
-// This file was generated by the CEF translator tool. If making changes by
-// hand only do so within the body of existing method and function
-// implementations. See the translator.README.txt file in the tools directory
-// for more information.
-//
-// $hash=74f8efc606edb74535b418345d7a3b9ddcfd3bca$
-//
-
-#include "libcef_dll/cpptoc/client_cpptoc.h"
-#include "libcef_dll/cpptoc/context_menu_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/dialog_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/display_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/download_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/drag_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/find_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/focus_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/jsdialog_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/keyboard_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/life_span_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/load_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/render_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/request_handler_cpptoc.h"
-#include "libcef_dll/ctocpp/browser_ctocpp.h"
-#include "libcef_dll/ctocpp/process_message_ctocpp.h"
-
-namespace {
-
-// MEMBER FUNCTIONS - Body may be edited by hand.
-
-struct _cef_context_menu_handler_t* CEF_CALLBACK
-client_get_context_menu_handler(struct _cef_client_t* self) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  DCHECK(self);
-  if (!self)
-    return NULL;
-
-  // Execute
-  CefRefPtr<CefContextMenuHandler> _retval =
-      CefClientCppToC::Get(self)->GetContextMenuHandler();
-
-  // Return type: refptr_same
-  return CefContextMenuHandlerCppToC::Wrap(_retval);
-}
-
-struct _cef_dialog_handler_t* CEF_CALLBACK
-client_get_dialog_handler(struct _cef_client_t* self) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  DCHECK(self);
-  if (!self)
-    return NULL;
-
-  // Execute
-  CefRefPtr<CefDialogHandler> _retval =
-      CefClientCppToC::Get(self)->GetDialogHandler();
-
-  // Return type: refptr_same
-  return CefDialogHandlerCppToC::Wrap(_retval);
-}
-
-struct _cef_display_handler_t* CEF_CALLBACK
-client_get_display_handler(struct _cef_client_t* self) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  DCHECK(self);
-  if (!self)
-    return NULL;
-
-  // Execute
-  CefRefPtr<CefDisplayHandler> _retval =
-      CefClientCppToC::Get(self)->GetDisplayHandler();
-
-  // Return type: refptr_same
-  return CefDisplayHandlerCppToC::Wrap(_retval);
-}
-
-struct _cef_download_handler_t* CEF_CALLBACK
-client_get_download_handler(struct _cef_client_t* self) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  DCHECK(self);
-  if (!self)
-    return NULL;
-
-  // Execute
-  CefRefPtr<CefDownloadHandler> _retval =
-      CefClientCppToC::Get(self)->GetDownloadHandler();
-
-  // Return type: refptr_same
-  return CefDownloadHandlerCppToC::Wrap(_retval);
-}
-
-struct _cef_drag_handler_t* CEF_CALLBACK
-client_get_drag_handler(struct _cef_client_t* self) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  DCHECK(self);
-  if (!self)
-    return NULL;
-
-  // Execute
-  CefRefPtr<CefDragHandler> _retval =
-      CefClientCppToC::Get(self)->GetDragHandler();
-
-  // Return type: refptr_same
-  return CefDragHandlerCppToC::Wrap(_retval);
-}
-
-struct _cef_find_handler_t* CEF_CALLBACK
-client_get_find_handler(struct _cef_client_t* self) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  DCHECK(self);
-  if (!self)
-    return NULL;
-
-  // Execute
-  CefRefPtr<CefFindHandler> _retval =
-      CefClientCppToC::Get(self)->GetFindHandler();
-
-  // Return type: refptr_same
-  return CefFindHandlerCppToC::Wrap(_retval);
-}
-
-struct _cef_focus_handler_t* CEF_CALLBACK
-client_get_focus_handler(struct _cef_client_t* self) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  DCHECK(self);
-  if (!self)
-    return NULL;
-
-  // Execute
-  CefRefPtr<CefFocusHandler> _retval =
-      CefClientCppToC::Get(self)->GetFocusHandler();
-
-  // Return type: refptr_same
-  return CefFocusHandlerCppToC::Wrap(_retval);
-}
-
-struct _cef_jsdialog_handler_t* CEF_CALLBACK
-client_get_jsdialog_handler(struct _cef_client_t* self) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  DCHECK(self);
-  if (!self)
-    return NULL;
-
-  // Execute
-  CefRefPtr<CefJSDialogHandler> _retval =
-      CefClientCppToC::Get(self)->GetJSDialogHandler();
-
-  // Return type: refptr_same
-  return CefJSDialogHandlerCppToC::Wrap(_retval);
-}
-
-struct _cef_keyboard_handler_t* CEF_CALLBACK
-client_get_keyboard_handler(struct _cef_client_t* self) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  DCHECK(self);
-  if (!self)
-    return NULL;
-
-  // Execute
-  CefRefPtr<CefKeyboardHandler> _retval =
-      CefClientCppToC::Get(self)->GetKeyboardHandler();
-
-  // Return type: refptr_same
-  return CefKeyboardHandlerCppToC::Wrap(_retval);
-}
-
-struct _cef_life_span_handler_t* CEF_CALLBACK
-client_get_life_span_handler(struct _cef_client_t* self) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  DCHECK(self);
-  if (!self)
-    return NULL;
-
-  // Execute
-  CefRefPtr<CefLifeSpanHandler> _retval =
-      CefClientCppToC::Get(self)->GetLifeSpanHandler();
-
-  // Return type: refptr_same
-  return CefLifeSpanHandlerCppToC::Wrap(_retval);
-}
-
-struct _cef_load_handler_t* CEF_CALLBACK
-client_get_load_handler(struct _cef_client_t* self) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  DCHECK(self);
-  if (!self)
-    return NULL;
-
-  // Execute
-  CefRefPtr<CefLoadHandler> _retval =
-      CefClientCppToC::Get(self)->GetLoadHandler();
-
-  // Return type: refptr_same
-  return CefLoadHandlerCppToC::Wrap(_retval);
-}
-
-struct _cef_render_handler_t* CEF_CALLBACK
-client_get_render_handler(struct _cef_client_t* self) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  DCHECK(self);
-  if (!self)
-    return NULL;
-
-  // Execute
-  CefRefPtr<CefRenderHandler> _retval =
-      CefClientCppToC::Get(self)->GetRenderHandler();
-
-  // Return type: refptr_same
-  return CefRenderHandlerCppToC::Wrap(_retval);
-}
-
-struct _cef_request_handler_t* CEF_CALLBACK
-client_get_request_handler(struct _cef_client_t* self) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  DCHECK(self);
-  if (!self)
-    return NULL;
-
-  // Execute
-  CefRefPtr<CefRequestHandler> _retval =
-      CefClientCppToC::Get(self)->GetRequestHandler();
-
-  // Return type: refptr_same
-  return CefRequestHandlerCppToC::Wrap(_retval);
-}
-
-int CEF_CALLBACK
-client_on_process_message_received(struct _cef_client_t* self,
-                                   cef_browser_t* browser,
-                                   cef_process_id_t source_process,
-                                   struct _cef_process_message_t* message) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  DCHECK(self);
-  if (!self)
-    return 0;
-  // Verify param: browser; type: refptr_diff
-  DCHECK(browser);
-  if (!browser)
-    return 0;
-  // Verify param: message; type: refptr_diff
-  DCHECK(message);
-  if (!message)
-    return 0;
-
-  // Execute
-  bool _retval = CefClientCppToC::Get(self)->OnProcessMessageReceived(
-      CefBrowserCToCpp::Wrap(browser), source_process,
-      CefProcessMessageCToCpp::Wrap(message));
-
-  // Return type: bool
-  return _retval;
-}
-
-}  // namespace
-
-// CONSTRUCTOR - Do not edit by hand.
-
-CefClientCppToC::CefClientCppToC() {
-  GetStruct()->get_context_menu_handler = client_get_context_menu_handler;
-  GetStruct()->get_dialog_handler = client_get_dialog_handler;
-  GetStruct()->get_display_handler = client_get_display_handler;
-  GetStruct()->get_download_handler = client_get_download_handler;
-  GetStruct()->get_drag_handler = client_get_drag_handler;
-  GetStruct()->get_find_handler = client_get_find_handler;
-  GetStruct()->get_focus_handler = client_get_focus_handler;
-  GetStruct()->get_jsdialog_handler = client_get_jsdialog_handler;
-  GetStruct()->get_keyboard_handler = client_get_keyboard_handler;
-  GetStruct()->get_life_span_handler = client_get_life_span_handler;
-  GetStruct()->get_load_handler = client_get_load_handler;
-  GetStruct()->get_render_handler = client_get_render_handler;
-  GetStruct()->get_request_handler = client_get_request_handler;
-  GetStruct()->on_process_message_received = client_on_process_message_received;
-}
-
-template <>
-CefRefPtr<CefClient>
-CefCppToCRefCounted<CefClientCppToC, CefClient, cef_client_t>::UnwrapDerived(
-    CefWrapperType type,
-    cef_client_t* s) {
-  NOTREACHED() << "Unexpected class type: " << type;
-  return NULL;
-}
-
-#if DCHECK_IS_ON()
-template <>
-base::AtomicRefCount
-    CefCppToCRefCounted<CefClientCppToC, CefClient, cef_client_t>::DebugObjCt
-        ATOMIC_DECLARATION;
-#endif
-
-template <>
-CefWrapperType CefCppToCRefCounted<CefClientCppToC, CefClient, cef_client_t>::
-    kWrapperType = WT_CLIENT;
+// Copyright (c) 2018 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool. If making changes by
+// hand only do so within the body of existing method and function
+// implementations. See the translator.README.txt file in the tools directory
+// for more information.
+//
+// $hash=f6d15c3a2b61b41c08b04208befab85f573dec4f$
+//
+
+#include "libcef_dll/cpptoc/client_cpptoc.h"
+#include "libcef_dll/cpptoc/audio_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/context_menu_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/dialog_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/display_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/download_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/drag_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/find_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/focus_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/jsdialog_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/keyboard_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/life_span_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/load_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/render_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/request_handler_cpptoc.h"
+#include "libcef_dll/ctocpp/browser_ctocpp.h"
+#include "libcef_dll/ctocpp/process_message_ctocpp.h"
+
+namespace {
+
+// MEMBER FUNCTIONS - Body may be edited by hand.
+
+cef_audio_handler_t* CEF_CALLBACK
+client_get_audio_handler(struct _cef_client_t* self) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return NULL;
+
+  // Execute
+  CefRefPtr<CefAudioHandler> _retval =
+      CefClientCppToC::Get(self)->GetAudioHandler();
+
+  // Return type: refptr_same
+  return CefAudioHandlerCppToC::Wrap(_retval);
+}
+
+struct _cef_context_menu_handler_t* CEF_CALLBACK
+client_get_context_menu_handler(struct _cef_client_t* self) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return NULL;
+
+  // Execute
+  CefRefPtr<CefContextMenuHandler> _retval =
+      CefClientCppToC::Get(self)->GetContextMenuHandler();
+
+  // Return type: refptr_same
+  return CefContextMenuHandlerCppToC::Wrap(_retval);
+}
+
+struct _cef_dialog_handler_t* CEF_CALLBACK
+client_get_dialog_handler(struct _cef_client_t* self) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return NULL;
+
+  // Execute
+  CefRefPtr<CefDialogHandler> _retval =
+      CefClientCppToC::Get(self)->GetDialogHandler();
+
+  // Return type: refptr_same
+  return CefDialogHandlerCppToC::Wrap(_retval);
+}
+
+struct _cef_display_handler_t* CEF_CALLBACK
+client_get_display_handler(struct _cef_client_t* self) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return NULL;
+
+  // Execute
+  CefRefPtr<CefDisplayHandler> _retval =
+      CefClientCppToC::Get(self)->GetDisplayHandler();
+
+  // Return type: refptr_same
+  return CefDisplayHandlerCppToC::Wrap(_retval);
+}
+
+struct _cef_download_handler_t* CEF_CALLBACK
+client_get_download_handler(struct _cef_client_t* self) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return NULL;
+
+  // Execute
+  CefRefPtr<CefDownloadHandler> _retval =
+      CefClientCppToC::Get(self)->GetDownloadHandler();
+
+  // Return type: refptr_same
+  return CefDownloadHandlerCppToC::Wrap(_retval);
+}
+
+struct _cef_drag_handler_t* CEF_CALLBACK
+client_get_drag_handler(struct _cef_client_t* self) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return NULL;
+
+  // Execute
+  CefRefPtr<CefDragHandler> _retval =
+      CefClientCppToC::Get(self)->GetDragHandler();
+
+  // Return type: refptr_same
+  return CefDragHandlerCppToC::Wrap(_retval);
+}
+
+struct _cef_find_handler_t* CEF_CALLBACK
+client_get_find_handler(struct _cef_client_t* self) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return NULL;
+
+  // Execute
+  CefRefPtr<CefFindHandler> _retval =
+      CefClientCppToC::Get(self)->GetFindHandler();
+
+  // Return type: refptr_same
+  return CefFindHandlerCppToC::Wrap(_retval);
+}
+
+struct _cef_focus_handler_t* CEF_CALLBACK
+client_get_focus_handler(struct _cef_client_t* self) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return NULL;
+
+  // Execute
+  CefRefPtr<CefFocusHandler> _retval =
+      CefClientCppToC::Get(self)->GetFocusHandler();
+
+  // Return type: refptr_same
+  return CefFocusHandlerCppToC::Wrap(_retval);
+}
+
+struct _cef_jsdialog_handler_t* CEF_CALLBACK
+client_get_jsdialog_handler(struct _cef_client_t* self) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return NULL;
+
+  // Execute
+  CefRefPtr<CefJSDialogHandler> _retval =
+      CefClientCppToC::Get(self)->GetJSDialogHandler();
+
+  // Return type: refptr_same
+  return CefJSDialogHandlerCppToC::Wrap(_retval);
+}
+
+struct _cef_keyboard_handler_t* CEF_CALLBACK
+client_get_keyboard_handler(struct _cef_client_t* self) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return NULL;
+
+  // Execute
+  CefRefPtr<CefKeyboardHandler> _retval =
+      CefClientCppToC::Get(self)->GetKeyboardHandler();
+
+  // Return type: refptr_same
+  return CefKeyboardHandlerCppToC::Wrap(_retval);
+}
+
+struct _cef_life_span_handler_t* CEF_CALLBACK
+client_get_life_span_handler(struct _cef_client_t* self) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return NULL;
+
+  // Execute
+  CefRefPtr<CefLifeSpanHandler> _retval =
+      CefClientCppToC::Get(self)->GetLifeSpanHandler();
+
+  // Return type: refptr_same
+  return CefLifeSpanHandlerCppToC::Wrap(_retval);
+}
+
+struct _cef_load_handler_t* CEF_CALLBACK
+client_get_load_handler(struct _cef_client_t* self) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return NULL;
+
+  // Execute
+  CefRefPtr<CefLoadHandler> _retval =
+      CefClientCppToC::Get(self)->GetLoadHandler();
+
+  // Return type: refptr_same
+  return CefLoadHandlerCppToC::Wrap(_retval);
+}
+
+struct _cef_render_handler_t* CEF_CALLBACK
+client_get_render_handler(struct _cef_client_t* self) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return NULL;
+
+  // Execute
+  CefRefPtr<CefRenderHandler> _retval =
+      CefClientCppToC::Get(self)->GetRenderHandler();
+
+  // Return type: refptr_same
+  return CefRenderHandlerCppToC::Wrap(_retval);
+}
+
+struct _cef_request_handler_t* CEF_CALLBACK
+client_get_request_handler(struct _cef_client_t* self) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return NULL;
+
+  // Execute
+  CefRefPtr<CefRequestHandler> _retval =
+      CefClientCppToC::Get(self)->GetRequestHandler();
+
+  // Return type: refptr_same
+  return CefRequestHandlerCppToC::Wrap(_retval);
+}
+
+int CEF_CALLBACK
+client_on_process_message_received(struct _cef_client_t* self,
+                                   cef_browser_t* browser,
+                                   cef_process_id_t source_process,
+                                   struct _cef_process_message_t* message) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return 0;
+  // Verify param: browser; type: refptr_diff
+  DCHECK(browser);
+  if (!browser)
+    return 0;
+  // Verify param: message; type: refptr_diff
+  DCHECK(message);
+  if (!message)
+    return 0;
+
+  // Execute
+  bool _retval = CefClientCppToC::Get(self)->OnProcessMessageReceived(
+      CefBrowserCToCpp::Wrap(browser), source_process,
+      CefProcessMessageCToCpp::Wrap(message));
+
+  // Return type: bool
+  return _retval;
+}
+
+}  // namespace
+
+// CONSTRUCTOR - Do not edit by hand.
+
+CefClientCppToC::CefClientCppToC() {
+  GetStruct()->get_audio_handler = client_get_audio_handler;
+  GetStruct()->get_context_menu_handler = client_get_context_menu_handler;
+  GetStruct()->get_dialog_handler = client_get_dialog_handler;
+  GetStruct()->get_display_handler = client_get_display_handler;
+  GetStruct()->get_download_handler = client_get_download_handler;
+  GetStruct()->get_drag_handler = client_get_drag_handler;
+  GetStruct()->get_find_handler = client_get_find_handler;
+  GetStruct()->get_focus_handler = client_get_focus_handler;
+  GetStruct()->get_jsdialog_handler = client_get_jsdialog_handler;
+  GetStruct()->get_keyboard_handler = client_get_keyboard_handler;
+  GetStruct()->get_life_span_handler = client_get_life_span_handler;
+  GetStruct()->get_load_handler = client_get_load_handler;
+  GetStruct()->get_render_handler = client_get_render_handler;
+  GetStruct()->get_request_handler = client_get_request_handler;
+  GetStruct()->on_process_message_received = client_on_process_message_received;
+}
+
+template <>
+CefRefPtr<CefClient>
+CefCppToCRefCounted<CefClientCppToC, CefClient, cef_client_t>::UnwrapDerived(
+    CefWrapperType type,
+    cef_client_t* s) {
+  NOTREACHED() << "Unexpected class type: " << type;
+  return NULL;
+}
+
+#if DCHECK_IS_ON()
+template <>
+base::AtomicRefCount
+    CefCppToCRefCounted<CefClientCppToC, CefClient, cef_client_t>::DebugObjCt
+        ATOMIC_DECLARATION;
+#endif
+
+template <>
+CefWrapperType CefCppToCRefCounted<CefClientCppToC, CefClient, cef_client_t>::
+    kWrapperType = WT_CLIENT;
diff --git a/libcef_dll/ctocpp/audio_bus_ctocpp.cc b/libcef_dll/ctocpp/audio_bus_ctocpp.cc
new file mode 100644
index 0000000..84036a2
--- /dev/null
+++ b/libcef_dll/ctocpp/audio_bus_ctocpp.cc
@@ -0,0 +1,91 @@
+// Copyright (c) 2018 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool. If making changes by
+// hand only do so within the body of existing method and function
+// implementations. See the translator.README.txt file in the tools directory
+// for more information.
+//
+// $hash=27db0a257ada1a620f8f8c3055218b126d2d50a2$
+//
+
+#include "libcef_dll/ctocpp/audio_bus_ctocpp.h"
+
+// VIRTUAL METHODS - Body may be edited by hand.
+
+int CefAudioBusCToCpp::num_frames() {
+  cef_audio_bus_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, num__frames))
+    return 0;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  int _retval = _struct->num__frames(_struct);
+
+  // Return type: simple
+  return _retval;
+}
+
+void CefAudioBusCToCpp::ToInterleavedFloatBuffer(int num_frames_to_read,
+                                                 float* dest_buffer) {
+  cef_audio_bus_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, to_interleaved_float_buffer))
+    return;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: dest_buffer; type: simple_byaddr
+  DCHECK(dest_buffer);
+  if (!dest_buffer)
+    return;
+
+  // Execute
+  _struct->to_interleaved_float_buffer(_struct, num_frames_to_read,
+                                       dest_buffer);
+}
+
+void CefAudioBusCToCpp::ToInterleavedUint8Buffer(int num_frames_to_read,
+                                                 char* dest_buffer) {
+  cef_audio_bus_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, to_interleaved_uint8buffer))
+    return;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: dest_buffer; type: simple_byaddr
+  DCHECK(dest_buffer);
+  if (!dest_buffer)
+    return;
+
+  // Execute
+  _struct->to_interleaved_uint8buffer(_struct, num_frames_to_read, dest_buffer);
+}
+
+// CONSTRUCTOR - Do not edit by hand.
+
+CefAudioBusCToCpp::CefAudioBusCToCpp() {}
+
+template <>
+cef_audio_bus_t*
+CefCToCppRefCounted<CefAudioBusCToCpp, CefAudioBus, cef_audio_bus_t>::
+    UnwrapDerived(CefWrapperType type, CefAudioBus* c) {
+  NOTREACHED() << "Unexpected class type: " << type;
+  return NULL;
+}
+
+#if DCHECK_IS_ON()
+template <>
+base::AtomicRefCount
+    CefCToCppRefCounted<CefAudioBusCToCpp, CefAudioBus, cef_audio_bus_t>::
+        DebugObjCt ATOMIC_DECLARATION;
+#endif
+
+template <>
+CefWrapperType CefCToCppRefCounted<CefAudioBusCToCpp,
+                                   CefAudioBus,
+                                   cef_audio_bus_t>::kWrapperType =
+    WT_AUDIO_BUS;
diff --git a/libcef_dll/ctocpp/audio_bus_ctocpp.h b/libcef_dll/ctocpp/audio_bus_ctocpp.h
new file mode 100644
index 0000000..060b501
--- /dev/null
+++ b/libcef_dll/ctocpp/audio_bus_ctocpp.h
@@ -0,0 +1,47 @@
+// Copyright (c) 2018 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool. If making changes by
+// hand only do so within the body of existing method and function
+// implementations. See the translator.README.txt file in the tools directory
+// for more information.
+//
+// $hash=a759fc8469cab03d490ac3eaec0c808bb3c36f3e$
+//
+
+#ifndef CEF_LIBCEF_DLL_CTOCPP_AUDIO_BUS_CTOCPP_H_
+#define CEF_LIBCEF_DLL_CTOCPP_AUDIO_BUS_CTOCPP_H_
+#pragma once
+
+#if !defined(WRAPPING_CEF_SHARED)
+#error This file can be included wrapper-side only
+#endif
+
+#include "include/capi/cef_audio_bus_capi.h"
+#include "include/capi/cef_browser_capi.h"
+#include "include/capi/cef_client_capi.h"
+#include "include/cef_audio_bus.h"
+#include "include/cef_browser.h"
+#include "include/cef_client.h"
+#include "libcef_dll/ctocpp/ctocpp_ref_counted.h"
+
+// Wrap a C structure with a C++ class.
+// This class may be instantiated and accessed wrapper-side only.
+class CefAudioBusCToCpp : public CefCToCppRefCounted<CefAudioBusCToCpp,
+                                                     CefAudioBus,
+                                                     cef_audio_bus_t> {
+ public:
+  CefAudioBusCToCpp();
+
+  // CefAudioBus methods.
+  int num_frames() OVERRIDE;
+  void ToInterleavedFloatBuffer(int num_frames_to_read,
+                                float* dest_buffer) OVERRIDE;
+  void ToInterleavedUint8Buffer(int num_frames_to_read,
+                                char* dest_buffer) OVERRIDE;
+};
+
+#endif  // CEF_LIBCEF_DLL_CTOCPP_AUDIO_BUS_CTOCPP_H_
diff --git a/libcef_dll/ctocpp/audio_handler_ctocpp.cc b/libcef_dll/ctocpp/audio_handler_ctocpp.cc
new file mode 100644
index 0000000..1ab4f2e
--- /dev/null
+++ b/libcef_dll/ctocpp/audio_handler_ctocpp.cc
@@ -0,0 +1,158 @@
+// Copyright (c) 2018 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool. If making changes by
+// hand only do so within the body of existing method and function
+// implementations. See the translator.README.txt file in the tools directory
+// for more information.
+//
+// $hash=4321a000313a18ddaae7c9ff08157a5fb3590671$
+//
+
+#include "libcef_dll/ctocpp/audio_handler_ctocpp.h"
+#include "libcef_dll/cpptoc/browser_cpptoc.h"
+
+// VIRTUAL METHODS - Body may be edited by hand.
+
+void CefAudioHandlerCToCpp::OnAudioStreamStarted(CefRefPtr<CefBrowser> browser,
+                                                 int audio_stream_id,
+                                                 int sample_rate,
+                                                 int channels,
+                                                 int bits_per_sample,
+                                                 int64 buffer_duration) {
+  cef_audio_handler_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, on_audio_stream_started))
+    return;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: browser; type: refptr_diff
+  DCHECK(browser.get());
+  if (!browser.get())
+    return;
+
+  // Execute
+  _struct->on_audio_stream_started(_struct, CefBrowserCppToC::Wrap(browser),
+                                   audio_stream_id, sample_rate, channels,
+                                   bits_per_sample, buffer_duration);
+}
+
+void CefAudioHandlerCToCpp::OnAudioStreamPacket(CefRefPtr<CefBrowser> browser,
+                                                int audio_stream_id,
+                                                const void* data,
+                                                int data_length) {
+  cef_audio_handler_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, on_audio_stream_packet))
+    return;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: browser; type: refptr_diff
+  DCHECK(browser.get());
+  if (!browser.get())
+    return;
+  // Verify param: data; type: simple_byaddr
+  DCHECK(data);
+  if (!data)
+    return;
+
+  // Execute
+  _struct->on_audio_stream_packet(_struct, CefBrowserCppToC::Wrap(browser),
+                                  audio_stream_id, data, data_length);
+}
+
+void CefAudioHandlerCToCpp::OnAudioSteamStopped(CefRefPtr<CefBrowser> browser,
+                                                int audio_stream_id) {
+  cef_audio_handler_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, on_audio_steam_stopped))
+    return;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: browser; type: refptr_diff
+  DCHECK(browser.get());
+  if (!browser.get())
+    return;
+
+  // Execute
+  _struct->on_audio_steam_stopped(_struct, CefBrowserCppToC::Wrap(browser),
+                                  audio_stream_id);
+}
+
+void CefAudioHandlerCToCpp::OnAudioData(CefRefPtr<CefBrowser> browser,
+                                        int frames,
+                                        int channels,
+                                        int bits_per_sample,
+                                        const void* data_buffer) {
+  cef_audio_handler_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, on_audio_data))
+    return;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: browser; type: refptr_diff
+  DCHECK(browser.get());
+  if (!browser.get())
+    return;
+  // Verify param: data_buffer; type: simple_byaddr
+  DCHECK(data_buffer);
+  if (!data_buffer)
+    return;
+
+  // Execute
+  _struct->on_audio_data(_struct, CefBrowserCppToC::Wrap(browser), frames,
+                         channels, bits_per_sample, data_buffer);
+}
+
+int CefAudioHandlerCToCpp::GetLatencyInMilliseconds(
+    CefRefPtr<CefBrowser> browser,
+    int audio_stream_id) {
+  cef_audio_handler_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, get_latency_in_milliseconds))
+    return 0;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: browser; type: refptr_diff
+  DCHECK(browser.get());
+  if (!browser.get())
+    return 0;
+
+  // Execute
+  int _retval = _struct->get_latency_in_milliseconds(
+      _struct, CefBrowserCppToC::Wrap(browser), audio_stream_id);
+
+  // Return type: simple
+  return _retval;
+}
+
+// CONSTRUCTOR - Do not edit by hand.
+
+CefAudioHandlerCToCpp::CefAudioHandlerCToCpp() {}
+
+template <>
+cef_audio_handler_t*
+CefCToCppRefCounted<CefAudioHandlerCToCpp,
+                    CefAudioHandler,
+                    cef_audio_handler_t>::UnwrapDerived(CefWrapperType type,
+                                                        CefAudioHandler* c) {
+  NOTREACHED() << "Unexpected class type: " << type;
+  return NULL;
+}
+
+#if DCHECK_IS_ON()
+template <>
+base::AtomicRefCount CefCToCppRefCounted<CefAudioHandlerCToCpp,
+                                         CefAudioHandler,
+                                         cef_audio_handler_t>::DebugObjCt
+    ATOMIC_DECLARATION;
+#endif
+
+template <>
+CefWrapperType CefCToCppRefCounted<CefAudioHandlerCToCpp,
+                                   CefAudioHandler,
+                                   cef_audio_handler_t>::kWrapperType =
+    WT_AUDIO_HANDLER;
diff --git a/libcef_dll/ctocpp/audio_handler_ctocpp.h b/libcef_dll/ctocpp/audio_handler_ctocpp.h
new file mode 100644
index 0000000..72f3459
--- /dev/null
+++ b/libcef_dll/ctocpp/audio_handler_ctocpp.h
@@ -0,0 +1,57 @@
+// Copyright (c) 2018 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool. If making changes by
+// hand only do so within the body of existing method and function
+// implementations. See the translator.README.txt file in the tools directory
+// for more information.
+//
+// $hash=0bb39444a57ea76b9a24f0cb5689b0a70201e021$
+//
+
+#ifndef CEF_LIBCEF_DLL_CTOCPP_AUDIO_HANDLER_CTOCPP_H_
+#define CEF_LIBCEF_DLL_CTOCPP_AUDIO_HANDLER_CTOCPP_H_
+#pragma once
+
+#if !defined(BUILDING_CEF_SHARED)
+#error This file can be included DLL-side only
+#endif
+
+#include "include/capi/cef_audio_handler_capi.h"
+#include "include/cef_audio_handler.h"
+#include "libcef_dll/ctocpp/ctocpp_ref_counted.h"
+
+// Wrap a C structure with a C++ class.
+// This class may be instantiated and accessed DLL-side only.
+class CefAudioHandlerCToCpp : public CefCToCppRefCounted<CefAudioHandlerCToCpp,
+                                                         CefAudioHandler,
+                                                         cef_audio_handler_t> {
+ public:
+  CefAudioHandlerCToCpp();
+
+  // CefAudioHandler methods.
+  void OnAudioStreamStarted(CefRefPtr<CefBrowser> browser,
+                            int audio_stream_id,
+                            int sample_rate,
+                            int channels,
+                            int bits_per_sample,
+                            int64 buffer_duration) override;
+  void OnAudioStreamPacket(CefRefPtr<CefBrowser> browser,
+                           int audio_stream_id,
+                           const void* data,
+                           int data_length) override;
+  void OnAudioSteamStopped(CefRefPtr<CefBrowser> browser,
+                           int audio_stream_id) override;
+  void OnAudioData(CefRefPtr<CefBrowser> browser,
+                   int frames,
+                   int channels,
+                   int bits_per_sample,
+                   const void* data_buffer) override;
+  int GetLatencyInMilliseconds(CefRefPtr<CefBrowser> browser,
+                               int audio_stream_id) override;
+};
+
+#endif  // CEF_LIBCEF_DLL_CTOCPP_AUDIO_HANDLER_CTOCPP_H_
diff --git a/libcef_dll/ctocpp/client_ctocpp.cc b/libcef_dll/ctocpp/client_ctocpp.cc
index 91c9782..0016e80 100644
--- a/libcef_dll/ctocpp/client_ctocpp.cc
+++ b/libcef_dll/ctocpp/client_ctocpp.cc
@@ -1,267 +1,282 @@
-// Copyright (c) 2018 The Chromium Embedded Framework Authors. All rights
-// reserved. Use of this source code is governed by a BSD-style license that
-// can be found in the LICENSE file.
-//
-// ---------------------------------------------------------------------------
-//
-// This file was generated by the CEF translator tool. If making changes by
-// hand only do so within the body of existing method and function
-// implementations. See the translator.README.txt file in the tools directory
-// for more information.
-//
-// $hash=d02e30103863b1d5eb2a8339f8bd8e5d01812f28$
-//
-
-#include "libcef_dll/ctocpp/client_ctocpp.h"
-#include "libcef_dll/cpptoc/browser_cpptoc.h"
-#include "libcef_dll/cpptoc/process_message_cpptoc.h"
-#include "libcef_dll/ctocpp/context_menu_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/dialog_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/display_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/download_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/drag_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/find_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/focus_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/jsdialog_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/keyboard_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/life_span_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/load_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/render_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/request_handler_ctocpp.h"
-
-// VIRTUAL METHODS - Body may be edited by hand.
-
-CefRefPtr<CefContextMenuHandler> CefClientCToCpp::GetContextMenuHandler() {
-  cef_client_t* _struct = GetStruct();
-  if (CEF_MEMBER_MISSING(_struct, get_context_menu_handler))
-    return NULL;
-
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  cef_context_menu_handler_t* _retval =
-      _struct->get_context_menu_handler(_struct);
-
-  // Return type: refptr_same
-  return CefContextMenuHandlerCToCpp::Wrap(_retval);
-}
-
-CefRefPtr<CefDialogHandler> CefClientCToCpp::GetDialogHandler() {
-  cef_client_t* _struct = GetStruct();
-  if (CEF_MEMBER_MISSING(_struct, get_dialog_handler))
-    return NULL;
-
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  cef_dialog_handler_t* _retval = _struct->get_dialog_handler(_struct);
-
-  // Return type: refptr_same
-  return CefDialogHandlerCToCpp::Wrap(_retval);
-}
-
-CefRefPtr<CefDisplayHandler> CefClientCToCpp::GetDisplayHandler() {
-  cef_client_t* _struct = GetStruct();
-  if (CEF_MEMBER_MISSING(_struct, get_display_handler))
-    return NULL;
-
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  cef_display_handler_t* _retval = _struct->get_display_handler(_struct);
-
-  // Return type: refptr_same
-  return CefDisplayHandlerCToCpp::Wrap(_retval);
-}
-
-CefRefPtr<CefDownloadHandler> CefClientCToCpp::GetDownloadHandler() {
-  cef_client_t* _struct = GetStruct();
-  if (CEF_MEMBER_MISSING(_struct, get_download_handler))
-    return NULL;
-
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  cef_download_handler_t* _retval = _struct->get_download_handler(_struct);
-
-  // Return type: refptr_same
-  return CefDownloadHandlerCToCpp::Wrap(_retval);
-}
-
-CefRefPtr<CefDragHandler> CefClientCToCpp::GetDragHandler() {
-  cef_client_t* _struct = GetStruct();
-  if (CEF_MEMBER_MISSING(_struct, get_drag_handler))
-    return NULL;
-
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  cef_drag_handler_t* _retval = _struct->get_drag_handler(_struct);
-
-  // Return type: refptr_same
-  return CefDragHandlerCToCpp::Wrap(_retval);
-}
-
-CefRefPtr<CefFindHandler> CefClientCToCpp::GetFindHandler() {
-  cef_client_t* _struct = GetStruct();
-  if (CEF_MEMBER_MISSING(_struct, get_find_handler))
-    return NULL;
-
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  cef_find_handler_t* _retval = _struct->get_find_handler(_struct);
-
-  // Return type: refptr_same
-  return CefFindHandlerCToCpp::Wrap(_retval);
-}
-
-CefRefPtr<CefFocusHandler> CefClientCToCpp::GetFocusHandler() {
-  cef_client_t* _struct = GetStruct();
-  if (CEF_MEMBER_MISSING(_struct, get_focus_handler))
-    return NULL;
-
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  cef_focus_handler_t* _retval = _struct->get_focus_handler(_struct);
-
-  // Return type: refptr_same
-  return CefFocusHandlerCToCpp::Wrap(_retval);
-}
-
-CefRefPtr<CefJSDialogHandler> CefClientCToCpp::GetJSDialogHandler() {
-  cef_client_t* _struct = GetStruct();
-  if (CEF_MEMBER_MISSING(_struct, get_jsdialog_handler))
-    return NULL;
-
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  cef_jsdialog_handler_t* _retval = _struct->get_jsdialog_handler(_struct);
-
-  // Return type: refptr_same
-  return CefJSDialogHandlerCToCpp::Wrap(_retval);
-}
-
-CefRefPtr<CefKeyboardHandler> CefClientCToCpp::GetKeyboardHandler() {
-  cef_client_t* _struct = GetStruct();
-  if (CEF_MEMBER_MISSING(_struct, get_keyboard_handler))
-    return NULL;
-
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  cef_keyboard_handler_t* _retval = _struct->get_keyboard_handler(_struct);
-
-  // Return type: refptr_same
-  return CefKeyboardHandlerCToCpp::Wrap(_retval);
-}
-
-CefRefPtr<CefLifeSpanHandler> CefClientCToCpp::GetLifeSpanHandler() {
-  cef_client_t* _struct = GetStruct();
-  if (CEF_MEMBER_MISSING(_struct, get_life_span_handler))
-    return NULL;
-
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  cef_life_span_handler_t* _retval = _struct->get_life_span_handler(_struct);
-
-  // Return type: refptr_same
-  return CefLifeSpanHandlerCToCpp::Wrap(_retval);
-}
-
-CefRefPtr<CefLoadHandler> CefClientCToCpp::GetLoadHandler() {
-  cef_client_t* _struct = GetStruct();
-  if (CEF_MEMBER_MISSING(_struct, get_load_handler))
-    return NULL;
-
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  cef_load_handler_t* _retval = _struct->get_load_handler(_struct);
-
-  // Return type: refptr_same
-  return CefLoadHandlerCToCpp::Wrap(_retval);
-}
-
-CefRefPtr<CefRenderHandler> CefClientCToCpp::GetRenderHandler() {
-  cef_client_t* _struct = GetStruct();
-  if (CEF_MEMBER_MISSING(_struct, get_render_handler))
-    return NULL;
-
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  cef_render_handler_t* _retval = _struct->get_render_handler(_struct);
-
-  // Return type: refptr_same
-  return CefRenderHandlerCToCpp::Wrap(_retval);
-}
-
-CefRefPtr<CefRequestHandler> CefClientCToCpp::GetRequestHandler() {
-  cef_client_t* _struct = GetStruct();
-  if (CEF_MEMBER_MISSING(_struct, get_request_handler))
-    return NULL;
-
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  cef_request_handler_t* _retval = _struct->get_request_handler(_struct);
-
-  // Return type: refptr_same
-  return CefRequestHandlerCToCpp::Wrap(_retval);
-}
-
-bool CefClientCToCpp::OnProcessMessageReceived(
-    CefRefPtr<CefBrowser> browser,
-    CefProcessId source_process,
-    CefRefPtr<CefProcessMessage> message) {
-  cef_client_t* _struct = GetStruct();
-  if (CEF_MEMBER_MISSING(_struct, on_process_message_received))
-    return false;
-
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: browser; type: refptr_diff
-  DCHECK(browser.get());
-  if (!browser.get())
-    return false;
-  // Verify param: message; type: refptr_diff
-  DCHECK(message.get());
-  if (!message.get())
-    return false;
-
-  // Execute
-  int _retval = _struct->on_process_message_received(
-      _struct, CefBrowserCppToC::Wrap(browser), source_process,
-      CefProcessMessageCppToC::Wrap(message));
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-// CONSTRUCTOR - Do not edit by hand.
-
-CefClientCToCpp::CefClientCToCpp() {}
-
-template <>
-cef_client_t*
-CefCToCppRefCounted<CefClientCToCpp, CefClient, cef_client_t>::UnwrapDerived(
-    CefWrapperType type,
-    CefClient* c) {
-  NOTREACHED() << "Unexpected class type: " << type;
-  return NULL;
-}
-
-#if DCHECK_IS_ON()
-template <>
-base::AtomicRefCount
-    CefCToCppRefCounted<CefClientCToCpp, CefClient, cef_client_t>::DebugObjCt
-        ATOMIC_DECLARATION;
-#endif
-
-template <>
-CefWrapperType CefCToCppRefCounted<CefClientCToCpp, CefClient, cef_client_t>::
-    kWrapperType = WT_CLIENT;
+// Copyright (c) 2018 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool. If making changes by
+// hand only do so within the body of existing method and function
+// implementations. See the translator.README.txt file in the tools directory
+// for more information.
+//
+// $hash=c5ff460d2bffd41b5a4fb9d58310af7a39592635$
+//
+
+#include "libcef_dll/ctocpp/client_ctocpp.h"
+#include "libcef_dll/cpptoc/browser_cpptoc.h"
+#include "libcef_dll/cpptoc/process_message_cpptoc.h"
+#include "libcef_dll/ctocpp/audio_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/context_menu_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/dialog_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/display_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/download_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/drag_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/find_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/focus_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/jsdialog_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/keyboard_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/life_span_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/load_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/render_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/request_handler_ctocpp.h"
+
+// VIRTUAL METHODS - Body may be edited by hand.
+
+CefRefPtr<CefAudioHandler> CefClientCToCpp::GetAudioHandler() {
+  cef_client_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, get_audio_handler))
+    return NULL;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  cef_audio_handler_t* _retval = _struct->get_audio_handler(_struct);
+
+  // Return type: refptr_same
+  return CefAudioHandlerCToCpp::Wrap(_retval);
+}
+
+CefRefPtr<CefContextMenuHandler> CefClientCToCpp::GetContextMenuHandler() {
+  cef_client_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, get_context_menu_handler))
+    return NULL;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  cef_context_menu_handler_t* _retval =
+      _struct->get_context_menu_handler(_struct);
+
+  // Return type: refptr_same
+  return CefContextMenuHandlerCToCpp::Wrap(_retval);
+}
+
+CefRefPtr<CefDialogHandler> CefClientCToCpp::GetDialogHandler() {
+  cef_client_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, get_dialog_handler))
+    return NULL;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  cef_dialog_handler_t* _retval = _struct->get_dialog_handler(_struct);
+
+  // Return type: refptr_same
+  return CefDialogHandlerCToCpp::Wrap(_retval);
+}
+
+CefRefPtr<CefDisplayHandler> CefClientCToCpp::GetDisplayHandler() {
+  cef_client_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, get_display_handler))
+    return NULL;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  cef_display_handler_t* _retval = _struct->get_display_handler(_struct);
+
+  // Return type: refptr_same
+  return CefDisplayHandlerCToCpp::Wrap(_retval);
+}
+
+CefRefPtr<CefDownloadHandler> CefClientCToCpp::GetDownloadHandler() {
+  cef_client_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, get_download_handler))
+    return NULL;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  cef_download_handler_t* _retval = _struct->get_download_handler(_struct);
+
+  // Return type: refptr_same
+  return CefDownloadHandlerCToCpp::Wrap(_retval);
+}
+
+CefRefPtr<CefDragHandler> CefClientCToCpp::GetDragHandler() {
+  cef_client_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, get_drag_handler))
+    return NULL;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  cef_drag_handler_t* _retval = _struct->get_drag_handler(_struct);
+
+  // Return type: refptr_same
+  return CefDragHandlerCToCpp::Wrap(_retval);
+}
+
+CefRefPtr<CefFindHandler> CefClientCToCpp::GetFindHandler() {
+  cef_client_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, get_find_handler))
+    return NULL;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  cef_find_handler_t* _retval = _struct->get_find_handler(_struct);
+
+  // Return type: refptr_same
+  return CefFindHandlerCToCpp::Wrap(_retval);
+}
+
+CefRefPtr<CefFocusHandler> CefClientCToCpp::GetFocusHandler() {
+  cef_client_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, get_focus_handler))
+    return NULL;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  cef_focus_handler_t* _retval = _struct->get_focus_handler(_struct);
+
+  // Return type: refptr_same
+  return CefFocusHandlerCToCpp::Wrap(_retval);
+}
+
+CefRefPtr<CefJSDialogHandler> CefClientCToCpp::GetJSDialogHandler() {
+  cef_client_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, get_jsdialog_handler))
+    return NULL;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  cef_jsdialog_handler_t* _retval = _struct->get_jsdialog_handler(_struct);
+
+  // Return type: refptr_same
+  return CefJSDialogHandlerCToCpp::Wrap(_retval);
+}
+
+CefRefPtr<CefKeyboardHandler> CefClientCToCpp::GetKeyboardHandler() {
+  cef_client_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, get_keyboard_handler))
+    return NULL;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  cef_keyboard_handler_t* _retval = _struct->get_keyboard_handler(_struct);
+
+  // Return type: refptr_same
+  return CefKeyboardHandlerCToCpp::Wrap(_retval);
+}
+
+CefRefPtr<CefLifeSpanHandler> CefClientCToCpp::GetLifeSpanHandler() {
+  cef_client_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, get_life_span_handler))
+    return NULL;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  cef_life_span_handler_t* _retval = _struct->get_life_span_handler(_struct);
+
+  // Return type: refptr_same
+  return CefLifeSpanHandlerCToCpp::Wrap(_retval);
+}
+
+CefRefPtr<CefLoadHandler> CefClientCToCpp::GetLoadHandler() {
+  cef_client_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, get_load_handler))
+    return NULL;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  cef_load_handler_t* _retval = _struct->get_load_handler(_struct);
+
+  // Return type: refptr_same
+  return CefLoadHandlerCToCpp::Wrap(_retval);
+}
+
+CefRefPtr<CefRenderHandler> CefClientCToCpp::GetRenderHandler() {
+  cef_client_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, get_render_handler))
+    return NULL;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  cef_render_handler_t* _retval = _struct->get_render_handler(_struct);
+
+  // Return type: refptr_same
+  return CefRenderHandlerCToCpp::Wrap(_retval);
+}
+
+CefRefPtr<CefRequestHandler> CefClientCToCpp::GetRequestHandler() {
+  cef_client_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, get_request_handler))
+    return NULL;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  cef_request_handler_t* _retval = _struct->get_request_handler(_struct);
+
+  // Return type: refptr_same
+  return CefRequestHandlerCToCpp::Wrap(_retval);
+}
+
+bool CefClientCToCpp::OnProcessMessageReceived(
+    CefRefPtr<CefBrowser> browser,
+    CefProcessId source_process,
+    CefRefPtr<CefProcessMessage> message) {
+  cef_client_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, on_process_message_received))
+    return false;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: browser; type: refptr_diff
+  DCHECK(browser.get());
+  if (!browser.get())
+    return false;
+  // Verify param: message; type: refptr_diff
+  DCHECK(message.get());
+  if (!message.get())
+    return false;
+
+  // Execute
+  int _retval = _struct->on_process_message_received(
+      _struct, CefBrowserCppToC::Wrap(browser), source_process,
+      CefProcessMessageCppToC::Wrap(message));
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+// CONSTRUCTOR - Do not edit by hand.
+
+CefClientCToCpp::CefClientCToCpp() {}
+
+template <>
+cef_client_t*
+CefCToCppRefCounted<CefClientCToCpp, CefClient, cef_client_t>::UnwrapDerived(
+    CefWrapperType type,
+    CefClient* c) {
+  NOTREACHED() << "Unexpected class type: " << type;
+  return NULL;
+}
+
+#if DCHECK_IS_ON()
+template <>
+base::AtomicRefCount
+    CefCToCppRefCounted<CefClientCToCpp, CefClient, cef_client_t>::DebugObjCt
+        ATOMIC_DECLARATION;
+#endif
+
+template <>
+CefWrapperType CefCToCppRefCounted<CefClientCToCpp, CefClient, cef_client_t>::
+    kWrapperType = WT_CLIENT;
diff --git a/libcef_dll/ctocpp/client_ctocpp.h b/libcef_dll/ctocpp/client_ctocpp.h
index 7be9bd7..1823a33 100644
--- a/libcef_dll/ctocpp/client_ctocpp.h
+++ b/libcef_dll/ctocpp/client_ctocpp.h
@@ -1,53 +1,54 @@
-// Copyright (c) 2018 The Chromium Embedded Framework Authors. All rights
-// reserved. Use of this source code is governed by a BSD-style license that
-// can be found in the LICENSE file.
-//
-// ---------------------------------------------------------------------------
-//
-// This file was generated by the CEF translator tool. If making changes by
-// hand only do so within the body of existing method and function
-// implementations. See the translator.README.txt file in the tools directory
-// for more information.
-//
-// $hash=79395a86efe19099f77240902fb56533bc791f7a$
-//
-
-#ifndef CEF_LIBCEF_DLL_CTOCPP_CLIENT_CTOCPP_H_
-#define CEF_LIBCEF_DLL_CTOCPP_CLIENT_CTOCPP_H_
-#pragma once
-
-#if !defined(BUILDING_CEF_SHARED)
-#error This file can be included DLL-side only
-#endif
-
-#include "include/capi/cef_client_capi.h"
-#include "include/cef_client.h"
-#include "libcef_dll/ctocpp/ctocpp_ref_counted.h"
-
-// Wrap a C structure with a C++ class.
-// This class may be instantiated and accessed DLL-side only.
-class CefClientCToCpp
-    : public CefCToCppRefCounted<CefClientCToCpp, CefClient, cef_client_t> {
- public:
-  CefClientCToCpp();
-
-  // CefClient methods.
-  CefRefPtr<CefContextMenuHandler> GetContextMenuHandler() override;
-  CefRefPtr<CefDialogHandler> GetDialogHandler() override;
-  CefRefPtr<CefDisplayHandler> GetDisplayHandler() override;
-  CefRefPtr<CefDownloadHandler> GetDownloadHandler() override;
-  CefRefPtr<CefDragHandler> GetDragHandler() override;
-  CefRefPtr<CefFindHandler> GetFindHandler() override;
-  CefRefPtr<CefFocusHandler> GetFocusHandler() override;
-  CefRefPtr<CefJSDialogHandler> GetJSDialogHandler() override;
-  CefRefPtr<CefKeyboardHandler> GetKeyboardHandler() override;
-  CefRefPtr<CefLifeSpanHandler> GetLifeSpanHandler() override;
-  CefRefPtr<CefLoadHandler> GetLoadHandler() override;
-  CefRefPtr<CefRenderHandler> GetRenderHandler() override;
-  CefRefPtr<CefRequestHandler> GetRequestHandler() override;
-  bool OnProcessMessageReceived(CefRefPtr<CefBrowser> browser,
-                                CefProcessId source_process,
-                                CefRefPtr<CefProcessMessage> message) override;
-};
-
-#endif  // CEF_LIBCEF_DLL_CTOCPP_CLIENT_CTOCPP_H_
+// Copyright (c) 2018 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool. If making changes by
+// hand only do so within the body of existing method and function
+// implementations. See the translator.README.txt file in the tools directory
+// for more information.
+//
+// $hash=fdd936c113f2861a876441709924bd310aa61fa9$
+//
+
+#ifndef CEF_LIBCEF_DLL_CTOCPP_CLIENT_CTOCPP_H_
+#define CEF_LIBCEF_DLL_CTOCPP_CLIENT_CTOCPP_H_
+#pragma once
+
+#if !defined(BUILDING_CEF_SHARED)
+#error This file can be included DLL-side only
+#endif
+
+#include "include/capi/cef_client_capi.h"
+#include "include/cef_client.h"
+#include "libcef_dll/ctocpp/ctocpp_ref_counted.h"
+
+// Wrap a C structure with a C++ class.
+// This class may be instantiated and accessed DLL-side only.
+class CefClientCToCpp
+    : public CefCToCppRefCounted<CefClientCToCpp, CefClient, cef_client_t> {
+ public:
+  CefClientCToCpp();
+
+  // CefClient methods.
+  CefRefPtr<CefAudioHandler> GetAudioHandler() override;
+  CefRefPtr<CefContextMenuHandler> GetContextMenuHandler() override;
+  CefRefPtr<CefDialogHandler> GetDialogHandler() override;
+  CefRefPtr<CefDisplayHandler> GetDisplayHandler() override;
+  CefRefPtr<CefDownloadHandler> GetDownloadHandler() override;
+  CefRefPtr<CefDragHandler> GetDragHandler() override;
+  CefRefPtr<CefFindHandler> GetFindHandler() override;
+  CefRefPtr<CefFocusHandler> GetFocusHandler() override;
+  CefRefPtr<CefJSDialogHandler> GetJSDialogHandler() override;
+  CefRefPtr<CefKeyboardHandler> GetKeyboardHandler() override;
+  CefRefPtr<CefLifeSpanHandler> GetLifeSpanHandler() override;
+  CefRefPtr<CefLoadHandler> GetLoadHandler() override;
+  CefRefPtr<CefRenderHandler> GetRenderHandler() override;
+  CefRefPtr<CefRequestHandler> GetRequestHandler() override;
+  bool OnProcessMessageReceived(CefRefPtr<CefBrowser> browser,
+                                CefProcessId source_process,
+                                CefRefPtr<CefProcessMessage> message) override;
+};
+
+#endif  // CEF_LIBCEF_DLL_CTOCPP_CLIENT_CTOCPP_H_
diff --git a/libcef_dll/libcef_dll.cc b/libcef_dll/libcef_dll.cc
index b6d27e9..d262688 100644
--- a/libcef_dll/libcef_dll.cc
+++ b/libcef_dll/libcef_dll.cc
@@ -1,1203 +1,1207 @@
-// Copyright (c) 2018 The Chromium Embedded Framework Authors. All rights
-// reserved. Use of this source code is governed by a BSD-style license that
-// can be found in the LICENSE file.
-//
-// ---------------------------------------------------------------------------
-//
-// This file was generated by the CEF translator tool. If making changes by
-// hand only do so within the body of existing method and function
-// implementations. See the translator.README.txt file in the tools directory
-// for more information.
-//
-// $hash=34ae05a5b71f5f9ede44fb859074e9ffcd7b65ad$
-//
-
-#include "include/capi/cef_app_capi.h"
-#include "include/capi/cef_crash_util_capi.h"
-#include "include/capi/cef_file_util_capi.h"
-#include "include/capi/cef_origin_whitelist_capi.h"
-#include "include/capi/cef_parser_capi.h"
-#include "include/capi/cef_path_util_capi.h"
-#include "include/capi/cef_process_util_capi.h"
-#include "include/capi/cef_scheme_capi.h"
-#include "include/capi/cef_ssl_info_capi.h"
-#include "include/capi/cef_task_capi.h"
-#include "include/capi/cef_trace_capi.h"
-#include "include/capi/cef_v8_capi.h"
-#include "include/capi/cef_web_plugin_capi.h"
-#include "include/capi/test/cef_test_helpers_capi.h"
-#include "include/cef_app.h"
-#include "include/cef_crash_util.h"
-#include "include/cef_file_util.h"
-#include "include/cef_origin_whitelist.h"
-#include "include/cef_parser.h"
-#include "include/cef_path_util.h"
-#include "include/cef_process_util.h"
-#include "include/cef_scheme.h"
-#include "include/cef_ssl_info.h"
-#include "include/cef_task.h"
-#include "include/cef_trace.h"
-#include "include/cef_v8.h"
-#include "include/cef_web_plugin.h"
-#include "include/test/cef_test_helpers.h"
-#include "libcef_dll/cpptoc/auth_callback_cpptoc.h"
-#include "libcef_dll/cpptoc/before_download_callback_cpptoc.h"
-#include "libcef_dll/cpptoc/binary_value_cpptoc.h"
-#include "libcef_dll/cpptoc/browser_cpptoc.h"
-#include "libcef_dll/cpptoc/browser_host_cpptoc.h"
-#include "libcef_dll/cpptoc/callback_cpptoc.h"
-#include "libcef_dll/cpptoc/command_line_cpptoc.h"
-#include "libcef_dll/cpptoc/context_menu_params_cpptoc.h"
-#include "libcef_dll/cpptoc/dictionary_value_cpptoc.h"
-#include "libcef_dll/cpptoc/domdocument_cpptoc.h"
-#include "libcef_dll/cpptoc/domnode_cpptoc.h"
-#include "libcef_dll/cpptoc/download_item_callback_cpptoc.h"
-#include "libcef_dll/cpptoc/download_item_cpptoc.h"
-#include "libcef_dll/cpptoc/drag_data_cpptoc.h"
-#include "libcef_dll/cpptoc/extension_cpptoc.h"
-#include "libcef_dll/cpptoc/file_dialog_callback_cpptoc.h"
-#include "libcef_dll/cpptoc/frame_cpptoc.h"
-#include "libcef_dll/cpptoc/get_extension_resource_callback_cpptoc.h"
-#include "libcef_dll/cpptoc/image_cpptoc.h"
-#include "libcef_dll/cpptoc/jsdialog_callback_cpptoc.h"
-#include "libcef_dll/cpptoc/list_value_cpptoc.h"
-#include "libcef_dll/cpptoc/menu_model_cpptoc.h"
-#include "libcef_dll/cpptoc/navigation_entry_cpptoc.h"
-#include "libcef_dll/cpptoc/print_dialog_callback_cpptoc.h"
-#include "libcef_dll/cpptoc/print_job_callback_cpptoc.h"
-#include "libcef_dll/cpptoc/print_settings_cpptoc.h"
-#include "libcef_dll/cpptoc/process_message_cpptoc.h"
-#include "libcef_dll/cpptoc/request_callback_cpptoc.h"
-#include "libcef_dll/cpptoc/run_context_menu_callback_cpptoc.h"
-#include "libcef_dll/cpptoc/scheme_registrar_cpptoc.h"
-#include "libcef_dll/cpptoc/select_client_certificate_callback_cpptoc.h"
-#include "libcef_dll/cpptoc/server_cpptoc.h"
-#include "libcef_dll/cpptoc/sslinfo_cpptoc.h"
-#include "libcef_dll/cpptoc/sslstatus_cpptoc.h"
-#include "libcef_dll/cpptoc/stream_reader_cpptoc.h"
-#include "libcef_dll/cpptoc/stream_writer_cpptoc.h"
-#include "libcef_dll/cpptoc/task_runner_cpptoc.h"
-#include "libcef_dll/cpptoc/test/translator_test_cpptoc.h"
-#include "libcef_dll/cpptoc/test/translator_test_ref_ptr_library_child_child_cpptoc.h"
-#include "libcef_dll/cpptoc/test/translator_test_ref_ptr_library_child_cpptoc.h"
-#include "libcef_dll/cpptoc/test/translator_test_ref_ptr_library_cpptoc.h"
-#include "libcef_dll/cpptoc/test/translator_test_scoped_library_child_child_cpptoc.h"
-#include "libcef_dll/cpptoc/test/translator_test_scoped_library_child_cpptoc.h"
-#include "libcef_dll/cpptoc/test/translator_test_scoped_library_cpptoc.h"
-#include "libcef_dll/cpptoc/thread_cpptoc.h"
-#include "libcef_dll/cpptoc/urlrequest_cpptoc.h"
-#include "libcef_dll/cpptoc/v8context_cpptoc.h"
-#include "libcef_dll/cpptoc/v8exception_cpptoc.h"
-#include "libcef_dll/cpptoc/v8stack_frame_cpptoc.h"
-#include "libcef_dll/cpptoc/v8stack_trace_cpptoc.h"
-#include "libcef_dll/cpptoc/v8value_cpptoc.h"
-#include "libcef_dll/cpptoc/value_cpptoc.h"
-#include "libcef_dll/cpptoc/views/box_layout_cpptoc.h"
-#include "libcef_dll/cpptoc/views/browser_view_cpptoc.h"
-#include "libcef_dll/cpptoc/views/button_cpptoc.h"
-#include "libcef_dll/cpptoc/views/display_cpptoc.h"
-#include "libcef_dll/cpptoc/views/fill_layout_cpptoc.h"
-#include "libcef_dll/cpptoc/views/label_button_cpptoc.h"
-#include "libcef_dll/cpptoc/views/layout_cpptoc.h"
-#include "libcef_dll/cpptoc/views/menu_button_cpptoc.h"
-#include "libcef_dll/cpptoc/views/menu_button_pressed_lock_cpptoc.h"
-#include "libcef_dll/cpptoc/views/panel_cpptoc.h"
-#include "libcef_dll/cpptoc/views/scroll_view_cpptoc.h"
-#include "libcef_dll/cpptoc/views/textfield_cpptoc.h"
-#include "libcef_dll/cpptoc/views/view_cpptoc.h"
-#include "libcef_dll/cpptoc/views/window_cpptoc.h"
-#include "libcef_dll/cpptoc/waitable_event_cpptoc.h"
-#include "libcef_dll/cpptoc/web_plugin_info_cpptoc.h"
-#include "libcef_dll/cpptoc/x509cert_principal_cpptoc.h"
-#include "libcef_dll/cpptoc/x509certificate_cpptoc.h"
-#include "libcef_dll/cpptoc/xml_reader_cpptoc.h"
-#include "libcef_dll/cpptoc/zip_reader_cpptoc.h"
-#include "libcef_dll/ctocpp/accessibility_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/app_ctocpp.h"
-#include "libcef_dll/ctocpp/browser_process_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/completion_callback_ctocpp.h"
-#include "libcef_dll/ctocpp/context_menu_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/cookie_visitor_ctocpp.h"
-#include "libcef_dll/ctocpp/delete_cookies_callback_ctocpp.h"
-#include "libcef_dll/ctocpp/dialog_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/display_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/domvisitor_ctocpp.h"
-#include "libcef_dll/ctocpp/download_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/download_image_callback_ctocpp.h"
-#include "libcef_dll/ctocpp/drag_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/end_tracing_callback_ctocpp.h"
-#include "libcef_dll/ctocpp/extension_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/find_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/focus_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/jsdialog_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/keyboard_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/life_span_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/load_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/menu_model_delegate_ctocpp.h"
-#include "libcef_dll/ctocpp/navigation_entry_visitor_ctocpp.h"
-#include "libcef_dll/ctocpp/pdf_print_callback_ctocpp.h"
-#include "libcef_dll/ctocpp/print_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/read_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/register_cdm_callback_ctocpp.h"
-#include "libcef_dll/ctocpp/render_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/render_process_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/request_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/resolve_callback_ctocpp.h"
-#include "libcef_dll/ctocpp/resource_bundle_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/resource_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/response_filter_ctocpp.h"
-#include "libcef_dll/ctocpp/run_file_dialog_callback_ctocpp.h"
-#include "libcef_dll/ctocpp/scheme_handler_factory_ctocpp.h"
-#include "libcef_dll/ctocpp/server_handler_ctocpp.h"
-#include "libcef_dll/ctocpp/set_cookie_callback_ctocpp.h"
-#include "libcef_dll/ctocpp/string_visitor_ctocpp.h"
-#include "libcef_dll/ctocpp/task_ctocpp.h"
-#include "libcef_dll/ctocpp/test/translator_test_ref_ptr_client_child_ctocpp.h"
-#include "libcef_dll/ctocpp/test/translator_test_ref_ptr_client_ctocpp.h"
-#include "libcef_dll/ctocpp/test/translator_test_scoped_client_child_ctocpp.h"
-#include "libcef_dll/ctocpp/test/translator_test_scoped_client_ctocpp.h"
-#include "libcef_dll/ctocpp/urlrequest_client_ctocpp.h"
-#include "libcef_dll/ctocpp/v8accessor_ctocpp.h"
-#include "libcef_dll/ctocpp/v8array_buffer_release_callback_ctocpp.h"
-#include "libcef_dll/ctocpp/v8handler_ctocpp.h"
-#include "libcef_dll/ctocpp/v8interceptor_ctocpp.h"
-#include "libcef_dll/ctocpp/views/browser_view_delegate_ctocpp.h"
-#include "libcef_dll/ctocpp/views/button_delegate_ctocpp.h"
-#include "libcef_dll/ctocpp/views/menu_button_delegate_ctocpp.h"
-#include "libcef_dll/ctocpp/views/panel_delegate_ctocpp.h"
-#include "libcef_dll/ctocpp/views/textfield_delegate_ctocpp.h"
-#include "libcef_dll/ctocpp/views/view_delegate_ctocpp.h"
-#include "libcef_dll/ctocpp/views/window_delegate_ctocpp.h"
-#include "libcef_dll/ctocpp/web_plugin_info_visitor_ctocpp.h"
-#include "libcef_dll/ctocpp/web_plugin_unstable_callback_ctocpp.h"
-#include "libcef_dll/ctocpp/write_handler_ctocpp.h"
-#include "libcef_dll/transfer_util.h"
-
-// GLOBAL FUNCTIONS - Body may be edited by hand.
-
-CEF_EXPORT int cef_execute_process(const struct _cef_main_args_t* args,
-                                   struct _cef_app_t* application,
-                                   void* windows_sandbox_info) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: args; type: struct_byref_const
-  DCHECK(args);
-  if (!args)
-    return 0;
-  // Unverified params: application, windows_sandbox_info
-
-  // Translate param: args; type: struct_byref_const
-  CefMainArgs argsObj;
-  if (args)
-    argsObj.Set(*args, false);
-
-  // Execute
-  int _retval = CefExecuteProcess(argsObj, CefAppCToCpp::Wrap(application),
-                                  windows_sandbox_info);
-
-  // Return type: simple
-  return _retval;
-}
-
-CEF_EXPORT int cef_initialize(const struct _cef_main_args_t* args,
-                              const struct _cef_settings_t* settings,
-                              struct _cef_app_t* application,
-                              void* windows_sandbox_info) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: args; type: struct_byref_const
-  DCHECK(args);
-  if (!args)
-    return 0;
-  // Verify param: settings; type: struct_byref_const
-  DCHECK(settings);
-  if (!settings)
-    return 0;
-  // Unverified params: application, windows_sandbox_info
-
-  // Translate param: args; type: struct_byref_const
-  CefMainArgs argsObj;
-  if (args)
-    argsObj.Set(*args, false);
-  // Translate param: settings; type: struct_byref_const
-  CefSettings settingsObj;
-  if (settings)
-    settingsObj.Set(*settings, false);
-
-  // Execute
-  bool _retval =
-      CefInitialize(argsObj, settingsObj, CefAppCToCpp::Wrap(application),
-                    windows_sandbox_info);
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT void cef_shutdown() {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  CefShutdown();
-
-#if DCHECK_IS_ON()
-  // Check that all wrapper objects have been destroyed
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefAccessibilityHandlerCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefAuthCallbackCppToC::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefBeforeDownloadCallbackCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefBinaryValueCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefBoxLayoutCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefBrowserCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefBrowserHostCppToC::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefBrowserProcessHandlerCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefBrowserViewCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefBrowserViewDelegateCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefButtonCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefButtonDelegateCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefCallbackCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefCompletionCallbackCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefContextMenuHandlerCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefContextMenuParamsCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefCookieVisitorCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefDOMDocumentCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefDOMNodeCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefDOMVisitorCToCpp::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefDeleteCookiesCallbackCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefDialogHandlerCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefDictionaryValueCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefDisplayCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefDisplayHandlerCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefDownloadHandlerCToCpp::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefDownloadImageCallbackCToCpp::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefDownloadItemCallbackCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefDownloadItemCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefDragDataCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefDragHandlerCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefEndTracingCallbackCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefExtensionCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefExtensionHandlerCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefFileDialogCallbackCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefFillLayoutCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefFindHandlerCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefFocusHandlerCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefFrameCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefGetExtensionResourceCallbackCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefImageCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefJSDialogCallbackCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefJSDialogHandlerCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefKeyboardHandlerCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefLabelButtonCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefLayoutCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefLifeSpanHandlerCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefListValueCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefLoadHandlerCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefMenuButtonCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefMenuButtonDelegateCToCpp::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefMenuButtonPressedLockCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefMenuModelCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefMenuModelDelegateCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefNavigationEntryCppToC::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefNavigationEntryVisitorCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefPanelCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefPanelDelegateCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefPdfPrintCallbackCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefPrintDialogCallbackCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefPrintHandlerCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefPrintJobCallbackCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefPrintSettingsCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefProcessMessageCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefReadHandlerCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefRegisterCdmCallbackCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefRenderHandlerCToCpp::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefRenderProcessHandlerCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefRequestCallbackCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefRequestHandlerCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefResolveCallbackCToCpp::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefResourceBundleHandlerCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefResourceHandlerCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefResponseFilterCToCpp::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefRunContextMenuCallbackCppToC::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefRunFileDialogCallbackCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefSSLInfoCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefSSLStatusCppToC::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefSchemeHandlerFactoryCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefSchemeRegistrarCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefScrollViewCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefSelectClientCertificateCallbackCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefServerCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefServerHandlerCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefSetCookieCallbackCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefStreamReaderCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefStreamWriterCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefStringVisitorCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefTaskCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefTaskRunnerCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefTextfieldCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefTextfieldDelegateCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefThreadCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefTranslatorTestCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefTranslatorTestRefPtrClientCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefTranslatorTestRefPtrClientChildCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefTranslatorTestRefPtrLibraryChildChildCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefTranslatorTestRefPtrLibraryChildCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefTranslatorTestRefPtrLibraryCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefTranslatorTestScopedClientCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefTranslatorTestScopedClientChildCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefTranslatorTestScopedLibraryChildChildCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefTranslatorTestScopedLibraryChildCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefTranslatorTestScopedLibraryCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefURLRequestClientCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefURLRequestCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefV8AccessorCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefV8ArrayBufferReleaseCallbackCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefV8ContextCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefV8ExceptionCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefV8HandlerCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefV8InterceptorCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefV8StackFrameCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefV8StackTraceCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefV8ValueCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefValueCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefViewCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefViewDelegateCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefWaitableEventCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefWebPluginInfoCppToC::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefWebPluginInfoVisitorCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefWebPluginUnstableCallbackCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefWindowCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefWindowDelegateCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefWriteHandlerCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefX509CertPrincipalCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefX509CertificateCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefXmlReaderCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefZipReaderCppToC::DebugObjCt));
-#endif  // DCHECK_IS_ON()
-}
-
-CEF_EXPORT void cef_do_message_loop_work() {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  CefDoMessageLoopWork();
-}
-
-CEF_EXPORT void cef_run_message_loop() {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  CefRunMessageLoop();
-}
-
-CEF_EXPORT void cef_quit_message_loop() {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  CefQuitMessageLoop();
-}
-
-CEF_EXPORT void cef_set_osmodal_loop(int osModalLoop) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  CefSetOSModalLoop(osModalLoop ? true : false);
-}
-
-CEF_EXPORT void cef_enable_highdpi_support() {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  CefEnableHighDPISupport();
-}
-
-CEF_EXPORT int cef_crash_reporting_enabled() {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  bool _retval = CefCrashReportingEnabled();
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT void cef_set_crash_key_value(const cef_string_t* key,
-                                        const cef_string_t* value) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: key; type: string_byref_const
-  DCHECK(key);
-  if (!key)
-    return;
-  // Unverified params: value
-
-  // Execute
-  CefSetCrashKeyValue(CefString(key), CefString(value));
-}
-
-CEF_EXPORT int cef_create_directory(const cef_string_t* full_path) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: full_path; type: string_byref_const
-  DCHECK(full_path);
-  if (!full_path)
-    return 0;
-
-  // Execute
-  bool _retval = CefCreateDirectory(CefString(full_path));
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT int cef_get_temp_directory(cef_string_t* temp_dir) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: temp_dir; type: string_byref
-  DCHECK(temp_dir);
-  if (!temp_dir)
-    return 0;
-
-  // Translate param: temp_dir; type: string_byref
-  CefString temp_dirStr(temp_dir);
-
-  // Execute
-  bool _retval = CefGetTempDirectory(temp_dirStr);
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT int cef_create_new_temp_directory(const cef_string_t* prefix,
-                                             cef_string_t* new_temp_path) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: new_temp_path; type: string_byref
-  DCHECK(new_temp_path);
-  if (!new_temp_path)
-    return 0;
-  // Unverified params: prefix
-
-  // Translate param: new_temp_path; type: string_byref
-  CefString new_temp_pathStr(new_temp_path);
-
-  // Execute
-  bool _retval = CefCreateNewTempDirectory(CefString(prefix), new_temp_pathStr);
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT int cef_create_temp_directory_in_directory(
-    const cef_string_t* base_dir,
-    const cef_string_t* prefix,
-    cef_string_t* new_dir) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: base_dir; type: string_byref_const
-  DCHECK(base_dir);
-  if (!base_dir)
-    return 0;
-  // Verify param: new_dir; type: string_byref
-  DCHECK(new_dir);
-  if (!new_dir)
-    return 0;
-  // Unverified params: prefix
-
-  // Translate param: new_dir; type: string_byref
-  CefString new_dirStr(new_dir);
-
-  // Execute
-  bool _retval = CefCreateTempDirectoryInDirectory(
-      CefString(base_dir), CefString(prefix), new_dirStr);
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT int cef_directory_exists(const cef_string_t* path) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: path; type: string_byref_const
-  DCHECK(path);
-  if (!path)
-    return 0;
-
-  // Execute
-  bool _retval = CefDirectoryExists(CefString(path));
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT int cef_delete_file(const cef_string_t* path, int recursive) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: path; type: string_byref_const
-  DCHECK(path);
-  if (!path)
-    return 0;
-
-  // Execute
-  bool _retval = CefDeleteFile(CefString(path), recursive ? true : false);
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT int cef_zip_directory(const cef_string_t* src_dir,
-                                 const cef_string_t* dest_file,
-                                 int include_hidden_files) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: src_dir; type: string_byref_const
-  DCHECK(src_dir);
-  if (!src_dir)
-    return 0;
-  // Verify param: dest_file; type: string_byref_const
-  DCHECK(dest_file);
-  if (!dest_file)
-    return 0;
-
-  // Execute
-  bool _retval = CefZipDirectory(CefString(src_dir), CefString(dest_file),
-                                 include_hidden_files ? true : false);
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT void cef_load_crlsets_file(const cef_string_t* path) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: path; type: string_byref_const
-  DCHECK(path);
-  if (!path)
-    return;
-
-  // Execute
-  CefLoadCRLSetsFile(CefString(path));
-}
-
-CEF_EXPORT int cef_add_cross_origin_whitelist_entry(
-    const cef_string_t* source_origin,
-    const cef_string_t* target_protocol,
-    const cef_string_t* target_domain,
-    int allow_target_subdomains) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: source_origin; type: string_byref_const
-  DCHECK(source_origin);
-  if (!source_origin)
-    return 0;
-  // Verify param: target_protocol; type: string_byref_const
-  DCHECK(target_protocol);
-  if (!target_protocol)
-    return 0;
-  // Unverified params: target_domain
-
-  // Execute
-  bool _retval = CefAddCrossOriginWhitelistEntry(
-      CefString(source_origin), CefString(target_protocol),
-      CefString(target_domain), allow_target_subdomains ? true : false);
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT int cef_remove_cross_origin_whitelist_entry(
-    const cef_string_t* source_origin,
-    const cef_string_t* target_protocol,
-    const cef_string_t* target_domain,
-    int allow_target_subdomains) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: source_origin; type: string_byref_const
-  DCHECK(source_origin);
-  if (!source_origin)
-    return 0;
-  // Verify param: target_protocol; type: string_byref_const
-  DCHECK(target_protocol);
-  if (!target_protocol)
-    return 0;
-  // Unverified params: target_domain
-
-  // Execute
-  bool _retval = CefRemoveCrossOriginWhitelistEntry(
-      CefString(source_origin), CefString(target_protocol),
-      CefString(target_domain), allow_target_subdomains ? true : false);
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT int cef_clear_cross_origin_whitelist() {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  bool _retval = CefClearCrossOriginWhitelist();
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT int cef_parse_url(const cef_string_t* url,
-                             struct _cef_urlparts_t* parts) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: url; type: string_byref_const
-  DCHECK(url);
-  if (!url)
-    return 0;
-  // Verify param: parts; type: struct_byref
-  DCHECK(parts);
-  if (!parts)
-    return 0;
-
-  // Translate param: parts; type: struct_byref
-  CefURLParts partsObj;
-  if (parts)
-    partsObj.AttachTo(*parts);
-
-  // Execute
-  bool _retval = CefParseURL(CefString(url), partsObj);
-
-  // Restore param: parts; type: struct_byref
-  if (parts)
-    partsObj.DetachTo(*parts);
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT int cef_create_url(const struct _cef_urlparts_t* parts,
-                              cef_string_t* url) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: parts; type: struct_byref_const
-  DCHECK(parts);
-  if (!parts)
-    return 0;
-  // Verify param: url; type: string_byref
-  DCHECK(url);
-  if (!url)
-    return 0;
-
-  // Translate param: parts; type: struct_byref_const
-  CefURLParts partsObj;
-  if (parts)
-    partsObj.Set(*parts, false);
-  // Translate param: url; type: string_byref
-  CefString urlStr(url);
-
-  // Execute
-  bool _retval = CefCreateURL(partsObj, urlStr);
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT cef_string_userfree_t
-cef_format_url_for_security_display(const cef_string_t* origin_url) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: origin_url; type: string_byref_const
-  DCHECK(origin_url);
-  if (!origin_url)
-    return NULL;
-
-  // Execute
-  CefString _retval = CefFormatUrlForSecurityDisplay(CefString(origin_url));
-
-  // Return type: string
-  return _retval.DetachToUserFree();
-}
-
-CEF_EXPORT cef_string_userfree_t
-cef_get_mime_type(const cef_string_t* extension) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: extension; type: string_byref_const
-  DCHECK(extension);
-  if (!extension)
-    return NULL;
-
-  // Execute
-  CefString _retval = CefGetMimeType(CefString(extension));
-
-  // Return type: string
-  return _retval.DetachToUserFree();
-}
-
-CEF_EXPORT void cef_get_extensions_for_mime_type(const cef_string_t* mime_type,
-                                                 cef_string_list_t extensions) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: mime_type; type: string_byref_const
-  DCHECK(mime_type);
-  if (!mime_type)
-    return;
-  // Verify param: extensions; type: string_vec_byref
-  DCHECK(extensions);
-  if (!extensions)
-    return;
-
-  // Translate param: extensions; type: string_vec_byref
-  std::vector<CefString> extensionsList;
-  transfer_string_list_contents(extensions, extensionsList);
-
-  // Execute
-  CefGetExtensionsForMimeType(CefString(mime_type), extensionsList);
-
-  // Restore param: extensions; type: string_vec_byref
-  cef_string_list_clear(extensions);
-  transfer_string_list_contents(extensionsList, extensions);
-}
-
-CEF_EXPORT cef_string_userfree_t cef_base64encode(const void* data,
-                                                  size_t data_size) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: data; type: simple_byaddr
-  DCHECK(data);
-  if (!data)
-    return NULL;
-
-  // Execute
-  CefString _retval = CefBase64Encode(data, data_size);
-
-  // Return type: string
-  return _retval.DetachToUserFree();
-}
-
-CEF_EXPORT struct _cef_binary_value_t* cef_base64decode(
-    const cef_string_t* data) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: data; type: string_byref_const
-  DCHECK(data);
-  if (!data)
-    return NULL;
-
-  // Execute
-  CefRefPtr<CefBinaryValue> _retval = CefBase64Decode(CefString(data));
-
-  // Return type: refptr_same
-  return CefBinaryValueCppToC::Wrap(_retval);
-}
-
-CEF_EXPORT cef_string_userfree_t cef_uriencode(const cef_string_t* text,
-                                               int use_plus) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: text; type: string_byref_const
-  DCHECK(text);
-  if (!text)
-    return NULL;
-
-  // Execute
-  CefString _retval = CefURIEncode(CefString(text), use_plus ? true : false);
-
-  // Return type: string
-  return _retval.DetachToUserFree();
-}
-
-CEF_EXPORT cef_string_userfree_t
-cef_uridecode(const cef_string_t* text,
-              int convert_to_utf8,
-              cef_uri_unescape_rule_t unescape_rule) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: text; type: string_byref_const
-  DCHECK(text);
-  if (!text)
-    return NULL;
-
-  // Execute
-  CefString _retval = CefURIDecode(
-      CefString(text), convert_to_utf8 ? true : false, unescape_rule);
-
-  // Return type: string
-  return _retval.DetachToUserFree();
-}
-
-CEF_EXPORT struct _cef_value_t* cef_parse_json(
-    const cef_string_t* json_string,
-    cef_json_parser_options_t options) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: json_string; type: string_byref_const
-  DCHECK(json_string);
-  if (!json_string)
-    return NULL;
-
-  // Execute
-  CefRefPtr<CefValue> _retval = CefParseJSON(CefString(json_string), options);
-
-  // Return type: refptr_same
-  return CefValueCppToC::Wrap(_retval);
-}
-
-CEF_EXPORT struct _cef_value_t* cef_parse_jsonand_return_error(
-    const cef_string_t* json_string,
-    cef_json_parser_options_t options,
-    cef_json_parser_error_t* error_code_out,
-    cef_string_t* error_msg_out) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: json_string; type: string_byref_const
-  DCHECK(json_string);
-  if (!json_string)
-    return NULL;
-  // Verify param: error_code_out; type: simple_byref
-  DCHECK(error_code_out);
-  if (!error_code_out)
-    return NULL;
-  // Verify param: error_msg_out; type: string_byref
-  DCHECK(error_msg_out);
-  if (!error_msg_out)
-    return NULL;
-
-  // Translate param: error_code_out; type: simple_byref
-  cef_json_parser_error_t error_code_outVal =
-      error_code_out ? *error_code_out : JSON_NO_ERROR;
-  // Translate param: error_msg_out; type: string_byref
-  CefString error_msg_outStr(error_msg_out);
-
-  // Execute
-  CefRefPtr<CefValue> _retval = CefParseJSONAndReturnError(
-      CefString(json_string), options, error_code_outVal, error_msg_outStr);
-
-  // Restore param: error_code_out; type: simple_byref
-  if (error_code_out)
-    *error_code_out = error_code_outVal;
-
-  // Return type: refptr_same
-  return CefValueCppToC::Wrap(_retval);
-}
-
-CEF_EXPORT cef_string_userfree_t
-cef_write_json(struct _cef_value_t* node, cef_json_writer_options_t options) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: node; type: refptr_same
-  DCHECK(node);
-  if (!node)
-    return NULL;
-
-  // Execute
-  CefString _retval = CefWriteJSON(CefValueCppToC::Unwrap(node), options);
-
-  // Return type: string
-  return _retval.DetachToUserFree();
-}
-
-CEF_EXPORT int cef_get_path(cef_path_key_t key, cef_string_t* path) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: path; type: string_byref
-  DCHECK(path);
-  if (!path)
-    return 0;
-
-  // Translate param: path; type: string_byref
-  CefString pathStr(path);
-
-  // Execute
-  bool _retval = CefGetPath(key, pathStr);
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT int cef_launch_process(struct _cef_command_line_t* command_line) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: command_line; type: refptr_same
-  DCHECK(command_line);
-  if (!command_line)
-    return 0;
-
-  // Execute
-  bool _retval = CefLaunchProcess(CefCommandLineCppToC::Unwrap(command_line));
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT int cef_register_scheme_handler_factory(
-    const cef_string_t* scheme_name,
-    const cef_string_t* domain_name,
-    struct _cef_scheme_handler_factory_t* factory) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: scheme_name; type: string_byref_const
-  DCHECK(scheme_name);
-  if (!scheme_name)
-    return 0;
-  // Unverified params: domain_name, factory
-
-  // Execute
-  bool _retval = CefRegisterSchemeHandlerFactory(
-      CefString(scheme_name), CefString(domain_name),
-      CefSchemeHandlerFactoryCToCpp::Wrap(factory));
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT int cef_clear_scheme_handler_factories() {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  bool _retval = CefClearSchemeHandlerFactories();
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT int cef_is_cert_status_error(cef_cert_status_t status) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  bool _retval = CefIsCertStatusError(status);
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT int cef_is_cert_status_minor_error(cef_cert_status_t status) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  bool _retval = CefIsCertStatusMinorError(status);
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT int cef_currently_on(cef_thread_id_t threadId) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  bool _retval = CefCurrentlyOn(threadId);
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT int cef_post_task(cef_thread_id_t threadId,
-                             struct _cef_task_t* task) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: task; type: refptr_diff
-  DCHECK(task);
-  if (!task)
-    return 0;
-
-  // Execute
-  bool _retval = CefPostTask(threadId, CefTaskCToCpp::Wrap(task));
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT int cef_post_delayed_task(cef_thread_id_t threadId,
-                                     struct _cef_task_t* task,
-                                     int64 delay_ms) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: task; type: refptr_diff
-  DCHECK(task);
-  if (!task)
-    return 0;
-
-  // Execute
-  bool _retval =
-      CefPostDelayedTask(threadId, CefTaskCToCpp::Wrap(task), delay_ms);
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT int cef_begin_tracing(const cef_string_t* categories,
-                                 struct _cef_completion_callback_t* callback) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Unverified params: categories, callback
-
-  // Execute
-  bool _retval = CefBeginTracing(CefString(categories),
-                                 CefCompletionCallbackCToCpp::Wrap(callback));
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT int cef_end_tracing(const cef_string_t* tracing_file,
-                               struct _cef_end_tracing_callback_t* callback) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Unverified params: tracing_file, callback
-
-  // Execute
-  bool _retval = CefEndTracing(CefString(tracing_file),
-                               CefEndTracingCallbackCToCpp::Wrap(callback));
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT int64 cef_now_from_system_trace_time() {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  int64 _retval = CefNowFromSystemTraceTime();
-
-  // Return type: simple
-  return _retval;
-}
-
-CEF_EXPORT int cef_register_extension(const cef_string_t* extension_name,
-                                      const cef_string_t* javascript_code,
-                                      struct _cef_v8handler_t* handler) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: extension_name; type: string_byref_const
-  DCHECK(extension_name);
-  if (!extension_name)
-    return 0;
-  // Verify param: javascript_code; type: string_byref_const
-  DCHECK(javascript_code);
-  if (!javascript_code)
-    return 0;
-  // Unverified params: handler
-
-  // Execute
-  bool _retval = CefRegisterExtension(CefString(extension_name),
-                                      CefString(javascript_code),
-                                      CefV8HandlerCToCpp::Wrap(handler));
-
-  // Return type: bool
-  return _retval;
-}
-
-CEF_EXPORT void cef_visit_web_plugin_info(
-    struct _cef_web_plugin_info_visitor_t* visitor) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: visitor; type: refptr_diff
-  DCHECK(visitor);
-  if (!visitor)
-    return;
-
-  // Execute
-  CefVisitWebPluginInfo(CefWebPluginInfoVisitorCToCpp::Wrap(visitor));
-}
-
-CEF_EXPORT void cef_refresh_web_plugins() {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  CefRefreshWebPlugins();
-}
-
-CEF_EXPORT void cef_unregister_internal_web_plugin(const cef_string_t* path) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: path; type: string_byref_const
-  DCHECK(path);
-  if (!path)
-    return;
-
-  // Execute
-  CefUnregisterInternalWebPlugin(CefString(path));
-}
-
-CEF_EXPORT void cef_register_web_plugin_crash(const cef_string_t* path) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: path; type: string_byref_const
-  DCHECK(path);
-  if (!path)
-    return;
-
-  // Execute
-  CefRegisterWebPluginCrash(CefString(path));
-}
-
-CEF_EXPORT void cef_is_web_plugin_unstable(
-    const cef_string_t* path,
-    struct _cef_web_plugin_unstable_callback_t* callback) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: path; type: string_byref_const
-  DCHECK(path);
-  if (!path)
-    return;
-  // Verify param: callback; type: refptr_diff
-  DCHECK(callback);
-  if (!callback)
-    return;
-
-  // Execute
-  CefIsWebPluginUnstable(CefString(path),
-                         CefWebPluginUnstableCallbackCToCpp::Wrap(callback));
-}
-
-CEF_EXPORT void cef_register_widevine_cdm(
-    const cef_string_t* path,
-    struct _cef_register_cdm_callback_t* callback) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: path; type: string_byref_const
-  DCHECK(path);
-  if (!path)
-    return;
-  // Unverified params: callback
-
-  // Execute
-  CefRegisterWidevineCdm(CefString(path),
-                         CefRegisterCdmCallbackCToCpp::Wrap(callback));
-}
-
-CEF_EXPORT void cef_execute_java_script_with_user_gesture_for_tests(
-    struct _cef_frame_t* frame,
-    const cef_string_t* javascript) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: frame; type: refptr_same
-  DCHECK(frame);
-  if (!frame)
-    return;
-  // Unverified params: javascript
-
-  // Execute
-  CefExecuteJavaScriptWithUserGestureForTests(CefFrameCppToC::Unwrap(frame),
-                                              CefString(javascript));
-}
+// Copyright (c) 2018 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool. If making changes by
+// hand only do so within the body of existing method and function
+// implementations. See the translator.README.txt file in the tools directory
+// for more information.
+//
+// $hash=e3bc95e7445e56b38b024ea09abe167242b0c527$
+//
+
+#include "include/capi/cef_app_capi.h"
+#include "include/capi/cef_crash_util_capi.h"
+#include "include/capi/cef_file_util_capi.h"
+#include "include/capi/cef_origin_whitelist_capi.h"
+#include "include/capi/cef_parser_capi.h"
+#include "include/capi/cef_path_util_capi.h"
+#include "include/capi/cef_process_util_capi.h"
+#include "include/capi/cef_scheme_capi.h"
+#include "include/capi/cef_ssl_info_capi.h"
+#include "include/capi/cef_task_capi.h"
+#include "include/capi/cef_trace_capi.h"
+#include "include/capi/cef_v8_capi.h"
+#include "include/capi/cef_web_plugin_capi.h"
+#include "include/capi/test/cef_test_helpers_capi.h"
+#include "include/cef_app.h"
+#include "include/cef_crash_util.h"
+#include "include/cef_file_util.h"
+#include "include/cef_origin_whitelist.h"
+#include "include/cef_parser.h"
+#include "include/cef_path_util.h"
+#include "include/cef_process_util.h"
+#include "include/cef_scheme.h"
+#include "include/cef_ssl_info.h"
+#include "include/cef_task.h"
+#include "include/cef_trace.h"
+#include "include/cef_v8.h"
+#include "include/cef_web_plugin.h"
+#include "include/test/cef_test_helpers.h"
+#include "libcef_dll/cpptoc/audio_bus_cpptoc.h"
+#include "libcef_dll/cpptoc/auth_callback_cpptoc.h"
+#include "libcef_dll/cpptoc/before_download_callback_cpptoc.h"
+#include "libcef_dll/cpptoc/binary_value_cpptoc.h"
+#include "libcef_dll/cpptoc/browser_cpptoc.h"
+#include "libcef_dll/cpptoc/browser_host_cpptoc.h"
+#include "libcef_dll/cpptoc/callback_cpptoc.h"
+#include "libcef_dll/cpptoc/command_line_cpptoc.h"
+#include "libcef_dll/cpptoc/context_menu_params_cpptoc.h"
+#include "libcef_dll/cpptoc/dictionary_value_cpptoc.h"
+#include "libcef_dll/cpptoc/domdocument_cpptoc.h"
+#include "libcef_dll/cpptoc/domnode_cpptoc.h"
+#include "libcef_dll/cpptoc/download_item_callback_cpptoc.h"
+#include "libcef_dll/cpptoc/download_item_cpptoc.h"
+#include "libcef_dll/cpptoc/drag_data_cpptoc.h"
+#include "libcef_dll/cpptoc/extension_cpptoc.h"
+#include "libcef_dll/cpptoc/file_dialog_callback_cpptoc.h"
+#include "libcef_dll/cpptoc/frame_cpptoc.h"
+#include "libcef_dll/cpptoc/get_extension_resource_callback_cpptoc.h"
+#include "libcef_dll/cpptoc/image_cpptoc.h"
+#include "libcef_dll/cpptoc/jsdialog_callback_cpptoc.h"
+#include "libcef_dll/cpptoc/list_value_cpptoc.h"
+#include "libcef_dll/cpptoc/menu_model_cpptoc.h"
+#include "libcef_dll/cpptoc/navigation_entry_cpptoc.h"
+#include "libcef_dll/cpptoc/print_dialog_callback_cpptoc.h"
+#include "libcef_dll/cpptoc/print_job_callback_cpptoc.h"
+#include "libcef_dll/cpptoc/print_settings_cpptoc.h"
+#include "libcef_dll/cpptoc/process_message_cpptoc.h"
+#include "libcef_dll/cpptoc/request_callback_cpptoc.h"
+#include "libcef_dll/cpptoc/run_context_menu_callback_cpptoc.h"
+#include "libcef_dll/cpptoc/scheme_registrar_cpptoc.h"
+#include "libcef_dll/cpptoc/select_client_certificate_callback_cpptoc.h"
+#include "libcef_dll/cpptoc/server_cpptoc.h"
+#include "libcef_dll/cpptoc/sslinfo_cpptoc.h"
+#include "libcef_dll/cpptoc/sslstatus_cpptoc.h"
+#include "libcef_dll/cpptoc/stream_reader_cpptoc.h"
+#include "libcef_dll/cpptoc/stream_writer_cpptoc.h"
+#include "libcef_dll/cpptoc/task_runner_cpptoc.h"
+#include "libcef_dll/cpptoc/test/translator_test_cpptoc.h"
+#include "libcef_dll/cpptoc/test/translator_test_ref_ptr_library_child_child_cpptoc.h"
+#include "libcef_dll/cpptoc/test/translator_test_ref_ptr_library_child_cpptoc.h"
+#include "libcef_dll/cpptoc/test/translator_test_ref_ptr_library_cpptoc.h"
+#include "libcef_dll/cpptoc/test/translator_test_scoped_library_child_child_cpptoc.h"
+#include "libcef_dll/cpptoc/test/translator_test_scoped_library_child_cpptoc.h"
+#include "libcef_dll/cpptoc/test/translator_test_scoped_library_cpptoc.h"
+#include "libcef_dll/cpptoc/thread_cpptoc.h"
+#include "libcef_dll/cpptoc/urlrequest_cpptoc.h"
+#include "libcef_dll/cpptoc/v8context_cpptoc.h"
+#include "libcef_dll/cpptoc/v8exception_cpptoc.h"
+#include "libcef_dll/cpptoc/v8stack_frame_cpptoc.h"
+#include "libcef_dll/cpptoc/v8stack_trace_cpptoc.h"
+#include "libcef_dll/cpptoc/v8value_cpptoc.h"
+#include "libcef_dll/cpptoc/value_cpptoc.h"
+#include "libcef_dll/cpptoc/views/box_layout_cpptoc.h"
+#include "libcef_dll/cpptoc/views/browser_view_cpptoc.h"
+#include "libcef_dll/cpptoc/views/button_cpptoc.h"
+#include "libcef_dll/cpptoc/views/display_cpptoc.h"
+#include "libcef_dll/cpptoc/views/fill_layout_cpptoc.h"
+#include "libcef_dll/cpptoc/views/label_button_cpptoc.h"
+#include "libcef_dll/cpptoc/views/layout_cpptoc.h"
+#include "libcef_dll/cpptoc/views/menu_button_cpptoc.h"
+#include "libcef_dll/cpptoc/views/menu_button_pressed_lock_cpptoc.h"
+#include "libcef_dll/cpptoc/views/panel_cpptoc.h"
+#include "libcef_dll/cpptoc/views/scroll_view_cpptoc.h"
+#include "libcef_dll/cpptoc/views/textfield_cpptoc.h"
+#include "libcef_dll/cpptoc/views/view_cpptoc.h"
+#include "libcef_dll/cpptoc/views/window_cpptoc.h"
+#include "libcef_dll/cpptoc/waitable_event_cpptoc.h"
+#include "libcef_dll/cpptoc/web_plugin_info_cpptoc.h"
+#include "libcef_dll/cpptoc/x509cert_principal_cpptoc.h"
+#include "libcef_dll/cpptoc/x509certificate_cpptoc.h"
+#include "libcef_dll/cpptoc/xml_reader_cpptoc.h"
+#include "libcef_dll/cpptoc/zip_reader_cpptoc.h"
+#include "libcef_dll/ctocpp/accessibility_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/app_ctocpp.h"
+#include "libcef_dll/ctocpp/audio_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/browser_process_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/completion_callback_ctocpp.h"
+#include "libcef_dll/ctocpp/context_menu_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/cookie_visitor_ctocpp.h"
+#include "libcef_dll/ctocpp/delete_cookies_callback_ctocpp.h"
+#include "libcef_dll/ctocpp/dialog_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/display_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/domvisitor_ctocpp.h"
+#include "libcef_dll/ctocpp/download_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/download_image_callback_ctocpp.h"
+#include "libcef_dll/ctocpp/drag_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/end_tracing_callback_ctocpp.h"
+#include "libcef_dll/ctocpp/extension_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/find_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/focus_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/jsdialog_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/keyboard_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/life_span_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/load_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/menu_model_delegate_ctocpp.h"
+#include "libcef_dll/ctocpp/navigation_entry_visitor_ctocpp.h"
+#include "libcef_dll/ctocpp/pdf_print_callback_ctocpp.h"
+#include "libcef_dll/ctocpp/print_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/read_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/register_cdm_callback_ctocpp.h"
+#include "libcef_dll/ctocpp/render_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/render_process_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/request_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/resolve_callback_ctocpp.h"
+#include "libcef_dll/ctocpp/resource_bundle_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/resource_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/response_filter_ctocpp.h"
+#include "libcef_dll/ctocpp/run_file_dialog_callback_ctocpp.h"
+#include "libcef_dll/ctocpp/scheme_handler_factory_ctocpp.h"
+#include "libcef_dll/ctocpp/server_handler_ctocpp.h"
+#include "libcef_dll/ctocpp/set_cookie_callback_ctocpp.h"
+#include "libcef_dll/ctocpp/string_visitor_ctocpp.h"
+#include "libcef_dll/ctocpp/task_ctocpp.h"
+#include "libcef_dll/ctocpp/test/translator_test_ref_ptr_client_child_ctocpp.h"
+#include "libcef_dll/ctocpp/test/translator_test_ref_ptr_client_ctocpp.h"
+#include "libcef_dll/ctocpp/test/translator_test_scoped_client_child_ctocpp.h"
+#include "libcef_dll/ctocpp/test/translator_test_scoped_client_ctocpp.h"
+#include "libcef_dll/ctocpp/urlrequest_client_ctocpp.h"
+#include "libcef_dll/ctocpp/v8accessor_ctocpp.h"
+#include "libcef_dll/ctocpp/v8array_buffer_release_callback_ctocpp.h"
+#include "libcef_dll/ctocpp/v8handler_ctocpp.h"
+#include "libcef_dll/ctocpp/v8interceptor_ctocpp.h"
+#include "libcef_dll/ctocpp/views/browser_view_delegate_ctocpp.h"
+#include "libcef_dll/ctocpp/views/button_delegate_ctocpp.h"
+#include "libcef_dll/ctocpp/views/menu_button_delegate_ctocpp.h"
+#include "libcef_dll/ctocpp/views/panel_delegate_ctocpp.h"
+#include "libcef_dll/ctocpp/views/textfield_delegate_ctocpp.h"
+#include "libcef_dll/ctocpp/views/view_delegate_ctocpp.h"
+#include "libcef_dll/ctocpp/views/window_delegate_ctocpp.h"
+#include "libcef_dll/ctocpp/web_plugin_info_visitor_ctocpp.h"
+#include "libcef_dll/ctocpp/web_plugin_unstable_callback_ctocpp.h"
+#include "libcef_dll/ctocpp/write_handler_ctocpp.h"
+#include "libcef_dll/transfer_util.h"
+
+// GLOBAL FUNCTIONS - Body may be edited by hand.
+
+CEF_EXPORT int cef_execute_process(const struct _cef_main_args_t* args,
+                                   struct _cef_app_t* application,
+                                   void* windows_sandbox_info) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: args; type: struct_byref_const
+  DCHECK(args);
+  if (!args)
+    return 0;
+  // Unverified params: application, windows_sandbox_info
+
+  // Translate param: args; type: struct_byref_const
+  CefMainArgs argsObj;
+  if (args)
+    argsObj.Set(*args, false);
+
+  // Execute
+  int _retval = CefExecuteProcess(argsObj, CefAppCToCpp::Wrap(application),
+                                  windows_sandbox_info);
+
+  // Return type: simple
+  return _retval;
+}
+
+CEF_EXPORT int cef_initialize(const struct _cef_main_args_t* args,
+                              const struct _cef_settings_t* settings,
+                              struct _cef_app_t* application,
+                              void* windows_sandbox_info) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: args; type: struct_byref_const
+  DCHECK(args);
+  if (!args)
+    return 0;
+  // Verify param: settings; type: struct_byref_const
+  DCHECK(settings);
+  if (!settings)
+    return 0;
+  // Unverified params: application, windows_sandbox_info
+
+  // Translate param: args; type: struct_byref_const
+  CefMainArgs argsObj;
+  if (args)
+    argsObj.Set(*args, false);
+  // Translate param: settings; type: struct_byref_const
+  CefSettings settingsObj;
+  if (settings)
+    settingsObj.Set(*settings, false);
+
+  // Execute
+  bool _retval =
+      CefInitialize(argsObj, settingsObj, CefAppCToCpp::Wrap(application),
+                    windows_sandbox_info);
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT void cef_shutdown() {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  CefShutdown();
+
+#if DCHECK_IS_ON()
+  // Check that all wrapper objects have been destroyed
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefAccessibilityHandlerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefAudioBusCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefAudioHandlerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefAuthCallbackCppToC::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefBeforeDownloadCallbackCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefBinaryValueCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefBoxLayoutCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefBrowserCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefBrowserHostCppToC::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefBrowserProcessHandlerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefBrowserViewCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefBrowserViewDelegateCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefButtonCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefButtonDelegateCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefCallbackCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefCompletionCallbackCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefContextMenuHandlerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefContextMenuParamsCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefCookieVisitorCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefDOMDocumentCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefDOMNodeCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefDOMVisitorCToCpp::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefDeleteCookiesCallbackCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefDialogHandlerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefDictionaryValueCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefDisplayCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefDisplayHandlerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefDownloadHandlerCToCpp::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefDownloadImageCallbackCToCpp::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefDownloadItemCallbackCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefDownloadItemCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefDragDataCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefDragHandlerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefEndTracingCallbackCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefExtensionCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefExtensionHandlerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefFileDialogCallbackCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefFillLayoutCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefFindHandlerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefFocusHandlerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefFrameCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefGetExtensionResourceCallbackCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefImageCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefJSDialogCallbackCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefJSDialogHandlerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefKeyboardHandlerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefLabelButtonCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefLayoutCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefLifeSpanHandlerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefListValueCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefLoadHandlerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefMenuButtonCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefMenuButtonDelegateCToCpp::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefMenuButtonPressedLockCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefMenuModelCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefMenuModelDelegateCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefNavigationEntryCppToC::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefNavigationEntryVisitorCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefPanelCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefPanelDelegateCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefPdfPrintCallbackCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefPrintDialogCallbackCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefPrintHandlerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefPrintJobCallbackCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefPrintSettingsCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefProcessMessageCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefReadHandlerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefRegisterCdmCallbackCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefRenderHandlerCToCpp::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefRenderProcessHandlerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefRequestCallbackCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefRequestHandlerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefResolveCallbackCToCpp::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefResourceBundleHandlerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefResourceHandlerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefResponseFilterCToCpp::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefRunContextMenuCallbackCppToC::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefRunFileDialogCallbackCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefSSLInfoCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefSSLStatusCppToC::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefSchemeHandlerFactoryCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefSchemeRegistrarCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefScrollViewCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefSelectClientCertificateCallbackCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefServerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefServerHandlerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefSetCookieCallbackCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefStreamReaderCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefStreamWriterCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefStringVisitorCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefTaskCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefTaskRunnerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefTextfieldCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefTextfieldDelegateCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefThreadCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefTranslatorTestCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefTranslatorTestRefPtrClientCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefTranslatorTestRefPtrClientChildCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefTranslatorTestRefPtrLibraryChildChildCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefTranslatorTestRefPtrLibraryChildCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefTranslatorTestRefPtrLibraryCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefTranslatorTestScopedClientCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefTranslatorTestScopedClientChildCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefTranslatorTestScopedLibraryChildChildCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefTranslatorTestScopedLibraryChildCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefTranslatorTestScopedLibraryCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefURLRequestClientCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefURLRequestCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefV8AccessorCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefV8ArrayBufferReleaseCallbackCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefV8ContextCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefV8ExceptionCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefV8HandlerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefV8InterceptorCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefV8StackFrameCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefV8StackTraceCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefV8ValueCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefValueCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefViewCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefViewDelegateCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefWaitableEventCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefWebPluginInfoCppToC::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefWebPluginInfoVisitorCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefWebPluginUnstableCallbackCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefWindowCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefWindowDelegateCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefWriteHandlerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefX509CertPrincipalCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefX509CertificateCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefXmlReaderCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefZipReaderCppToC::DebugObjCt));
+#endif  // DCHECK_IS_ON()
+}
+
+CEF_EXPORT void cef_do_message_loop_work() {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  CefDoMessageLoopWork();
+}
+
+CEF_EXPORT void cef_run_message_loop() {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  CefRunMessageLoop();
+}
+
+CEF_EXPORT void cef_quit_message_loop() {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  CefQuitMessageLoop();
+}
+
+CEF_EXPORT void cef_set_osmodal_loop(int osModalLoop) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  CefSetOSModalLoop(osModalLoop ? true : false);
+}
+
+CEF_EXPORT void cef_enable_highdpi_support() {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  CefEnableHighDPISupport();
+}
+
+CEF_EXPORT int cef_crash_reporting_enabled() {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  bool _retval = CefCrashReportingEnabled();
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT void cef_set_crash_key_value(const cef_string_t* key,
+                                        const cef_string_t* value) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: key; type: string_byref_const
+  DCHECK(key);
+  if (!key)
+    return;
+  // Unverified params: value
+
+  // Execute
+  CefSetCrashKeyValue(CefString(key), CefString(value));
+}
+
+CEF_EXPORT int cef_create_directory(const cef_string_t* full_path) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: full_path; type: string_byref_const
+  DCHECK(full_path);
+  if (!full_path)
+    return 0;
+
+  // Execute
+  bool _retval = CefCreateDirectory(CefString(full_path));
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT int cef_get_temp_directory(cef_string_t* temp_dir) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: temp_dir; type: string_byref
+  DCHECK(temp_dir);
+  if (!temp_dir)
+    return 0;
+
+  // Translate param: temp_dir; type: string_byref
+  CefString temp_dirStr(temp_dir);
+
+  // Execute
+  bool _retval = CefGetTempDirectory(temp_dirStr);
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT int cef_create_new_temp_directory(const cef_string_t* prefix,
+                                             cef_string_t* new_temp_path) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: new_temp_path; type: string_byref
+  DCHECK(new_temp_path);
+  if (!new_temp_path)
+    return 0;
+  // Unverified params: prefix
+
+  // Translate param: new_temp_path; type: string_byref
+  CefString new_temp_pathStr(new_temp_path);
+
+  // Execute
+  bool _retval = CefCreateNewTempDirectory(CefString(prefix), new_temp_pathStr);
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT int cef_create_temp_directory_in_directory(
+    const cef_string_t* base_dir,
+    const cef_string_t* prefix,
+    cef_string_t* new_dir) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: base_dir; type: string_byref_const
+  DCHECK(base_dir);
+  if (!base_dir)
+    return 0;
+  // Verify param: new_dir; type: string_byref
+  DCHECK(new_dir);
+  if (!new_dir)
+    return 0;
+  // Unverified params: prefix
+
+  // Translate param: new_dir; type: string_byref
+  CefString new_dirStr(new_dir);
+
+  // Execute
+  bool _retval = CefCreateTempDirectoryInDirectory(
+      CefString(base_dir), CefString(prefix), new_dirStr);
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT int cef_directory_exists(const cef_string_t* path) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: path; type: string_byref_const
+  DCHECK(path);
+  if (!path)
+    return 0;
+
+  // Execute
+  bool _retval = CefDirectoryExists(CefString(path));
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT int cef_delete_file(const cef_string_t* path, int recursive) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: path; type: string_byref_const
+  DCHECK(path);
+  if (!path)
+    return 0;
+
+  // Execute
+  bool _retval = CefDeleteFile(CefString(path), recursive ? true : false);
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT int cef_zip_directory(const cef_string_t* src_dir,
+                                 const cef_string_t* dest_file,
+                                 int include_hidden_files) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: src_dir; type: string_byref_const
+  DCHECK(src_dir);
+  if (!src_dir)
+    return 0;
+  // Verify param: dest_file; type: string_byref_const
+  DCHECK(dest_file);
+  if (!dest_file)
+    return 0;
+
+  // Execute
+  bool _retval = CefZipDirectory(CefString(src_dir), CefString(dest_file),
+                                 include_hidden_files ? true : false);
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT void cef_load_crlsets_file(const cef_string_t* path) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: path; type: string_byref_const
+  DCHECK(path);
+  if (!path)
+    return;
+
+  // Execute
+  CefLoadCRLSetsFile(CefString(path));
+}
+
+CEF_EXPORT int cef_add_cross_origin_whitelist_entry(
+    const cef_string_t* source_origin,
+    const cef_string_t* target_protocol,
+    const cef_string_t* target_domain,
+    int allow_target_subdomains) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: source_origin; type: string_byref_const
+  DCHECK(source_origin);
+  if (!source_origin)
+    return 0;
+  // Verify param: target_protocol; type: string_byref_const
+  DCHECK(target_protocol);
+  if (!target_protocol)
+    return 0;
+  // Unverified params: target_domain
+
+  // Execute
+  bool _retval = CefAddCrossOriginWhitelistEntry(
+      CefString(source_origin), CefString(target_protocol),
+      CefString(target_domain), allow_target_subdomains ? true : false);
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT int cef_remove_cross_origin_whitelist_entry(
+    const cef_string_t* source_origin,
+    const cef_string_t* target_protocol,
+    const cef_string_t* target_domain,
+    int allow_target_subdomains) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: source_origin; type: string_byref_const
+  DCHECK(source_origin);
+  if (!source_origin)
+    return 0;
+  // Verify param: target_protocol; type: string_byref_const
+  DCHECK(target_protocol);
+  if (!target_protocol)
+    return 0;
+  // Unverified params: target_domain
+
+  // Execute
+  bool _retval = CefRemoveCrossOriginWhitelistEntry(
+      CefString(source_origin), CefString(target_protocol),
+      CefString(target_domain), allow_target_subdomains ? true : false);
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT int cef_clear_cross_origin_whitelist() {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  bool _retval = CefClearCrossOriginWhitelist();
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT int cef_parse_url(const cef_string_t* url,
+                             struct _cef_urlparts_t* parts) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: url; type: string_byref_const
+  DCHECK(url);
+  if (!url)
+    return 0;
+  // Verify param: parts; type: struct_byref
+  DCHECK(parts);
+  if (!parts)
+    return 0;
+
+  // Translate param: parts; type: struct_byref
+  CefURLParts partsObj;
+  if (parts)
+    partsObj.AttachTo(*parts);
+
+  // Execute
+  bool _retval = CefParseURL(CefString(url), partsObj);
+
+  // Restore param: parts; type: struct_byref
+  if (parts)
+    partsObj.DetachTo(*parts);
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT int cef_create_url(const struct _cef_urlparts_t* parts,
+                              cef_string_t* url) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: parts; type: struct_byref_const
+  DCHECK(parts);
+  if (!parts)
+    return 0;
+  // Verify param: url; type: string_byref
+  DCHECK(url);
+  if (!url)
+    return 0;
+
+  // Translate param: parts; type: struct_byref_const
+  CefURLParts partsObj;
+  if (parts)
+    partsObj.Set(*parts, false);
+  // Translate param: url; type: string_byref
+  CefString urlStr(url);
+
+  // Execute
+  bool _retval = CefCreateURL(partsObj, urlStr);
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT cef_string_userfree_t
+cef_format_url_for_security_display(const cef_string_t* origin_url) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: origin_url; type: string_byref_const
+  DCHECK(origin_url);
+  if (!origin_url)
+    return NULL;
+
+  // Execute
+  CefString _retval = CefFormatUrlForSecurityDisplay(CefString(origin_url));
+
+  // Return type: string
+  return _retval.DetachToUserFree();
+}
+
+CEF_EXPORT cef_string_userfree_t
+cef_get_mime_type(const cef_string_t* extension) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: extension; type: string_byref_const
+  DCHECK(extension);
+  if (!extension)
+    return NULL;
+
+  // Execute
+  CefString _retval = CefGetMimeType(CefString(extension));
+
+  // Return type: string
+  return _retval.DetachToUserFree();
+}
+
+CEF_EXPORT void cef_get_extensions_for_mime_type(const cef_string_t* mime_type,
+                                                 cef_string_list_t extensions) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: mime_type; type: string_byref_const
+  DCHECK(mime_type);
+  if (!mime_type)
+    return;
+  // Verify param: extensions; type: string_vec_byref
+  DCHECK(extensions);
+  if (!extensions)
+    return;
+
+  // Translate param: extensions; type: string_vec_byref
+  std::vector<CefString> extensionsList;
+  transfer_string_list_contents(extensions, extensionsList);
+
+  // Execute
+  CefGetExtensionsForMimeType(CefString(mime_type), extensionsList);
+
+  // Restore param: extensions; type: string_vec_byref
+  cef_string_list_clear(extensions);
+  transfer_string_list_contents(extensionsList, extensions);
+}
+
+CEF_EXPORT cef_string_userfree_t cef_base64encode(const void* data,
+                                                  size_t data_size) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: data; type: simple_byaddr
+  DCHECK(data);
+  if (!data)
+    return NULL;
+
+  // Execute
+  CefString _retval = CefBase64Encode(data, data_size);
+
+  // Return type: string
+  return _retval.DetachToUserFree();
+}
+
+CEF_EXPORT struct _cef_binary_value_t* cef_base64decode(
+    const cef_string_t* data) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: data; type: string_byref_const
+  DCHECK(data);
+  if (!data)
+    return NULL;
+
+  // Execute
+  CefRefPtr<CefBinaryValue> _retval = CefBase64Decode(CefString(data));
+
+  // Return type: refptr_same
+  return CefBinaryValueCppToC::Wrap(_retval);
+}
+
+CEF_EXPORT cef_string_userfree_t cef_uriencode(const cef_string_t* text,
+                                               int use_plus) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: text; type: string_byref_const
+  DCHECK(text);
+  if (!text)
+    return NULL;
+
+  // Execute
+  CefString _retval = CefURIEncode(CefString(text), use_plus ? true : false);
+
+  // Return type: string
+  return _retval.DetachToUserFree();
+}
+
+CEF_EXPORT cef_string_userfree_t
+cef_uridecode(const cef_string_t* text,
+              int convert_to_utf8,
+              cef_uri_unescape_rule_t unescape_rule) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: text; type: string_byref_const
+  DCHECK(text);
+  if (!text)
+    return NULL;
+
+  // Execute
+  CefString _retval = CefURIDecode(
+      CefString(text), convert_to_utf8 ? true : false, unescape_rule);
+
+  // Return type: string
+  return _retval.DetachToUserFree();
+}
+
+CEF_EXPORT struct _cef_value_t* cef_parse_json(
+    const cef_string_t* json_string,
+    cef_json_parser_options_t options) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: json_string; type: string_byref_const
+  DCHECK(json_string);
+  if (!json_string)
+    return NULL;
+
+  // Execute
+  CefRefPtr<CefValue> _retval = CefParseJSON(CefString(json_string), options);
+
+  // Return type: refptr_same
+  return CefValueCppToC::Wrap(_retval);
+}
+
+CEF_EXPORT struct _cef_value_t* cef_parse_jsonand_return_error(
+    const cef_string_t* json_string,
+    cef_json_parser_options_t options,
+    cef_json_parser_error_t* error_code_out,
+    cef_string_t* error_msg_out) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: json_string; type: string_byref_const
+  DCHECK(json_string);
+  if (!json_string)
+    return NULL;
+  // Verify param: error_code_out; type: simple_byref
+  DCHECK(error_code_out);
+  if (!error_code_out)
+    return NULL;
+  // Verify param: error_msg_out; type: string_byref
+  DCHECK(error_msg_out);
+  if (!error_msg_out)
+    return NULL;
+
+  // Translate param: error_code_out; type: simple_byref
+  cef_json_parser_error_t error_code_outVal =
+      error_code_out ? *error_code_out : JSON_NO_ERROR;
+  // Translate param: error_msg_out; type: string_byref
+  CefString error_msg_outStr(error_msg_out);
+
+  // Execute
+  CefRefPtr<CefValue> _retval = CefParseJSONAndReturnError(
+      CefString(json_string), options, error_code_outVal, error_msg_outStr);
+
+  // Restore param: error_code_out; type: simple_byref
+  if (error_code_out)
+    *error_code_out = error_code_outVal;
+
+  // Return type: refptr_same
+  return CefValueCppToC::Wrap(_retval);
+}
+
+CEF_EXPORT cef_string_userfree_t
+cef_write_json(struct _cef_value_t* node, cef_json_writer_options_t options) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: node; type: refptr_same
+  DCHECK(node);
+  if (!node)
+    return NULL;
+
+  // Execute
+  CefString _retval = CefWriteJSON(CefValueCppToC::Unwrap(node), options);
+
+  // Return type: string
+  return _retval.DetachToUserFree();
+}
+
+CEF_EXPORT int cef_get_path(cef_path_key_t key, cef_string_t* path) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: path; type: string_byref
+  DCHECK(path);
+  if (!path)
+    return 0;
+
+  // Translate param: path; type: string_byref
+  CefString pathStr(path);
+
+  // Execute
+  bool _retval = CefGetPath(key, pathStr);
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT int cef_launch_process(struct _cef_command_line_t* command_line) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: command_line; type: refptr_same
+  DCHECK(command_line);
+  if (!command_line)
+    return 0;
+
+  // Execute
+  bool _retval = CefLaunchProcess(CefCommandLineCppToC::Unwrap(command_line));
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT int cef_register_scheme_handler_factory(
+    const cef_string_t* scheme_name,
+    const cef_string_t* domain_name,
+    struct _cef_scheme_handler_factory_t* factory) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: scheme_name; type: string_byref_const
+  DCHECK(scheme_name);
+  if (!scheme_name)
+    return 0;
+  // Unverified params: domain_name, factory
+
+  // Execute
+  bool _retval = CefRegisterSchemeHandlerFactory(
+      CefString(scheme_name), CefString(domain_name),
+      CefSchemeHandlerFactoryCToCpp::Wrap(factory));
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT int cef_clear_scheme_handler_factories() {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  bool _retval = CefClearSchemeHandlerFactories();
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT int cef_is_cert_status_error(cef_cert_status_t status) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  bool _retval = CefIsCertStatusError(status);
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT int cef_is_cert_status_minor_error(cef_cert_status_t status) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  bool _retval = CefIsCertStatusMinorError(status);
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT int cef_currently_on(cef_thread_id_t threadId) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  bool _retval = CefCurrentlyOn(threadId);
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT int cef_post_task(cef_thread_id_t threadId,
+                             struct _cef_task_t* task) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: task; type: refptr_diff
+  DCHECK(task);
+  if (!task)
+    return 0;
+
+  // Execute
+  bool _retval = CefPostTask(threadId, CefTaskCToCpp::Wrap(task));
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT int cef_post_delayed_task(cef_thread_id_t threadId,
+                                     struct _cef_task_t* task,
+                                     int64 delay_ms) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: task; type: refptr_diff
+  DCHECK(task);
+  if (!task)
+    return 0;
+
+  // Execute
+  bool _retval =
+      CefPostDelayedTask(threadId, CefTaskCToCpp::Wrap(task), delay_ms);
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT int cef_begin_tracing(const cef_string_t* categories,
+                                 struct _cef_completion_callback_t* callback) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Unverified params: categories, callback
+
+  // Execute
+  bool _retval = CefBeginTracing(CefString(categories),
+                                 CefCompletionCallbackCToCpp::Wrap(callback));
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT int cef_end_tracing(const cef_string_t* tracing_file,
+                               struct _cef_end_tracing_callback_t* callback) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Unverified params: tracing_file, callback
+
+  // Execute
+  bool _retval = CefEndTracing(CefString(tracing_file),
+                               CefEndTracingCallbackCToCpp::Wrap(callback));
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT int64 cef_now_from_system_trace_time() {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  int64 _retval = CefNowFromSystemTraceTime();
+
+  // Return type: simple
+  return _retval;
+}
+
+CEF_EXPORT int cef_register_extension(const cef_string_t* extension_name,
+                                      const cef_string_t* javascript_code,
+                                      struct _cef_v8handler_t* handler) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: extension_name; type: string_byref_const
+  DCHECK(extension_name);
+  if (!extension_name)
+    return 0;
+  // Verify param: javascript_code; type: string_byref_const
+  DCHECK(javascript_code);
+  if (!javascript_code)
+    return 0;
+  // Unverified params: handler
+
+  // Execute
+  bool _retval = CefRegisterExtension(CefString(extension_name),
+                                      CefString(javascript_code),
+                                      CefV8HandlerCToCpp::Wrap(handler));
+
+  // Return type: bool
+  return _retval;
+}
+
+CEF_EXPORT void cef_visit_web_plugin_info(
+    struct _cef_web_plugin_info_visitor_t* visitor) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: visitor; type: refptr_diff
+  DCHECK(visitor);
+  if (!visitor)
+    return;
+
+  // Execute
+  CefVisitWebPluginInfo(CefWebPluginInfoVisitorCToCpp::Wrap(visitor));
+}
+
+CEF_EXPORT void cef_refresh_web_plugins() {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  CefRefreshWebPlugins();
+}
+
+CEF_EXPORT void cef_unregister_internal_web_plugin(const cef_string_t* path) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: path; type: string_byref_const
+  DCHECK(path);
+  if (!path)
+    return;
+
+  // Execute
+  CefUnregisterInternalWebPlugin(CefString(path));
+}
+
+CEF_EXPORT void cef_register_web_plugin_crash(const cef_string_t* path) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: path; type: string_byref_const
+  DCHECK(path);
+  if (!path)
+    return;
+
+  // Execute
+  CefRegisterWebPluginCrash(CefString(path));
+}
+
+CEF_EXPORT void cef_is_web_plugin_unstable(
+    const cef_string_t* path,
+    struct _cef_web_plugin_unstable_callback_t* callback) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: path; type: string_byref_const
+  DCHECK(path);
+  if (!path)
+    return;
+  // Verify param: callback; type: refptr_diff
+  DCHECK(callback);
+  if (!callback)
+    return;
+
+  // Execute
+  CefIsWebPluginUnstable(CefString(path),
+                         CefWebPluginUnstableCallbackCToCpp::Wrap(callback));
+}
+
+CEF_EXPORT void cef_register_widevine_cdm(
+    const cef_string_t* path,
+    struct _cef_register_cdm_callback_t* callback) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: path; type: string_byref_const
+  DCHECK(path);
+  if (!path)
+    return;
+  // Unverified params: callback
+
+  // Execute
+  CefRegisterWidevineCdm(CefString(path),
+                         CefRegisterCdmCallbackCToCpp::Wrap(callback));
+}
+
+CEF_EXPORT void cef_execute_java_script_with_user_gesture_for_tests(
+    struct _cef_frame_t* frame,
+    const cef_string_t* javascript) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: frame; type: refptr_same
+  DCHECK(frame);
+  if (!frame)
+    return;
+  // Unverified params: javascript
+
+  // Execute
+  CefExecuteJavaScriptWithUserGestureForTests(CefFrameCppToC::Unwrap(frame),
+                                              CefString(javascript));
+}
diff --git a/libcef_dll/wrapper/libcef_dll_wrapper.cc b/libcef_dll/wrapper/libcef_dll_wrapper.cc
index 9380d64..fdc5478 100644
--- a/libcef_dll/wrapper/libcef_dll_wrapper.cc
+++ b/libcef_dll/wrapper/libcef_dll_wrapper.cc
@@ -1,1125 +1,1129 @@
-// Copyright (c) 2018 The Chromium Embedded Framework Authors. All rights
-// reserved. Use of this source code is governed by a BSD-style license that
-// can be found in the LICENSE file.
-//
-// ---------------------------------------------------------------------------
-//
-// This file was generated by the CEF translator tool. If making changes by
-// hand only do so within the body of existing method and function
-// implementations. See the translator.README.txt file in the tools directory
-// for more information.
-//
-// $hash=0549060b3d0b129aa1d4b0824eeacf3af9d3d5ab$
-//
-
-#include "include/capi/cef_app_capi.h"
-#include "include/capi/cef_crash_util_capi.h"
-#include "include/capi/cef_file_util_capi.h"
-#include "include/capi/cef_origin_whitelist_capi.h"
-#include "include/capi/cef_parser_capi.h"
-#include "include/capi/cef_path_util_capi.h"
-#include "include/capi/cef_process_util_capi.h"
-#include "include/capi/cef_scheme_capi.h"
-#include "include/capi/cef_ssl_info_capi.h"
-#include "include/capi/cef_task_capi.h"
-#include "include/capi/cef_trace_capi.h"
-#include "include/capi/cef_v8_capi.h"
-#include "include/capi/cef_web_plugin_capi.h"
-#include "include/capi/test/cef_test_helpers_capi.h"
-#include "include/cef_app.h"
-#include "include/cef_crash_util.h"
-#include "include/cef_file_util.h"
-#include "include/cef_origin_whitelist.h"
-#include "include/cef_parser.h"
-#include "include/cef_path_util.h"
-#include "include/cef_process_util.h"
-#include "include/cef_scheme.h"
-#include "include/cef_ssl_info.h"
-#include "include/cef_task.h"
-#include "include/cef_trace.h"
-#include "include/cef_v8.h"
-#include "include/cef_version.h"
-#include "include/cef_web_plugin.h"
-#include "include/test/cef_test_helpers.h"
-#include "libcef_dll/cpptoc/accessibility_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/app_cpptoc.h"
-#include "libcef_dll/cpptoc/browser_process_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/completion_callback_cpptoc.h"
-#include "libcef_dll/cpptoc/context_menu_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/cookie_visitor_cpptoc.h"
-#include "libcef_dll/cpptoc/delete_cookies_callback_cpptoc.h"
-#include "libcef_dll/cpptoc/dialog_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/display_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/domvisitor_cpptoc.h"
-#include "libcef_dll/cpptoc/download_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/download_image_callback_cpptoc.h"
-#include "libcef_dll/cpptoc/drag_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/end_tracing_callback_cpptoc.h"
-#include "libcef_dll/cpptoc/extension_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/find_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/focus_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/jsdialog_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/keyboard_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/life_span_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/load_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/menu_model_delegate_cpptoc.h"
-#include "libcef_dll/cpptoc/navigation_entry_visitor_cpptoc.h"
-#include "libcef_dll/cpptoc/pdf_print_callback_cpptoc.h"
-#include "libcef_dll/cpptoc/print_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/read_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/register_cdm_callback_cpptoc.h"
-#include "libcef_dll/cpptoc/render_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/render_process_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/request_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/resolve_callback_cpptoc.h"
-#include "libcef_dll/cpptoc/resource_bundle_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/resource_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/response_filter_cpptoc.h"
-#include "libcef_dll/cpptoc/run_file_dialog_callback_cpptoc.h"
-#include "libcef_dll/cpptoc/scheme_handler_factory_cpptoc.h"
-#include "libcef_dll/cpptoc/server_handler_cpptoc.h"
-#include "libcef_dll/cpptoc/set_cookie_callback_cpptoc.h"
-#include "libcef_dll/cpptoc/string_visitor_cpptoc.h"
-#include "libcef_dll/cpptoc/task_cpptoc.h"
-#include "libcef_dll/cpptoc/test/translator_test_ref_ptr_client_child_cpptoc.h"
-#include "libcef_dll/cpptoc/test/translator_test_ref_ptr_client_cpptoc.h"
-#include "libcef_dll/cpptoc/test/translator_test_scoped_client_child_cpptoc.h"
-#include "libcef_dll/cpptoc/test/translator_test_scoped_client_cpptoc.h"
-#include "libcef_dll/cpptoc/urlrequest_client_cpptoc.h"
-#include "libcef_dll/cpptoc/v8accessor_cpptoc.h"
-#include "libcef_dll/cpptoc/v8array_buffer_release_callback_cpptoc.h"
-#include "libcef_dll/cpptoc/v8handler_cpptoc.h"
-#include "libcef_dll/cpptoc/v8interceptor_cpptoc.h"
-#include "libcef_dll/cpptoc/views/browser_view_delegate_cpptoc.h"
-#include "libcef_dll/cpptoc/views/button_delegate_cpptoc.h"
-#include "libcef_dll/cpptoc/views/menu_button_delegate_cpptoc.h"
-#include "libcef_dll/cpptoc/views/panel_delegate_cpptoc.h"
-#include "libcef_dll/cpptoc/views/textfield_delegate_cpptoc.h"
-#include "libcef_dll/cpptoc/views/view_delegate_cpptoc.h"
-#include "libcef_dll/cpptoc/views/window_delegate_cpptoc.h"
-#include "libcef_dll/cpptoc/web_plugin_info_visitor_cpptoc.h"
-#include "libcef_dll/cpptoc/web_plugin_unstable_callback_cpptoc.h"
-#include "libcef_dll/cpptoc/write_handler_cpptoc.h"
-#include "libcef_dll/ctocpp/auth_callback_ctocpp.h"
-#include "libcef_dll/ctocpp/before_download_callback_ctocpp.h"
-#include "libcef_dll/ctocpp/binary_value_ctocpp.h"
-#include "libcef_dll/ctocpp/browser_ctocpp.h"
-#include "libcef_dll/ctocpp/browser_host_ctocpp.h"
-#include "libcef_dll/ctocpp/callback_ctocpp.h"
-#include "libcef_dll/ctocpp/command_line_ctocpp.h"
-#include "libcef_dll/ctocpp/context_menu_params_ctocpp.h"
-#include "libcef_dll/ctocpp/dictionary_value_ctocpp.h"
-#include "libcef_dll/ctocpp/domdocument_ctocpp.h"
-#include "libcef_dll/ctocpp/domnode_ctocpp.h"
-#include "libcef_dll/ctocpp/download_item_callback_ctocpp.h"
-#include "libcef_dll/ctocpp/download_item_ctocpp.h"
-#include "libcef_dll/ctocpp/drag_data_ctocpp.h"
-#include "libcef_dll/ctocpp/extension_ctocpp.h"
-#include "libcef_dll/ctocpp/file_dialog_callback_ctocpp.h"
-#include "libcef_dll/ctocpp/frame_ctocpp.h"
-#include "libcef_dll/ctocpp/get_extension_resource_callback_ctocpp.h"
-#include "libcef_dll/ctocpp/image_ctocpp.h"
-#include "libcef_dll/ctocpp/jsdialog_callback_ctocpp.h"
-#include "libcef_dll/ctocpp/list_value_ctocpp.h"
-#include "libcef_dll/ctocpp/menu_model_ctocpp.h"
-#include "libcef_dll/ctocpp/navigation_entry_ctocpp.h"
-#include "libcef_dll/ctocpp/print_dialog_callback_ctocpp.h"
-#include "libcef_dll/ctocpp/print_job_callback_ctocpp.h"
-#include "libcef_dll/ctocpp/print_settings_ctocpp.h"
-#include "libcef_dll/ctocpp/process_message_ctocpp.h"
-#include "libcef_dll/ctocpp/request_callback_ctocpp.h"
-#include "libcef_dll/ctocpp/run_context_menu_callback_ctocpp.h"
-#include "libcef_dll/ctocpp/scheme_registrar_ctocpp.h"
-#include "libcef_dll/ctocpp/select_client_certificate_callback_ctocpp.h"
-#include "libcef_dll/ctocpp/server_ctocpp.h"
-#include "libcef_dll/ctocpp/sslinfo_ctocpp.h"
-#include "libcef_dll/ctocpp/sslstatus_ctocpp.h"
-#include "libcef_dll/ctocpp/stream_reader_ctocpp.h"
-#include "libcef_dll/ctocpp/stream_writer_ctocpp.h"
-#include "libcef_dll/ctocpp/task_runner_ctocpp.h"
-#include "libcef_dll/ctocpp/test/translator_test_ctocpp.h"
-#include "libcef_dll/ctocpp/test/translator_test_ref_ptr_library_child_child_ctocpp.h"
-#include "libcef_dll/ctocpp/test/translator_test_ref_ptr_library_child_ctocpp.h"
-#include "libcef_dll/ctocpp/test/translator_test_ref_ptr_library_ctocpp.h"
-#include "libcef_dll/ctocpp/test/translator_test_scoped_library_child_child_ctocpp.h"
-#include "libcef_dll/ctocpp/test/translator_test_scoped_library_child_ctocpp.h"
-#include "libcef_dll/ctocpp/test/translator_test_scoped_library_ctocpp.h"
-#include "libcef_dll/ctocpp/thread_ctocpp.h"
-#include "libcef_dll/ctocpp/urlrequest_ctocpp.h"
-#include "libcef_dll/ctocpp/v8context_ctocpp.h"
-#include "libcef_dll/ctocpp/v8exception_ctocpp.h"
-#include "libcef_dll/ctocpp/v8stack_frame_ctocpp.h"
-#include "libcef_dll/ctocpp/v8stack_trace_ctocpp.h"
-#include "libcef_dll/ctocpp/v8value_ctocpp.h"
-#include "libcef_dll/ctocpp/value_ctocpp.h"
-#include "libcef_dll/ctocpp/views/box_layout_ctocpp.h"
-#include "libcef_dll/ctocpp/views/browser_view_ctocpp.h"
-#include "libcef_dll/ctocpp/views/button_ctocpp.h"
-#include "libcef_dll/ctocpp/views/display_ctocpp.h"
-#include "libcef_dll/ctocpp/views/fill_layout_ctocpp.h"
-#include "libcef_dll/ctocpp/views/label_button_ctocpp.h"
-#include "libcef_dll/ctocpp/views/layout_ctocpp.h"
-#include "libcef_dll/ctocpp/views/menu_button_ctocpp.h"
-#include "libcef_dll/ctocpp/views/menu_button_pressed_lock_ctocpp.h"
-#include "libcef_dll/ctocpp/views/panel_ctocpp.h"
-#include "libcef_dll/ctocpp/views/scroll_view_ctocpp.h"
-#include "libcef_dll/ctocpp/views/textfield_ctocpp.h"
-#include "libcef_dll/ctocpp/views/view_ctocpp.h"
-#include "libcef_dll/ctocpp/views/window_ctocpp.h"
-#include "libcef_dll/ctocpp/waitable_event_ctocpp.h"
-#include "libcef_dll/ctocpp/web_plugin_info_ctocpp.h"
-#include "libcef_dll/ctocpp/x509cert_principal_ctocpp.h"
-#include "libcef_dll/ctocpp/x509certificate_ctocpp.h"
-#include "libcef_dll/ctocpp/xml_reader_ctocpp.h"
-#include "libcef_dll/ctocpp/zip_reader_ctocpp.h"
-#include "libcef_dll/transfer_util.h"
-
-// Define used to facilitate parsing.
-#define CEF_GLOBAL
-
-// GLOBAL METHODS - Body may be edited by hand.
-
-CEF_GLOBAL int CefExecuteProcess(const CefMainArgs& args,
-                                 CefRefPtr<CefApp> application,
-                                 void* windows_sandbox_info) {
-  const char* api_hash = cef_api_hash(0);
-  if (strcmp(api_hash, CEF_API_HASH_PLATFORM)) {
-    // The libcef API hash does not match the current header API hash.
-    NOTREACHED();
-    return 0;
-  }
-
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Unverified params: application, windows_sandbox_info
-
-  // Execute
-  int _retval = cef_execute_process(&args, CefAppCppToC::Wrap(application),
-                                    windows_sandbox_info);
-
-  // Return type: simple
-  return _retval;
-}
-
-CEF_GLOBAL bool CefInitialize(const CefMainArgs& args,
-                              const CefSettings& settings,
-                              CefRefPtr<CefApp> application,
-                              void* windows_sandbox_info) {
-  const char* api_hash = cef_api_hash(0);
-  if (strcmp(api_hash, CEF_API_HASH_PLATFORM)) {
-    // The libcef API hash does not match the current header API hash.
-    NOTREACHED();
-    return false;
-  }
-
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Unverified params: application, windows_sandbox_info
-
-  // Execute
-  int _retval = cef_initialize(
-      &args, &settings, CefAppCppToC::Wrap(application), windows_sandbox_info);
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL void CefShutdown() {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  cef_shutdown();
-
-#if DCHECK_IS_ON()
-  // Check that all wrapper objects have been destroyed
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefAccessibilityHandlerCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefAuthCallbackCToCpp::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefBeforeDownloadCallbackCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefBinaryValueCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefBoxLayoutCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefBrowserCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefBrowserHostCToCpp::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefBrowserProcessHandlerCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefBrowserViewCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefBrowserViewDelegateCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefButtonCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefButtonDelegateCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefCallbackCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefCompletionCallbackCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefContextMenuHandlerCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefContextMenuParamsCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefCookieVisitorCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefDOMDocumentCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefDOMNodeCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefDOMVisitorCppToC::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefDeleteCookiesCallbackCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefDialogHandlerCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefDictionaryValueCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefDisplayCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefDisplayHandlerCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefDownloadHandlerCppToC::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefDownloadImageCallbackCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefDownloadItemCToCpp::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefDownloadItemCallbackCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefDragDataCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefDragHandlerCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefEndTracingCallbackCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefExtensionCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefExtensionHandlerCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefFileDialogCallbackCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefFillLayoutCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefFindHandlerCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefFocusHandlerCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefFrameCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefGetExtensionResourceCallbackCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefImageCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefJSDialogCallbackCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefJSDialogHandlerCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefKeyboardHandlerCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefLabelButtonCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefLayoutCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefLifeSpanHandlerCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefListValueCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefLoadHandlerCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefMenuButtonCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefMenuButtonDelegateCppToC::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefMenuButtonPressedLockCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefMenuModelCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefMenuModelDelegateCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefNavigationEntryCToCpp::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefNavigationEntryVisitorCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefPanelCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefPanelDelegateCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefPdfPrintCallbackCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefPrintDialogCallbackCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefPrintHandlerCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefPrintJobCallbackCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefPrintSettingsCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefProcessMessageCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefReadHandlerCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefRegisterCdmCallbackCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefRenderHandlerCppToC::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefRenderProcessHandlerCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefRequestCallbackCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefRequestHandlerCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefResolveCallbackCppToC::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefResourceBundleHandlerCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefResourceHandlerCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefResponseFilterCppToC::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefRunContextMenuCallbackCToCpp::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefRunFileDialogCallbackCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefSSLInfoCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefSSLStatusCToCpp::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefSchemeHandlerFactoryCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefSchemeRegistrarCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefScrollViewCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefSelectClientCertificateCallbackCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefServerCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefServerHandlerCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefSetCookieCallbackCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefStreamReaderCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefStreamWriterCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefStringVisitorCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefTaskCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefTaskRunnerCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefTextfieldCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefTextfieldDelegateCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefThreadCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefTranslatorTestCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefTranslatorTestRefPtrClientChildCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefTranslatorTestRefPtrClientCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefTranslatorTestRefPtrLibraryCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefTranslatorTestRefPtrLibraryChildCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefTranslatorTestRefPtrLibraryChildChildCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefTranslatorTestScopedClientChildCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefTranslatorTestScopedClientCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefTranslatorTestScopedLibraryCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefTranslatorTestScopedLibraryChildCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefTranslatorTestScopedLibraryChildChildCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefURLRequestCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefURLRequestClientCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefV8AccessorCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefV8ArrayBufferReleaseCallbackCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefV8ContextCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefV8ExceptionCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefV8HandlerCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefV8InterceptorCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefV8StackFrameCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefV8StackTraceCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefV8ValueCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefValueCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefViewCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefViewDelegateCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefWaitableEventCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefWebPluginInfoCToCpp::DebugObjCt));
-  DCHECK(
-      base::AtomicRefCountIsZero(&CefWebPluginInfoVisitorCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(
-      &CefWebPluginUnstableCallbackCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefWindowCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefWindowDelegateCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefWriteHandlerCppToC::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefX509CertPrincipalCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefX509CertificateCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefXmlReaderCToCpp::DebugObjCt));
-  DCHECK(base::AtomicRefCountIsZero(&CefZipReaderCToCpp::DebugObjCt));
-#endif  // DCHECK_IS_ON()
-}
-
-CEF_GLOBAL void CefDoMessageLoopWork() {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  cef_do_message_loop_work();
-}
-
-CEF_GLOBAL void CefRunMessageLoop() {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  cef_run_message_loop();
-}
-
-CEF_GLOBAL void CefQuitMessageLoop() {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  cef_quit_message_loop();
-}
-
-CEF_GLOBAL void CefSetOSModalLoop(bool osModalLoop) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  cef_set_osmodal_loop(osModalLoop);
-}
-
-CEF_GLOBAL void CefEnableHighDPISupport() {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  cef_enable_highdpi_support();
-}
-
-CEF_GLOBAL bool CefCrashReportingEnabled() {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  int _retval = cef_crash_reporting_enabled();
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL void CefSetCrashKeyValue(const CefString& key,
-                                    const CefString& value) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: key; type: string_byref_const
-  DCHECK(!key.empty());
-  if (key.empty())
-    return;
-  // Unverified params: value
-
-  // Execute
-  cef_set_crash_key_value(key.GetStruct(), value.GetStruct());
-}
-
-CEF_GLOBAL bool CefCreateDirectory(const CefString& full_path) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: full_path; type: string_byref_const
-  DCHECK(!full_path.empty());
-  if (full_path.empty())
-    return false;
-
-  // Execute
-  int _retval = cef_create_directory(full_path.GetStruct());
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL bool CefGetTempDirectory(CefString& temp_dir) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  int _retval = cef_get_temp_directory(temp_dir.GetWritableStruct());
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL bool CefCreateNewTempDirectory(const CefString& prefix,
-                                          CefString& new_temp_path) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Unverified params: prefix
-
-  // Execute
-  int _retval = cef_create_new_temp_directory(
-      prefix.GetStruct(), new_temp_path.GetWritableStruct());
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL bool CefCreateTempDirectoryInDirectory(const CefString& base_dir,
-                                                  const CefString& prefix,
-                                                  CefString& new_dir) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: base_dir; type: string_byref_const
-  DCHECK(!base_dir.empty());
-  if (base_dir.empty())
-    return false;
-  // Unverified params: prefix
-
-  // Execute
-  int _retval = cef_create_temp_directory_in_directory(
-      base_dir.GetStruct(), prefix.GetStruct(), new_dir.GetWritableStruct());
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL bool CefDirectoryExists(const CefString& path) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: path; type: string_byref_const
-  DCHECK(!path.empty());
-  if (path.empty())
-    return false;
-
-  // Execute
-  int _retval = cef_directory_exists(path.GetStruct());
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL bool CefDeleteFile(const CefString& path, bool recursive) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: path; type: string_byref_const
-  DCHECK(!path.empty());
-  if (path.empty())
-    return false;
-
-  // Execute
-  int _retval = cef_delete_file(path.GetStruct(), recursive);
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL bool CefZipDirectory(const CefString& src_dir,
-                                const CefString& dest_file,
-                                bool include_hidden_files) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: src_dir; type: string_byref_const
-  DCHECK(!src_dir.empty());
-  if (src_dir.empty())
-    return false;
-  // Verify param: dest_file; type: string_byref_const
-  DCHECK(!dest_file.empty());
-  if (dest_file.empty())
-    return false;
-
-  // Execute
-  int _retval = cef_zip_directory(src_dir.GetStruct(), dest_file.GetStruct(),
-                                  include_hidden_files);
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL void CefLoadCRLSetsFile(const CefString& path) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: path; type: string_byref_const
-  DCHECK(!path.empty());
-  if (path.empty())
-    return;
-
-  // Execute
-  cef_load_crlsets_file(path.GetStruct());
-}
-
-CEF_GLOBAL bool CefAddCrossOriginWhitelistEntry(
-    const CefString& source_origin,
-    const CefString& target_protocol,
-    const CefString& target_domain,
-    bool allow_target_subdomains) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: source_origin; type: string_byref_const
-  DCHECK(!source_origin.empty());
-  if (source_origin.empty())
-    return false;
-  // Verify param: target_protocol; type: string_byref_const
-  DCHECK(!target_protocol.empty());
-  if (target_protocol.empty())
-    return false;
-  // Unverified params: target_domain
-
-  // Execute
-  int _retval = cef_add_cross_origin_whitelist_entry(
-      source_origin.GetStruct(), target_protocol.GetStruct(),
-      target_domain.GetStruct(), allow_target_subdomains);
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL bool CefRemoveCrossOriginWhitelistEntry(
-    const CefString& source_origin,
-    const CefString& target_protocol,
-    const CefString& target_domain,
-    bool allow_target_subdomains) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: source_origin; type: string_byref_const
-  DCHECK(!source_origin.empty());
-  if (source_origin.empty())
-    return false;
-  // Verify param: target_protocol; type: string_byref_const
-  DCHECK(!target_protocol.empty());
-  if (target_protocol.empty())
-    return false;
-  // Unverified params: target_domain
-
-  // Execute
-  int _retval = cef_remove_cross_origin_whitelist_entry(
-      source_origin.GetStruct(), target_protocol.GetStruct(),
-      target_domain.GetStruct(), allow_target_subdomains);
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL bool CefClearCrossOriginWhitelist() {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  int _retval = cef_clear_cross_origin_whitelist();
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL bool CefParseURL(const CefString& url, CefURLParts& parts) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: url; type: string_byref_const
-  DCHECK(!url.empty());
-  if (url.empty())
-    return false;
-
-  // Execute
-  int _retval = cef_parse_url(url.GetStruct(), &parts);
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL bool CefCreateURL(const CefURLParts& parts, CefString& url) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  int _retval = cef_create_url(&parts, url.GetWritableStruct());
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL CefString
-CefFormatUrlForSecurityDisplay(const CefString& origin_url) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: origin_url; type: string_byref_const
-  DCHECK(!origin_url.empty());
-  if (origin_url.empty())
-    return CefString();
-
-  // Execute
-  cef_string_userfree_t _retval =
-      cef_format_url_for_security_display(origin_url.GetStruct());
-
-  // Return type: string
-  CefString _retvalStr;
-  _retvalStr.AttachToUserFree(_retval);
-  return _retvalStr;
-}
-
-CEF_GLOBAL CefString CefGetMimeType(const CefString& extension) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: extension; type: string_byref_const
-  DCHECK(!extension.empty());
-  if (extension.empty())
-    return CefString();
-
-  // Execute
-  cef_string_userfree_t _retval = cef_get_mime_type(extension.GetStruct());
-
-  // Return type: string
-  CefString _retvalStr;
-  _retvalStr.AttachToUserFree(_retval);
-  return _retvalStr;
-}
-
-CEF_GLOBAL void CefGetExtensionsForMimeType(
-    const CefString& mime_type,
-    std::vector<CefString>& extensions) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: mime_type; type: string_byref_const
-  DCHECK(!mime_type.empty());
-  if (mime_type.empty())
-    return;
-
-  // Translate param: extensions; type: string_vec_byref
-  cef_string_list_t extensionsList = cef_string_list_alloc();
-  DCHECK(extensionsList);
-  if (extensionsList)
-    transfer_string_list_contents(extensions, extensionsList);
-
-  // Execute
-  cef_get_extensions_for_mime_type(mime_type.GetStruct(), extensionsList);
-
-  // Restore param:extensions; type: string_vec_byref
-  if (extensionsList) {
-    extensions.clear();
-    transfer_string_list_contents(extensionsList, extensions);
-    cef_string_list_free(extensionsList);
-  }
-}
-
-CEF_GLOBAL CefString CefBase64Encode(const void* data, size_t data_size) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: data; type: simple_byaddr
-  DCHECK(data);
-  if (!data)
-    return CefString();
-
-  // Execute
-  cef_string_userfree_t _retval = cef_base64encode(data, data_size);
-
-  // Return type: string
-  CefString _retvalStr;
-  _retvalStr.AttachToUserFree(_retval);
-  return _retvalStr;
-}
-
-CEF_GLOBAL CefRefPtr<CefBinaryValue> CefBase64Decode(const CefString& data) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: data; type: string_byref_const
-  DCHECK(!data.empty());
-  if (data.empty())
-    return NULL;
-
-  // Execute
-  cef_binary_value_t* _retval = cef_base64decode(data.GetStruct());
-
-  // Return type: refptr_same
-  return CefBinaryValueCToCpp::Wrap(_retval);
-}
-
-CEF_GLOBAL CefString CefURIEncode(const CefString& text, bool use_plus) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: text; type: string_byref_const
-  DCHECK(!text.empty());
-  if (text.empty())
-    return CefString();
-
-  // Execute
-  cef_string_userfree_t _retval = cef_uriencode(text.GetStruct(), use_plus);
-
-  // Return type: string
-  CefString _retvalStr;
-  _retvalStr.AttachToUserFree(_retval);
-  return _retvalStr;
-}
-
-CEF_GLOBAL CefString CefURIDecode(const CefString& text,
-                                  bool convert_to_utf8,
-                                  cef_uri_unescape_rule_t unescape_rule) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: text; type: string_byref_const
-  DCHECK(!text.empty());
-  if (text.empty())
-    return CefString();
-
-  // Execute
-  cef_string_userfree_t _retval =
-      cef_uridecode(text.GetStruct(), convert_to_utf8, unescape_rule);
-
-  // Return type: string
-  CefString _retvalStr;
-  _retvalStr.AttachToUserFree(_retval);
-  return _retvalStr;
-}
-
-CEF_GLOBAL CefRefPtr<CefValue> CefParseJSON(const CefString& json_string,
-                                            cef_json_parser_options_t options) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: json_string; type: string_byref_const
-  DCHECK(!json_string.empty());
-  if (json_string.empty())
-    return NULL;
-
-  // Execute
-  cef_value_t* _retval = cef_parse_json(json_string.GetStruct(), options);
-
-  // Return type: refptr_same
-  return CefValueCToCpp::Wrap(_retval);
-}
-
-CEF_GLOBAL CefRefPtr<CefValue> CefParseJSONAndReturnError(
-    const CefString& json_string,
-    cef_json_parser_options_t options,
-    cef_json_parser_error_t& error_code_out,
-    CefString& error_msg_out) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: json_string; type: string_byref_const
-  DCHECK(!json_string.empty());
-  if (json_string.empty())
-    return NULL;
-
-  // Execute
-  cef_value_t* _retval = cef_parse_jsonand_return_error(
-      json_string.GetStruct(), options, &error_code_out,
-      error_msg_out.GetWritableStruct());
-
-  // Return type: refptr_same
-  return CefValueCToCpp::Wrap(_retval);
-}
-
-CEF_GLOBAL CefString CefWriteJSON(CefRefPtr<CefValue> node,
-                                  cef_json_writer_options_t options) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: node; type: refptr_same
-  DCHECK(node.get());
-  if (!node.get())
-    return CefString();
-
-  // Execute
-  cef_string_userfree_t _retval =
-      cef_write_json(CefValueCToCpp::Unwrap(node), options);
-
-  // Return type: string
-  CefString _retvalStr;
-  _retvalStr.AttachToUserFree(_retval);
-  return _retvalStr;
-}
-
-CEF_GLOBAL bool CefGetPath(PathKey key, CefString& path) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  int _retval = cef_get_path(key, path.GetWritableStruct());
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL bool CefLaunchProcess(CefRefPtr<CefCommandLine> command_line) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: command_line; type: refptr_same
-  DCHECK(command_line.get());
-  if (!command_line.get())
-    return false;
-
-  // Execute
-  int _retval = cef_launch_process(CefCommandLineCToCpp::Unwrap(command_line));
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL bool CefRegisterSchemeHandlerFactory(
-    const CefString& scheme_name,
-    const CefString& domain_name,
-    CefRefPtr<CefSchemeHandlerFactory> factory) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: scheme_name; type: string_byref_const
-  DCHECK(!scheme_name.empty());
-  if (scheme_name.empty())
-    return false;
-  // Unverified params: domain_name, factory
-
-  // Execute
-  int _retval = cef_register_scheme_handler_factory(
-      scheme_name.GetStruct(), domain_name.GetStruct(),
-      CefSchemeHandlerFactoryCppToC::Wrap(factory));
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL bool CefClearSchemeHandlerFactories() {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  int _retval = cef_clear_scheme_handler_factories();
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL bool CefIsCertStatusError(cef_cert_status_t status) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  int _retval = cef_is_cert_status_error(status);
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL bool CefIsCertStatusMinorError(cef_cert_status_t status) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  int _retval = cef_is_cert_status_minor_error(status);
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL bool CefCurrentlyOn(CefThreadId threadId) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  int _retval = cef_currently_on(threadId);
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL bool CefPostTask(CefThreadId threadId, CefRefPtr<CefTask> task) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: task; type: refptr_diff
-  DCHECK(task.get());
-  if (!task.get())
-    return false;
-
-  // Execute
-  int _retval = cef_post_task(threadId, CefTaskCppToC::Wrap(task));
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL bool CefPostDelayedTask(CefThreadId threadId,
-                                   CefRefPtr<CefTask> task,
-                                   int64 delay_ms) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: task; type: refptr_diff
-  DCHECK(task.get());
-  if (!task.get())
-    return false;
-
-  // Execute
-  int _retval =
-      cef_post_delayed_task(threadId, CefTaskCppToC::Wrap(task), delay_ms);
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL bool CefBeginTracing(const CefString& categories,
-                                CefRefPtr<CefCompletionCallback> callback) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Unverified params: categories, callback
-
-  // Execute
-  int _retval = cef_begin_tracing(categories.GetStruct(),
-                                  CefCompletionCallbackCppToC::Wrap(callback));
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL bool CefEndTracing(const CefString& tracing_file,
-                              CefRefPtr<CefEndTracingCallback> callback) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Unverified params: tracing_file, callback
-
-  // Execute
-  int _retval = cef_end_tracing(tracing_file.GetStruct(),
-                                CefEndTracingCallbackCppToC::Wrap(callback));
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL int64 CefNowFromSystemTraceTime() {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  int64 _retval = cef_now_from_system_trace_time();
-
-  // Return type: simple
-  return _retval;
-}
-
-CEF_GLOBAL bool CefRegisterExtension(const CefString& extension_name,
-                                     const CefString& javascript_code,
-                                     CefRefPtr<CefV8Handler> handler) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: extension_name; type: string_byref_const
-  DCHECK(!extension_name.empty());
-  if (extension_name.empty())
-    return false;
-  // Verify param: javascript_code; type: string_byref_const
-  DCHECK(!javascript_code.empty());
-  if (javascript_code.empty())
-    return false;
-  // Unverified params: handler
-
-  // Execute
-  int _retval = cef_register_extension(extension_name.GetStruct(),
-                                       javascript_code.GetStruct(),
-                                       CefV8HandlerCppToC::Wrap(handler));
-
-  // Return type: bool
-  return _retval ? true : false;
-}
-
-CEF_GLOBAL void CefVisitWebPluginInfo(
-    CefRefPtr<CefWebPluginInfoVisitor> visitor) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: visitor; type: refptr_diff
-  DCHECK(visitor.get());
-  if (!visitor.get())
-    return;
-
-  // Execute
-  cef_visit_web_plugin_info(CefWebPluginInfoVisitorCppToC::Wrap(visitor));
-}
-
-CEF_GLOBAL void CefRefreshWebPlugins() {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Execute
-  cef_refresh_web_plugins();
-}
-
-CEF_GLOBAL void CefUnregisterInternalWebPlugin(const CefString& path) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: path; type: string_byref_const
-  DCHECK(!path.empty());
-  if (path.empty())
-    return;
-
-  // Execute
-  cef_unregister_internal_web_plugin(path.GetStruct());
-}
-
-CEF_GLOBAL void CefRegisterWebPluginCrash(const CefString& path) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: path; type: string_byref_const
-  DCHECK(!path.empty());
-  if (path.empty())
-    return;
-
-  // Execute
-  cef_register_web_plugin_crash(path.GetStruct());
-}
-
-CEF_GLOBAL void CefIsWebPluginUnstable(
-    const CefString& path,
-    CefRefPtr<CefWebPluginUnstableCallback> callback) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: path; type: string_byref_const
-  DCHECK(!path.empty());
-  if (path.empty())
-    return;
-  // Verify param: callback; type: refptr_diff
-  DCHECK(callback.get());
-  if (!callback.get())
-    return;
-
-  // Execute
-  cef_is_web_plugin_unstable(
-      path.GetStruct(), CefWebPluginUnstableCallbackCppToC::Wrap(callback));
-}
-
-CEF_GLOBAL void CefRegisterWidevineCdm(
-    const CefString& path,
-    CefRefPtr<CefRegisterCdmCallback> callback) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: path; type: string_byref_const
-  DCHECK(!path.empty());
-  if (path.empty())
-    return;
-  // Unverified params: callback
-
-  // Execute
-  cef_register_widevine_cdm(path.GetStruct(),
-                            CefRegisterCdmCallbackCppToC::Wrap(callback));
-}
-
-CEF_GLOBAL void CefExecuteJavaScriptWithUserGestureForTests(
-    CefRefPtr<CefFrame> frame,
-    const CefString& javascript) {
-  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
-
-  // Verify param: frame; type: refptr_same
-  DCHECK(frame.get());
-  if (!frame.get())
-    return;
-  // Unverified params: javascript
-
-  // Execute
-  cef_execute_java_script_with_user_gesture_for_tests(
-      CefFrameCToCpp::Unwrap(frame), javascript.GetStruct());
-}
+// Copyright (c) 2018 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool. If making changes by
+// hand only do so within the body of existing method and function
+// implementations. See the translator.README.txt file in the tools directory
+// for more information.
+//
+// $hash=0aa11cbbecea2436b653041cb4c666ffa79dd6a8$
+//
+
+#include "include/capi/cef_app_capi.h"
+#include "include/capi/cef_crash_util_capi.h"
+#include "include/capi/cef_file_util_capi.h"
+#include "include/capi/cef_origin_whitelist_capi.h"
+#include "include/capi/cef_parser_capi.h"
+#include "include/capi/cef_path_util_capi.h"
+#include "include/capi/cef_process_util_capi.h"
+#include "include/capi/cef_scheme_capi.h"
+#include "include/capi/cef_ssl_info_capi.h"
+#include "include/capi/cef_task_capi.h"
+#include "include/capi/cef_trace_capi.h"
+#include "include/capi/cef_v8_capi.h"
+#include "include/capi/cef_web_plugin_capi.h"
+#include "include/capi/test/cef_test_helpers_capi.h"
+#include "include/cef_app.h"
+#include "include/cef_crash_util.h"
+#include "include/cef_file_util.h"
+#include "include/cef_origin_whitelist.h"
+#include "include/cef_parser.h"
+#include "include/cef_path_util.h"
+#include "include/cef_process_util.h"
+#include "include/cef_scheme.h"
+#include "include/cef_ssl_info.h"
+#include "include/cef_task.h"
+#include "include/cef_trace.h"
+#include "include/cef_v8.h"
+#include "include/cef_version.h"
+#include "include/cef_web_plugin.h"
+#include "include/test/cef_test_helpers.h"
+#include "libcef_dll/cpptoc/accessibility_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/app_cpptoc.h"
+#include "libcef_dll/cpptoc/audio_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/browser_process_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/completion_callback_cpptoc.h"
+#include "libcef_dll/cpptoc/context_menu_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/cookie_visitor_cpptoc.h"
+#include "libcef_dll/cpptoc/delete_cookies_callback_cpptoc.h"
+#include "libcef_dll/cpptoc/dialog_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/display_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/domvisitor_cpptoc.h"
+#include "libcef_dll/cpptoc/download_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/download_image_callback_cpptoc.h"
+#include "libcef_dll/cpptoc/drag_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/end_tracing_callback_cpptoc.h"
+#include "libcef_dll/cpptoc/extension_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/find_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/focus_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/jsdialog_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/keyboard_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/life_span_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/load_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/menu_model_delegate_cpptoc.h"
+#include "libcef_dll/cpptoc/navigation_entry_visitor_cpptoc.h"
+#include "libcef_dll/cpptoc/pdf_print_callback_cpptoc.h"
+#include "libcef_dll/cpptoc/print_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/read_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/register_cdm_callback_cpptoc.h"
+#include "libcef_dll/cpptoc/render_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/render_process_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/request_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/resolve_callback_cpptoc.h"
+#include "libcef_dll/cpptoc/resource_bundle_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/resource_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/response_filter_cpptoc.h"
+#include "libcef_dll/cpptoc/run_file_dialog_callback_cpptoc.h"
+#include "libcef_dll/cpptoc/scheme_handler_factory_cpptoc.h"
+#include "libcef_dll/cpptoc/server_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/set_cookie_callback_cpptoc.h"
+#include "libcef_dll/cpptoc/string_visitor_cpptoc.h"
+#include "libcef_dll/cpptoc/task_cpptoc.h"
+#include "libcef_dll/cpptoc/test/translator_test_ref_ptr_client_child_cpptoc.h"
+#include "libcef_dll/cpptoc/test/translator_test_ref_ptr_client_cpptoc.h"
+#include "libcef_dll/cpptoc/test/translator_test_scoped_client_child_cpptoc.h"
+#include "libcef_dll/cpptoc/test/translator_test_scoped_client_cpptoc.h"
+#include "libcef_dll/cpptoc/urlrequest_client_cpptoc.h"
+#include "libcef_dll/cpptoc/v8accessor_cpptoc.h"
+#include "libcef_dll/cpptoc/v8array_buffer_release_callback_cpptoc.h"
+#include "libcef_dll/cpptoc/v8handler_cpptoc.h"
+#include "libcef_dll/cpptoc/v8interceptor_cpptoc.h"
+#include "libcef_dll/cpptoc/views/browser_view_delegate_cpptoc.h"
+#include "libcef_dll/cpptoc/views/button_delegate_cpptoc.h"
+#include "libcef_dll/cpptoc/views/menu_button_delegate_cpptoc.h"
+#include "libcef_dll/cpptoc/views/panel_delegate_cpptoc.h"
+#include "libcef_dll/cpptoc/views/textfield_delegate_cpptoc.h"
+#include "libcef_dll/cpptoc/views/view_delegate_cpptoc.h"
+#include "libcef_dll/cpptoc/views/window_delegate_cpptoc.h"
+#include "libcef_dll/cpptoc/web_plugin_info_visitor_cpptoc.h"
+#include "libcef_dll/cpptoc/web_plugin_unstable_callback_cpptoc.h"
+#include "libcef_dll/cpptoc/write_handler_cpptoc.h"
+#include "libcef_dll/ctocpp/audio_bus_ctocpp.h"
+#include "libcef_dll/ctocpp/auth_callback_ctocpp.h"
+#include "libcef_dll/ctocpp/before_download_callback_ctocpp.h"
+#include "libcef_dll/ctocpp/binary_value_ctocpp.h"
+#include "libcef_dll/ctocpp/browser_ctocpp.h"
+#include "libcef_dll/ctocpp/browser_host_ctocpp.h"
+#include "libcef_dll/ctocpp/callback_ctocpp.h"
+#include "libcef_dll/ctocpp/command_line_ctocpp.h"
+#include "libcef_dll/ctocpp/context_menu_params_ctocpp.h"
+#include "libcef_dll/ctocpp/dictionary_value_ctocpp.h"
+#include "libcef_dll/ctocpp/domdocument_ctocpp.h"
+#include "libcef_dll/ctocpp/domnode_ctocpp.h"
+#include "libcef_dll/ctocpp/download_item_callback_ctocpp.h"
+#include "libcef_dll/ctocpp/download_item_ctocpp.h"
+#include "libcef_dll/ctocpp/drag_data_ctocpp.h"
+#include "libcef_dll/ctocpp/extension_ctocpp.h"
+#include "libcef_dll/ctocpp/file_dialog_callback_ctocpp.h"
+#include "libcef_dll/ctocpp/frame_ctocpp.h"
+#include "libcef_dll/ctocpp/get_extension_resource_callback_ctocpp.h"
+#include "libcef_dll/ctocpp/image_ctocpp.h"
+#include "libcef_dll/ctocpp/jsdialog_callback_ctocpp.h"
+#include "libcef_dll/ctocpp/list_value_ctocpp.h"
+#include "libcef_dll/ctocpp/menu_model_ctocpp.h"
+#include "libcef_dll/ctocpp/navigation_entry_ctocpp.h"
+#include "libcef_dll/ctocpp/print_dialog_callback_ctocpp.h"
+#include "libcef_dll/ctocpp/print_job_callback_ctocpp.h"
+#include "libcef_dll/ctocpp/print_settings_ctocpp.h"
+#include "libcef_dll/ctocpp/process_message_ctocpp.h"
+#include "libcef_dll/ctocpp/request_callback_ctocpp.h"
+#include "libcef_dll/ctocpp/run_context_menu_callback_ctocpp.h"
+#include "libcef_dll/ctocpp/scheme_registrar_ctocpp.h"
+#include "libcef_dll/ctocpp/select_client_certificate_callback_ctocpp.h"
+#include "libcef_dll/ctocpp/server_ctocpp.h"
+#include "libcef_dll/ctocpp/sslinfo_ctocpp.h"
+#include "libcef_dll/ctocpp/sslstatus_ctocpp.h"
+#include "libcef_dll/ctocpp/stream_reader_ctocpp.h"
+#include "libcef_dll/ctocpp/stream_writer_ctocpp.h"
+#include "libcef_dll/ctocpp/task_runner_ctocpp.h"
+#include "libcef_dll/ctocpp/test/translator_test_ctocpp.h"
+#include "libcef_dll/ctocpp/test/translator_test_ref_ptr_library_child_child_ctocpp.h"
+#include "libcef_dll/ctocpp/test/translator_test_ref_ptr_library_child_ctocpp.h"
+#include "libcef_dll/ctocpp/test/translator_test_ref_ptr_library_ctocpp.h"
+#include "libcef_dll/ctocpp/test/translator_test_scoped_library_child_child_ctocpp.h"
+#include "libcef_dll/ctocpp/test/translator_test_scoped_library_child_ctocpp.h"
+#include "libcef_dll/ctocpp/test/translator_test_scoped_library_ctocpp.h"
+#include "libcef_dll/ctocpp/thread_ctocpp.h"
+#include "libcef_dll/ctocpp/urlrequest_ctocpp.h"
+#include "libcef_dll/ctocpp/v8context_ctocpp.h"
+#include "libcef_dll/ctocpp/v8exception_ctocpp.h"
+#include "libcef_dll/ctocpp/v8stack_frame_ctocpp.h"
+#include "libcef_dll/ctocpp/v8stack_trace_ctocpp.h"
+#include "libcef_dll/ctocpp/v8value_ctocpp.h"
+#include "libcef_dll/ctocpp/value_ctocpp.h"
+#include "libcef_dll/ctocpp/views/box_layout_ctocpp.h"
+#include "libcef_dll/ctocpp/views/browser_view_ctocpp.h"
+#include "libcef_dll/ctocpp/views/button_ctocpp.h"
+#include "libcef_dll/ctocpp/views/display_ctocpp.h"
+#include "libcef_dll/ctocpp/views/fill_layout_ctocpp.h"
+#include "libcef_dll/ctocpp/views/label_button_ctocpp.h"
+#include "libcef_dll/ctocpp/views/layout_ctocpp.h"
+#include "libcef_dll/ctocpp/views/menu_button_ctocpp.h"
+#include "libcef_dll/ctocpp/views/menu_button_pressed_lock_ctocpp.h"
+#include "libcef_dll/ctocpp/views/panel_ctocpp.h"
+#include "libcef_dll/ctocpp/views/scroll_view_ctocpp.h"
+#include "libcef_dll/ctocpp/views/textfield_ctocpp.h"
+#include "libcef_dll/ctocpp/views/view_ctocpp.h"
+#include "libcef_dll/ctocpp/views/window_ctocpp.h"
+#include "libcef_dll/ctocpp/waitable_event_ctocpp.h"
+#include "libcef_dll/ctocpp/web_plugin_info_ctocpp.h"
+#include "libcef_dll/ctocpp/x509cert_principal_ctocpp.h"
+#include "libcef_dll/ctocpp/x509certificate_ctocpp.h"
+#include "libcef_dll/ctocpp/xml_reader_ctocpp.h"
+#include "libcef_dll/ctocpp/zip_reader_ctocpp.h"
+#include "libcef_dll/transfer_util.h"
+
+// Define used to facilitate parsing.
+#define CEF_GLOBAL
+
+// GLOBAL METHODS - Body may be edited by hand.
+
+CEF_GLOBAL int CefExecuteProcess(const CefMainArgs& args,
+                                 CefRefPtr<CefApp> application,
+                                 void* windows_sandbox_info) {
+  const char* api_hash = cef_api_hash(0);
+  if (strcmp(api_hash, CEF_API_HASH_PLATFORM)) {
+    // The libcef API hash does not match the current header API hash.
+    NOTREACHED();
+    return 0;
+  }
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Unverified params: application, windows_sandbox_info
+
+  // Execute
+  int _retval = cef_execute_process(&args, CefAppCppToC::Wrap(application),
+                                    windows_sandbox_info);
+
+  // Return type: simple
+  return _retval;
+}
+
+CEF_GLOBAL bool CefInitialize(const CefMainArgs& args,
+                              const CefSettings& settings,
+                              CefRefPtr<CefApp> application,
+                              void* windows_sandbox_info) {
+  const char* api_hash = cef_api_hash(0);
+  if (strcmp(api_hash, CEF_API_HASH_PLATFORM)) {
+    // The libcef API hash does not match the current header API hash.
+    NOTREACHED();
+    return false;
+  }
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Unverified params: application, windows_sandbox_info
+
+  // Execute
+  int _retval = cef_initialize(
+      &args, &settings, CefAppCppToC::Wrap(application), windows_sandbox_info);
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL void CefShutdown() {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  cef_shutdown();
+
+#if DCHECK_IS_ON()
+  // Check that all wrapper objects have been destroyed
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefAccessibilityHandlerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefAudioBusCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefAudioHandlerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefAuthCallbackCToCpp::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefBeforeDownloadCallbackCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefBinaryValueCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefBoxLayoutCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefBrowserCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefBrowserHostCToCpp::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefBrowserProcessHandlerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefBrowserViewCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefBrowserViewDelegateCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefButtonCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefButtonDelegateCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefCallbackCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefCompletionCallbackCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefContextMenuHandlerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefContextMenuParamsCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefCookieVisitorCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefDOMDocumentCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefDOMNodeCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefDOMVisitorCppToC::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefDeleteCookiesCallbackCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefDialogHandlerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefDictionaryValueCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefDisplayCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefDisplayHandlerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefDownloadHandlerCppToC::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefDownloadImageCallbackCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefDownloadItemCToCpp::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefDownloadItemCallbackCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefDragDataCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefDragHandlerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefEndTracingCallbackCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefExtensionCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefExtensionHandlerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefFileDialogCallbackCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefFillLayoutCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefFindHandlerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefFocusHandlerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefFrameCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefGetExtensionResourceCallbackCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefImageCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefJSDialogCallbackCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefJSDialogHandlerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefKeyboardHandlerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefLabelButtonCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefLayoutCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefLifeSpanHandlerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefListValueCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefLoadHandlerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefMenuButtonCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefMenuButtonDelegateCppToC::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefMenuButtonPressedLockCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefMenuModelCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefMenuModelDelegateCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefNavigationEntryCToCpp::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefNavigationEntryVisitorCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefPanelCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefPanelDelegateCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefPdfPrintCallbackCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefPrintDialogCallbackCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefPrintHandlerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefPrintJobCallbackCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefPrintSettingsCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefProcessMessageCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefReadHandlerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefRegisterCdmCallbackCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefRenderHandlerCppToC::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefRenderProcessHandlerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefRequestCallbackCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefRequestHandlerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefResolveCallbackCppToC::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefResourceBundleHandlerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefResourceHandlerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefResponseFilterCppToC::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefRunContextMenuCallbackCToCpp::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefRunFileDialogCallbackCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefSSLInfoCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefSSLStatusCToCpp::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefSchemeHandlerFactoryCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefSchemeRegistrarCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefScrollViewCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefSelectClientCertificateCallbackCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefServerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefServerHandlerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefSetCookieCallbackCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefStreamReaderCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefStreamWriterCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefStringVisitorCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefTaskCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefTaskRunnerCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefTextfieldCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefTextfieldDelegateCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefThreadCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefTranslatorTestCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefTranslatorTestRefPtrClientChildCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefTranslatorTestRefPtrClientCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefTranslatorTestRefPtrLibraryCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefTranslatorTestRefPtrLibraryChildCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefTranslatorTestRefPtrLibraryChildChildCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefTranslatorTestScopedClientChildCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefTranslatorTestScopedClientCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefTranslatorTestScopedLibraryCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefTranslatorTestScopedLibraryChildCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefTranslatorTestScopedLibraryChildChildCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefURLRequestCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefURLRequestClientCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefV8AccessorCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefV8ArrayBufferReleaseCallbackCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefV8ContextCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefV8ExceptionCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefV8HandlerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefV8InterceptorCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefV8StackFrameCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefV8StackTraceCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefV8ValueCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefValueCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefViewCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefViewDelegateCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefWaitableEventCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefWebPluginInfoCToCpp::DebugObjCt));
+  DCHECK(
+      base::AtomicRefCountIsZero(&CefWebPluginInfoVisitorCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(
+      &CefWebPluginUnstableCallbackCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefWindowCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefWindowDelegateCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefWriteHandlerCppToC::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefX509CertPrincipalCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefX509CertificateCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefXmlReaderCToCpp::DebugObjCt));
+  DCHECK(base::AtomicRefCountIsZero(&CefZipReaderCToCpp::DebugObjCt));
+#endif  // DCHECK_IS_ON()
+}
+
+CEF_GLOBAL void CefDoMessageLoopWork() {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  cef_do_message_loop_work();
+}
+
+CEF_GLOBAL void CefRunMessageLoop() {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  cef_run_message_loop();
+}
+
+CEF_GLOBAL void CefQuitMessageLoop() {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  cef_quit_message_loop();
+}
+
+CEF_GLOBAL void CefSetOSModalLoop(bool osModalLoop) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  cef_set_osmodal_loop(osModalLoop);
+}
+
+CEF_GLOBAL void CefEnableHighDPISupport() {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  cef_enable_highdpi_support();
+}
+
+CEF_GLOBAL bool CefCrashReportingEnabled() {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  int _retval = cef_crash_reporting_enabled();
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL void CefSetCrashKeyValue(const CefString& key,
+                                    const CefString& value) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: key; type: string_byref_const
+  DCHECK(!key.empty());
+  if (key.empty())
+    return;
+  // Unverified params: value
+
+  // Execute
+  cef_set_crash_key_value(key.GetStruct(), value.GetStruct());
+}
+
+CEF_GLOBAL bool CefCreateDirectory(const CefString& full_path) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: full_path; type: string_byref_const
+  DCHECK(!full_path.empty());
+  if (full_path.empty())
+    return false;
+
+  // Execute
+  int _retval = cef_create_directory(full_path.GetStruct());
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL bool CefGetTempDirectory(CefString& temp_dir) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  int _retval = cef_get_temp_directory(temp_dir.GetWritableStruct());
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL bool CefCreateNewTempDirectory(const CefString& prefix,
+                                          CefString& new_temp_path) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Unverified params: prefix
+
+  // Execute
+  int _retval = cef_create_new_temp_directory(
+      prefix.GetStruct(), new_temp_path.GetWritableStruct());
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL bool CefCreateTempDirectoryInDirectory(const CefString& base_dir,
+                                                  const CefString& prefix,
+                                                  CefString& new_dir) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: base_dir; type: string_byref_const
+  DCHECK(!base_dir.empty());
+  if (base_dir.empty())
+    return false;
+  // Unverified params: prefix
+
+  // Execute
+  int _retval = cef_create_temp_directory_in_directory(
+      base_dir.GetStruct(), prefix.GetStruct(), new_dir.GetWritableStruct());
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL bool CefDirectoryExists(const CefString& path) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: path; type: string_byref_const
+  DCHECK(!path.empty());
+  if (path.empty())
+    return false;
+
+  // Execute
+  int _retval = cef_directory_exists(path.GetStruct());
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL bool CefDeleteFile(const CefString& path, bool recursive) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: path; type: string_byref_const
+  DCHECK(!path.empty());
+  if (path.empty())
+    return false;
+
+  // Execute
+  int _retval = cef_delete_file(path.GetStruct(), recursive);
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL bool CefZipDirectory(const CefString& src_dir,
+                                const CefString& dest_file,
+                                bool include_hidden_files) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: src_dir; type: string_byref_const
+  DCHECK(!src_dir.empty());
+  if (src_dir.empty())
+    return false;
+  // Verify param: dest_file; type: string_byref_const
+  DCHECK(!dest_file.empty());
+  if (dest_file.empty())
+    return false;
+
+  // Execute
+  int _retval = cef_zip_directory(src_dir.GetStruct(), dest_file.GetStruct(),
+                                  include_hidden_files);
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL void CefLoadCRLSetsFile(const CefString& path) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: path; type: string_byref_const
+  DCHECK(!path.empty());
+  if (path.empty())
+    return;
+
+  // Execute
+  cef_load_crlsets_file(path.GetStruct());
+}
+
+CEF_GLOBAL bool CefAddCrossOriginWhitelistEntry(
+    const CefString& source_origin,
+    const CefString& target_protocol,
+    const CefString& target_domain,
+    bool allow_target_subdomains) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: source_origin; type: string_byref_const
+  DCHECK(!source_origin.empty());
+  if (source_origin.empty())
+    return false;
+  // Verify param: target_protocol; type: string_byref_const
+  DCHECK(!target_protocol.empty());
+  if (target_protocol.empty())
+    return false;
+  // Unverified params: target_domain
+
+  // Execute
+  int _retval = cef_add_cross_origin_whitelist_entry(
+      source_origin.GetStruct(), target_protocol.GetStruct(),
+      target_domain.GetStruct(), allow_target_subdomains);
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL bool CefRemoveCrossOriginWhitelistEntry(
+    const CefString& source_origin,
+    const CefString& target_protocol,
+    const CefString& target_domain,
+    bool allow_target_subdomains) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: source_origin; type: string_byref_const
+  DCHECK(!source_origin.empty());
+  if (source_origin.empty())
+    return false;
+  // Verify param: target_protocol; type: string_byref_const
+  DCHECK(!target_protocol.empty());
+  if (target_protocol.empty())
+    return false;
+  // Unverified params: target_domain
+
+  // Execute
+  int _retval = cef_remove_cross_origin_whitelist_entry(
+      source_origin.GetStruct(), target_protocol.GetStruct(),
+      target_domain.GetStruct(), allow_target_subdomains);
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL bool CefClearCrossOriginWhitelist() {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  int _retval = cef_clear_cross_origin_whitelist();
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL bool CefParseURL(const CefString& url, CefURLParts& parts) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: url; type: string_byref_const
+  DCHECK(!url.empty());
+  if (url.empty())
+    return false;
+
+  // Execute
+  int _retval = cef_parse_url(url.GetStruct(), &parts);
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL bool CefCreateURL(const CefURLParts& parts, CefString& url) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  int _retval = cef_create_url(&parts, url.GetWritableStruct());
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL CefString
+CefFormatUrlForSecurityDisplay(const CefString& origin_url) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: origin_url; type: string_byref_const
+  DCHECK(!origin_url.empty());
+  if (origin_url.empty())
+    return CefString();
+
+  // Execute
+  cef_string_userfree_t _retval =
+      cef_format_url_for_security_display(origin_url.GetStruct());
+
+  // Return type: string
+  CefString _retvalStr;
+  _retvalStr.AttachToUserFree(_retval);
+  return _retvalStr;
+}
+
+CEF_GLOBAL CefString CefGetMimeType(const CefString& extension) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: extension; type: string_byref_const
+  DCHECK(!extension.empty());
+  if (extension.empty())
+    return CefString();
+
+  // Execute
+  cef_string_userfree_t _retval = cef_get_mime_type(extension.GetStruct());
+
+  // Return type: string
+  CefString _retvalStr;
+  _retvalStr.AttachToUserFree(_retval);
+  return _retvalStr;
+}
+
+CEF_GLOBAL void CefGetExtensionsForMimeType(
+    const CefString& mime_type,
+    std::vector<CefString>& extensions) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: mime_type; type: string_byref_const
+  DCHECK(!mime_type.empty());
+  if (mime_type.empty())
+    return;
+
+  // Translate param: extensions; type: string_vec_byref
+  cef_string_list_t extensionsList = cef_string_list_alloc();
+  DCHECK(extensionsList);
+  if (extensionsList)
+    transfer_string_list_contents(extensions, extensionsList);
+
+  // Execute
+  cef_get_extensions_for_mime_type(mime_type.GetStruct(), extensionsList);
+
+  // Restore param:extensions; type: string_vec_byref
+  if (extensionsList) {
+    extensions.clear();
+    transfer_string_list_contents(extensionsList, extensions);
+    cef_string_list_free(extensionsList);
+  }
+}
+
+CEF_GLOBAL CefString CefBase64Encode(const void* data, size_t data_size) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: data; type: simple_byaddr
+  DCHECK(data);
+  if (!data)
+    return CefString();
+
+  // Execute
+  cef_string_userfree_t _retval = cef_base64encode(data, data_size);
+
+  // Return type: string
+  CefString _retvalStr;
+  _retvalStr.AttachToUserFree(_retval);
+  return _retvalStr;
+}
+
+CEF_GLOBAL CefRefPtr<CefBinaryValue> CefBase64Decode(const CefString& data) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: data; type: string_byref_const
+  DCHECK(!data.empty());
+  if (data.empty())
+    return NULL;
+
+  // Execute
+  cef_binary_value_t* _retval = cef_base64decode(data.GetStruct());
+
+  // Return type: refptr_same
+  return CefBinaryValueCToCpp::Wrap(_retval);
+}
+
+CEF_GLOBAL CefString CefURIEncode(const CefString& text, bool use_plus) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: text; type: string_byref_const
+  DCHECK(!text.empty());
+  if (text.empty())
+    return CefString();
+
+  // Execute
+  cef_string_userfree_t _retval = cef_uriencode(text.GetStruct(), use_plus);
+
+  // Return type: string
+  CefString _retvalStr;
+  _retvalStr.AttachToUserFree(_retval);
+  return _retvalStr;
+}
+
+CEF_GLOBAL CefString CefURIDecode(const CefString& text,
+                                  bool convert_to_utf8,
+                                  cef_uri_unescape_rule_t unescape_rule) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: text; type: string_byref_const
+  DCHECK(!text.empty());
+  if (text.empty())
+    return CefString();
+
+  // Execute
+  cef_string_userfree_t _retval =
+      cef_uridecode(text.GetStruct(), convert_to_utf8, unescape_rule);
+
+  // Return type: string
+  CefString _retvalStr;
+  _retvalStr.AttachToUserFree(_retval);
+  return _retvalStr;
+}
+
+CEF_GLOBAL CefRefPtr<CefValue> CefParseJSON(const CefString& json_string,
+                                            cef_json_parser_options_t options) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: json_string; type: string_byref_const
+  DCHECK(!json_string.empty());
+  if (json_string.empty())
+    return NULL;
+
+  // Execute
+  cef_value_t* _retval = cef_parse_json(json_string.GetStruct(), options);
+
+  // Return type: refptr_same
+  return CefValueCToCpp::Wrap(_retval);
+}
+
+CEF_GLOBAL CefRefPtr<CefValue> CefParseJSONAndReturnError(
+    const CefString& json_string,
+    cef_json_parser_options_t options,
+    cef_json_parser_error_t& error_code_out,
+    CefString& error_msg_out) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: json_string; type: string_byref_const
+  DCHECK(!json_string.empty());
+  if (json_string.empty())
+    return NULL;
+
+  // Execute
+  cef_value_t* _retval = cef_parse_jsonand_return_error(
+      json_string.GetStruct(), options, &error_code_out,
+      error_msg_out.GetWritableStruct());
+
+  // Return type: refptr_same
+  return CefValueCToCpp::Wrap(_retval);
+}
+
+CEF_GLOBAL CefString CefWriteJSON(CefRefPtr<CefValue> node,
+                                  cef_json_writer_options_t options) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: node; type: refptr_same
+  DCHECK(node.get());
+  if (!node.get())
+    return CefString();
+
+  // Execute
+  cef_string_userfree_t _retval =
+      cef_write_json(CefValueCToCpp::Unwrap(node), options);
+
+  // Return type: string
+  CefString _retvalStr;
+  _retvalStr.AttachToUserFree(_retval);
+  return _retvalStr;
+}
+
+CEF_GLOBAL bool CefGetPath(PathKey key, CefString& path) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  int _retval = cef_get_path(key, path.GetWritableStruct());
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL bool CefLaunchProcess(CefRefPtr<CefCommandLine> command_line) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: command_line; type: refptr_same
+  DCHECK(command_line.get());
+  if (!command_line.get())
+    return false;
+
+  // Execute
+  int _retval = cef_launch_process(CefCommandLineCToCpp::Unwrap(command_line));
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL bool CefRegisterSchemeHandlerFactory(
+    const CefString& scheme_name,
+    const CefString& domain_name,
+    CefRefPtr<CefSchemeHandlerFactory> factory) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: scheme_name; type: string_byref_const
+  DCHECK(!scheme_name.empty());
+  if (scheme_name.empty())
+    return false;
+  // Unverified params: domain_name, factory
+
+  // Execute
+  int _retval = cef_register_scheme_handler_factory(
+      scheme_name.GetStruct(), domain_name.GetStruct(),
+      CefSchemeHandlerFactoryCppToC::Wrap(factory));
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL bool CefClearSchemeHandlerFactories() {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  int _retval = cef_clear_scheme_handler_factories();
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL bool CefIsCertStatusError(cef_cert_status_t status) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  int _retval = cef_is_cert_status_error(status);
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL bool CefIsCertStatusMinorError(cef_cert_status_t status) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  int _retval = cef_is_cert_status_minor_error(status);
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL bool CefCurrentlyOn(CefThreadId threadId) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  int _retval = cef_currently_on(threadId);
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL bool CefPostTask(CefThreadId threadId, CefRefPtr<CefTask> task) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: task; type: refptr_diff
+  DCHECK(task.get());
+  if (!task.get())
+    return false;
+
+  // Execute
+  int _retval = cef_post_task(threadId, CefTaskCppToC::Wrap(task));
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL bool CefPostDelayedTask(CefThreadId threadId,
+                                   CefRefPtr<CefTask> task,
+                                   int64 delay_ms) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: task; type: refptr_diff
+  DCHECK(task.get());
+  if (!task.get())
+    return false;
+
+  // Execute
+  int _retval =
+      cef_post_delayed_task(threadId, CefTaskCppToC::Wrap(task), delay_ms);
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL bool CefBeginTracing(const CefString& categories,
+                                CefRefPtr<CefCompletionCallback> callback) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Unverified params: categories, callback
+
+  // Execute
+  int _retval = cef_begin_tracing(categories.GetStruct(),
+                                  CefCompletionCallbackCppToC::Wrap(callback));
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL bool CefEndTracing(const CefString& tracing_file,
+                              CefRefPtr<CefEndTracingCallback> callback) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Unverified params: tracing_file, callback
+
+  // Execute
+  int _retval = cef_end_tracing(tracing_file.GetStruct(),
+                                CefEndTracingCallbackCppToC::Wrap(callback));
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL int64 CefNowFromSystemTraceTime() {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  int64 _retval = cef_now_from_system_trace_time();
+
+  // Return type: simple
+  return _retval;
+}
+
+CEF_GLOBAL bool CefRegisterExtension(const CefString& extension_name,
+                                     const CefString& javascript_code,
+                                     CefRefPtr<CefV8Handler> handler) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: extension_name; type: string_byref_const
+  DCHECK(!extension_name.empty());
+  if (extension_name.empty())
+    return false;
+  // Verify param: javascript_code; type: string_byref_const
+  DCHECK(!javascript_code.empty());
+  if (javascript_code.empty())
+    return false;
+  // Unverified params: handler
+
+  // Execute
+  int _retval = cef_register_extension(extension_name.GetStruct(),
+                                       javascript_code.GetStruct(),
+                                       CefV8HandlerCppToC::Wrap(handler));
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+CEF_GLOBAL void CefVisitWebPluginInfo(
+    CefRefPtr<CefWebPluginInfoVisitor> visitor) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: visitor; type: refptr_diff
+  DCHECK(visitor.get());
+  if (!visitor.get())
+    return;
+
+  // Execute
+  cef_visit_web_plugin_info(CefWebPluginInfoVisitorCppToC::Wrap(visitor));
+}
+
+CEF_GLOBAL void CefRefreshWebPlugins() {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  cef_refresh_web_plugins();
+}
+
+CEF_GLOBAL void CefUnregisterInternalWebPlugin(const CefString& path) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: path; type: string_byref_const
+  DCHECK(!path.empty());
+  if (path.empty())
+    return;
+
+  // Execute
+  cef_unregister_internal_web_plugin(path.GetStruct());
+}
+
+CEF_GLOBAL void CefRegisterWebPluginCrash(const CefString& path) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: path; type: string_byref_const
+  DCHECK(!path.empty());
+  if (path.empty())
+    return;
+
+  // Execute
+  cef_register_web_plugin_crash(path.GetStruct());
+}
+
+CEF_GLOBAL void CefIsWebPluginUnstable(
+    const CefString& path,
+    CefRefPtr<CefWebPluginUnstableCallback> callback) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: path; type: string_byref_const
+  DCHECK(!path.empty());
+  if (path.empty())
+    return;
+  // Verify param: callback; type: refptr_diff
+  DCHECK(callback.get());
+  if (!callback.get())
+    return;
+
+  // Execute
+  cef_is_web_plugin_unstable(
+      path.GetStruct(), CefWebPluginUnstableCallbackCppToC::Wrap(callback));
+}
+
+CEF_GLOBAL void CefRegisterWidevineCdm(
+    const CefString& path,
+    CefRefPtr<CefRegisterCdmCallback> callback) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: path; type: string_byref_const
+  DCHECK(!path.empty());
+  if (path.empty())
+    return;
+  // Unverified params: callback
+
+  // Execute
+  cef_register_widevine_cdm(path.GetStruct(),
+                            CefRegisterCdmCallbackCppToC::Wrap(callback));
+}
+
+CEF_GLOBAL void CefExecuteJavaScriptWithUserGestureForTests(
+    CefRefPtr<CefFrame> frame,
+    const CefString& javascript) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: frame; type: refptr_same
+  DCHECK(frame.get());
+  if (!frame.get())
+    return;
+  // Unverified params: javascript
+
+  // Execute
+  cef_execute_java_script_with_user_gesture_for_tests(
+      CefFrameCToCpp::Unwrap(frame), javascript.GetStruct());
+}
diff --git a/libcef_dll/wrapper_types.h b/libcef_dll/wrapper_types.h
index 62382cb..50f78fa 100644
--- a/libcef_dll/wrapper_types.h
+++ b/libcef_dll/wrapper_types.h
@@ -1,166 +1,168 @@
-// Copyright (c) 2018 The Chromium Embedded Framework Authors. All rights
-// reserved. Use of this source code is governed by a BSD-style license that
-// can be found in the LICENSE file.
-//
-// ---------------------------------------------------------------------------
-//
-// This file was generated by the CEF translator tool. If making changes by
-// hand only do so within the body of existing method and function
-// implementations. See the translator.README.txt file in the tools directory
-// for more information.
-//
-// $hash=47f1724d1f28c8295717e5df6ce8f5f8602ce1d5$
-//
-
-#ifndef CEF_LIBCEF_DLL_WRAPPER_TYPES_H_
-#define CEF_LIBCEF_DLL_WRAPPER_TYPES_H_
-#pragma once
-
-enum CefWrapperType {
-  WT_BASE_REF_COUNTED = 1,
-  WT_BASE_SCOPED,
-  WT_ACCESSIBILITY_HANDLER,
-  WT_APP,
-  WT_AUTH_CALLBACK,
-  WT_BEFORE_DOWNLOAD_CALLBACK,
-  WT_BINARY_VALUE,
-  WT_BOX_LAYOUT,
-  WT_BROWSER,
-  WT_BROWSER_HOST,
-  WT_BROWSER_PROCESS_HANDLER,
-  WT_BROWSER_VIEW,
-  WT_BROWSER_VIEW_DELEGATE,
-  WT_BUTTON,
-  WT_BUTTON_DELEGATE,
-  WT_CALLBACK,
-  WT_CLIENT,
-  WT_COMMAND_LINE,
-  WT_COMPLETION_CALLBACK,
-  WT_CONTEXT_MENU_HANDLER,
-  WT_CONTEXT_MENU_PARAMS,
-  WT_COOKIE_MANAGER,
-  WT_COOKIE_VISITOR,
-  WT_DOMDOCUMENT,
-  WT_DOMNODE,
-  WT_DOMVISITOR,
-  WT_DELETE_COOKIES_CALLBACK,
-  WT_DIALOG_HANDLER,
-  WT_DICTIONARY_VALUE,
-  WT_DISPLAY,
-  WT_DISPLAY_HANDLER,
-  WT_DOWNLOAD_HANDLER,
-  WT_DOWNLOAD_IMAGE_CALLBACK,
-  WT_DOWNLOAD_ITEM,
-  WT_DOWNLOAD_ITEM_CALLBACK,
-  WT_DRAG_DATA,
-  WT_DRAG_HANDLER,
-  WT_END_TRACING_CALLBACK,
-  WT_EXTENSION,
-  WT_EXTENSION_HANDLER,
-  WT_FILE_DIALOG_CALLBACK,
-  WT_FILL_LAYOUT,
-  WT_FIND_HANDLER,
-  WT_FOCUS_HANDLER,
-  WT_FRAME,
-  WT_GET_EXTENSION_RESOURCE_CALLBACK,
-  WT_IMAGE,
-  WT_JSDIALOG_CALLBACK,
-  WT_JSDIALOG_HANDLER,
-  WT_KEYBOARD_HANDLER,
-  WT_LABEL_BUTTON,
-  WT_LAYOUT,
-  WT_LIFE_SPAN_HANDLER,
-  WT_LIST_VALUE,
-  WT_LOAD_HANDLER,
-  WT_MENU_BUTTON,
-  WT_MENU_BUTTON_DELEGATE,
-  WT_MENU_BUTTON_PRESSED_LOCK,
-  WT_MENU_MODEL,
-  WT_MENU_MODEL_DELEGATE,
-  WT_NAVIGATION_ENTRY,
-  WT_NAVIGATION_ENTRY_VISITOR,
-  WT_PANEL,
-  WT_PANEL_DELEGATE,
-  WT_PDF_PRINT_CALLBACK,
-  WT_POST_DATA,
-  WT_POST_DATA_ELEMENT,
-  WT_PRINT_DIALOG_CALLBACK,
-  WT_PRINT_HANDLER,
-  WT_PRINT_JOB_CALLBACK,
-  WT_PRINT_SETTINGS,
-  WT_PROCESS_MESSAGE,
-  WT_READ_HANDLER,
-  WT_REGISTER_CDM_CALLBACK,
-  WT_RENDER_HANDLER,
-  WT_RENDER_PROCESS_HANDLER,
-  WT_REQUEST,
-  WT_REQUEST_CALLBACK,
-  WT_REQUEST_CONTEXT,
-  WT_REQUEST_CONTEXT_HANDLER,
-  WT_REQUEST_HANDLER,
-  WT_RESOLVE_CALLBACK,
-  WT_RESOURCE_BUNDLE,
-  WT_RESOURCE_BUNDLE_HANDLER,
-  WT_RESOURCE_HANDLER,
-  WT_RESPONSE,
-  WT_RESPONSE_FILTER,
-  WT_RUN_CONTEXT_MENU_CALLBACK,
-  WT_RUN_FILE_DIALOG_CALLBACK,
-  WT_SSLINFO,
-  WT_SSLSTATUS,
-  WT_SCHEME_HANDLER_FACTORY,
-  WT_SCHEME_REGISTRAR,
-  WT_SCROLL_VIEW,
-  WT_SELECT_CLIENT_CERTIFICATE_CALLBACK,
-  WT_SERVER,
-  WT_SERVER_HANDLER,
-  WT_SET_COOKIE_CALLBACK,
-  WT_STREAM_READER,
-  WT_STREAM_WRITER,
-  WT_STRING_VISITOR,
-  WT_TASK,
-  WT_TASK_RUNNER,
-  WT_TEXTFIELD,
-  WT_TEXTFIELD_DELEGATE,
-  WT_THREAD,
-  WT_TRANSLATOR_TEST,
-  WT_TRANSLATOR_TEST_REF_PTR_CLIENT,
-  WT_TRANSLATOR_TEST_REF_PTR_CLIENT_CHILD,
-  WT_TRANSLATOR_TEST_REF_PTR_LIBRARY,
-  WT_TRANSLATOR_TEST_REF_PTR_LIBRARY_CHILD,
-  WT_TRANSLATOR_TEST_REF_PTR_LIBRARY_CHILD_CHILD,
-  WT_TRANSLATOR_TEST_SCOPED_CLIENT,
-  WT_TRANSLATOR_TEST_SCOPED_CLIENT_CHILD,
-  WT_TRANSLATOR_TEST_SCOPED_LIBRARY,
-  WT_TRANSLATOR_TEST_SCOPED_LIBRARY_CHILD,
-  WT_TRANSLATOR_TEST_SCOPED_LIBRARY_CHILD_CHILD,
-  WT_URLREQUEST,
-  WT_URLREQUEST_CLIENT,
-  WT_V8ACCESSOR,
-  WT_V8ARRAY_BUFFER_RELEASE_CALLBACK,
-  WT_V8CONTEXT,
-  WT_V8EXCEPTION,
-  WT_V8HANDLER,
-  WT_V8INTERCEPTOR,
-  WT_V8STACK_FRAME,
-  WT_V8STACK_TRACE,
-  WT_V8VALUE,
-  WT_VALUE,
-  WT_VIEW,
-  WT_VIEW_DELEGATE,
-  WT_WAITABLE_EVENT,
-  WT_WEB_PLUGIN_INFO,
-  WT_WEB_PLUGIN_INFO_VISITOR,
-  WT_WEB_PLUGIN_UNSTABLE_CALLBACK,
-  WT_WINDOW,
-  WT_WINDOW_DELEGATE,
-  WT_WRITE_HANDLER,
-  WT_X509CERT_PRINCIPAL,
-  WT_X509CERTIFICATE,
-  WT_XML_READER,
-  WT_ZIP_READER,
-
-  WT_LAST
-};
-
-#endif  // CEF_LIBCEF_DLL_WRAPPER_TYPES_H_
+// Copyright (c) 2018 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool. If making changes by
+// hand only do so within the body of existing method and function
+// implementations. See the translator.README.txt file in the tools directory
+// for more information.
+//
+// $hash=82415360c0119d8ed7232f2ec70e00a3c3df4b38$
+//
+
+#ifndef CEF_LIBCEF_DLL_WRAPPER_TYPES_H_
+#define CEF_LIBCEF_DLL_WRAPPER_TYPES_H_
+#pragma once
+
+enum CefWrapperType {
+  WT_BASE_REF_COUNTED = 1,
+  WT_BASE_SCOPED,
+  WT_ACCESSIBILITY_HANDLER,
+  WT_APP,
+  WT_AUDIO_BUS,
+  WT_AUDIO_HANDLER,
+  WT_AUTH_CALLBACK,
+  WT_BEFORE_DOWNLOAD_CALLBACK,
+  WT_BINARY_VALUE,
+  WT_BOX_LAYOUT,
+  WT_BROWSER,
+  WT_BROWSER_HOST,
+  WT_BROWSER_PROCESS_HANDLER,
+  WT_BROWSER_VIEW,
+  WT_BROWSER_VIEW_DELEGATE,
+  WT_BUTTON,
+  WT_BUTTON_DELEGATE,
+  WT_CALLBACK,
+  WT_CLIENT,
+  WT_COMMAND_LINE,
+  WT_COMPLETION_CALLBACK,
+  WT_CONTEXT_MENU_HANDLER,
+  WT_CONTEXT_MENU_PARAMS,
+  WT_COOKIE_MANAGER,
+  WT_COOKIE_VISITOR,
+  WT_DOMDOCUMENT,
+  WT_DOMNODE,
+  WT_DOMVISITOR,
+  WT_DELETE_COOKIES_CALLBACK,
+  WT_DIALOG_HANDLER,
+  WT_DICTIONARY_VALUE,
+  WT_DISPLAY,
+  WT_DISPLAY_HANDLER,
+  WT_DOWNLOAD_HANDLER,
+  WT_DOWNLOAD_IMAGE_CALLBACK,
+  WT_DOWNLOAD_ITEM,
+  WT_DOWNLOAD_ITEM_CALLBACK,
+  WT_DRAG_DATA,
+  WT_DRAG_HANDLER,
+  WT_END_TRACING_CALLBACK,
+  WT_EXTENSION,
+  WT_EXTENSION_HANDLER,
+  WT_FILE_DIALOG_CALLBACK,
+  WT_FILL_LAYOUT,
+  WT_FIND_HANDLER,
+  WT_FOCUS_HANDLER,
+  WT_FRAME,
+  WT_GET_EXTENSION_RESOURCE_CALLBACK,
+  WT_IMAGE,
+  WT_JSDIALOG_CALLBACK,
+  WT_JSDIALOG_HANDLER,
+  WT_KEYBOARD_HANDLER,
+  WT_LABEL_BUTTON,
+  WT_LAYOUT,
+  WT_LIFE_SPAN_HANDLER,
+  WT_LIST_VALUE,
+  WT_LOAD_HANDLER,
+  WT_MENU_BUTTON,
+  WT_MENU_BUTTON_DELEGATE,
+  WT_MENU_BUTTON_PRESSED_LOCK,
+  WT_MENU_MODEL,
+  WT_MENU_MODEL_DELEGATE,
+  WT_NAVIGATION_ENTRY,
+  WT_NAVIGATION_ENTRY_VISITOR,
+  WT_PANEL,
+  WT_PANEL_DELEGATE,
+  WT_PDF_PRINT_CALLBACK,
+  WT_POST_DATA,
+  WT_POST_DATA_ELEMENT,
+  WT_PRINT_DIALOG_CALLBACK,
+  WT_PRINT_HANDLER,
+  WT_PRINT_JOB_CALLBACK,
+  WT_PRINT_SETTINGS,
+  WT_PROCESS_MESSAGE,
+  WT_READ_HANDLER,
+  WT_REGISTER_CDM_CALLBACK,
+  WT_RENDER_HANDLER,
+  WT_RENDER_PROCESS_HANDLER,
+  WT_REQUEST,
+  WT_REQUEST_CALLBACK,
+  WT_REQUEST_CONTEXT,
+  WT_REQUEST_CONTEXT_HANDLER,
+  WT_REQUEST_HANDLER,
+  WT_RESOLVE_CALLBACK,
+  WT_RESOURCE_BUNDLE,
+  WT_RESOURCE_BUNDLE_HANDLER,
+  WT_RESOURCE_HANDLER,
+  WT_RESPONSE,
+  WT_RESPONSE_FILTER,
+  WT_RUN_CONTEXT_MENU_CALLBACK,
+  WT_RUN_FILE_DIALOG_CALLBACK,
+  WT_SSLINFO,
+  WT_SSLSTATUS,
+  WT_SCHEME_HANDLER_FACTORY,
+  WT_SCHEME_REGISTRAR,
+  WT_SCROLL_VIEW,
+  WT_SELECT_CLIENT_CERTIFICATE_CALLBACK,
+  WT_SERVER,
+  WT_SERVER_HANDLER,
+  WT_SET_COOKIE_CALLBACK,
+  WT_STREAM_READER,
+  WT_STREAM_WRITER,
+  WT_STRING_VISITOR,
+  WT_TASK,
+  WT_TASK_RUNNER,
+  WT_TEXTFIELD,
+  WT_TEXTFIELD_DELEGATE,
+  WT_THREAD,
+  WT_TRANSLATOR_TEST,
+  WT_TRANSLATOR_TEST_REF_PTR_CLIENT,
+  WT_TRANSLATOR_TEST_REF_PTR_CLIENT_CHILD,
+  WT_TRANSLATOR_TEST_REF_PTR_LIBRARY,
+  WT_TRANSLATOR_TEST_REF_PTR_LIBRARY_CHILD,
+  WT_TRANSLATOR_TEST_REF_PTR_LIBRARY_CHILD_CHILD,
+  WT_TRANSLATOR_TEST_SCOPED_CLIENT,
+  WT_TRANSLATOR_TEST_SCOPED_CLIENT_CHILD,
+  WT_TRANSLATOR_TEST_SCOPED_LIBRARY,
+  WT_TRANSLATOR_TEST_SCOPED_LIBRARY_CHILD,
+  WT_TRANSLATOR_TEST_SCOPED_LIBRARY_CHILD_CHILD,
+  WT_URLREQUEST,
+  WT_URLREQUEST_CLIENT,
+  WT_V8ACCESSOR,
+  WT_V8ARRAY_BUFFER_RELEASE_CALLBACK,
+  WT_V8CONTEXT,
+  WT_V8EXCEPTION,
+  WT_V8HANDLER,
+  WT_V8INTERCEPTOR,
+  WT_V8STACK_FRAME,
+  WT_V8STACK_TRACE,
+  WT_V8VALUE,
+  WT_VALUE,
+  WT_VIEW,
+  WT_VIEW_DELEGATE,
+  WT_WAITABLE_EVENT,
+  WT_WEB_PLUGIN_INFO,
+  WT_WEB_PLUGIN_INFO_VISITOR,
+  WT_WEB_PLUGIN_UNSTABLE_CALLBACK,
+  WT_WINDOW,
+  WT_WINDOW_DELEGATE,
+  WT_WRITE_HANDLER,
+  WT_X509CERT_PRINCIPAL,
+  WT_X509CERTIFICATE,
+  WT_XML_READER,
+  WT_ZIP_READER,
+
+  WT_LAST
+};
+
+#endif  // CEF_LIBCEF_DLL_WRAPPER_TYPES_H_
diff --git a/tests/cefclient/browser/client_handler.h b/tests/cefclient/browser/client_handler.h
index d00973f..911dc78 100644
--- a/tests/cefclient/browser/client_handler.h
+++ b/tests/cefclient/browser/client_handler.h
@@ -6,6 +6,10 @@
 #define CEF_TESTS_CEFCLIENT_BROWSER_CLIENT_HANDLER_H_
 #pragma once
 
+#include <fstream>
+#include <iostream>
+#include <map>
+#include <memory>
 #include <set>
 #include <string>
 
@@ -26,6 +30,7 @@ class ClientDownloadImageCallback;
 // Client handler abstract base class. Provides common functionality shared by
 // all concrete client handler implementations.
 class ClientHandler : public CefClient,
+					  public CefAudioHandler,
                       public CefContextMenuHandler,
                       public CefDisplayHandler,
                       public CefDownloadHandler,
@@ -97,17 +102,18 @@ class ClientHandler : public CefClient,
   void DetachDelegate();
 
   // CefClient methods
-  CefRefPtr<CefContextMenuHandler> GetContextMenuHandler() OVERRIDE {
-    return this;
-  }
+  CefRefPtr<CefAudioHandler> GetAudioHandler() OVERRIDE { return this; }
+  CefRefPtr<CefContextMenuHandler> GetContextMenuHandler() OVERRIDE { return this; }
   CefRefPtr<CefDisplayHandler> GetDisplayHandler() OVERRIDE { return this; }
   CefRefPtr<CefDownloadHandler> GetDownloadHandler() OVERRIDE { return this; }
   CefRefPtr<CefDragHandler> GetDragHandler() OVERRIDE { return this; }
   CefRefPtr<CefFocusHandler> GetFocusHandler() OVERRIDE { return this; }
+  //CefRefPtr<CefGeolocationHandler> GetGeolocationHandler() OVERRIDE { return this; }
   CefRefPtr<CefKeyboardHandler> GetKeyboardHandler() OVERRIDE { return this; }
   CefRefPtr<CefLifeSpanHandler> GetLifeSpanHandler() OVERRIDE { return this; }
   CefRefPtr<CefLoadHandler> GetLoadHandler() OVERRIDE { return this; }
   CefRefPtr<CefRequestHandler> GetRequestHandler() OVERRIDE { return this; }
+
   bool OnProcessMessageReceived(CefRefPtr<CefBrowser> browser,
                                 CefProcessId source_process,
                                 CefRefPtr<CefProcessMessage> message) OVERRIDE;
@@ -285,6 +291,55 @@ class ClientHandler : public CefClient,
     download_favicon_images_ = allow;
   }
 
+  ///
+  // Called once an audio stream started
+  ///
+  /*--cef()--*/
+  // TODO: Not all platforms
+  // Also, do this in simple client test
+  virtual void OnAudioStreamStarted(CefRefPtr<CefBrowser> browser,
+									int audio_stream_id,
+									int sample_rate,
+									int channels,
+									int bits_per_sample,
+									int64 buffer_duration) {
+	  LOG(INFO) << "Starting audio stream: " << audio_stream_id << ", channels: " << channels <<
+				     ", samplerate: " << sample_rate <<
+				     ", buffer_duration: " << buffer_duration <<
+				     ", bits_per_sample: " << bits_per_sample;
+
+	  output_audio_files_map_[audio_stream_id] = std::make_shared<std::ofstream>();
+	  output_audio_files_map_[audio_stream_id]->open("/tmp/cef_client_audio_stream_" + std::to_string(audio_stream_id) + ".pcm", std::ios::out | std::ios::binary);
+  }
+
+  ///
+  // Called on every audio packet
+  ///
+  /*--cef()--*/
+  virtual void OnAudioStreamPacket(CefRefPtr<CefBrowser> browser,
+								   int audio_stream_id,
+								   const void* data,
+								   int data_length) {
+	  LOG(INFO) << "On audio stream packet: " << audio_stream_id << ", packet size: " << data_length;
+
+	  const uint8_t* data_array = static_cast<const uint8_t*>(data);
+
+	  for (int i = 0; i < data_length; ++i) {
+		  (*output_audio_files_map_[audio_stream_id]) << data_array[i];
+	  }
+  }
+
+  ///
+  // Called once an audio stream started
+  ///
+  /*--cef()--*/
+  virtual void OnAudioSteamStoped(CefRefPtr<CefBrowser> browser,
+  								int audio_stream_id) {
+    LOG(INFO) << "Stopping audio stream: " << audio_stream_id;
+    output_audio_files_map_[audio_stream_id]->close();
+    output_audio_files_map_.erase(audio_stream_id);
+  }
+
  private:
   friend class ClientDownloadImageCallback;
 
@@ -373,6 +428,8 @@ class ClientHandler : public CefClient,
   // Set of Handlers registered with the message router.
   MessageHandlerSet message_handler_set_;
 
+  std::map<int, std::shared_ptr<std::ofstream>> output_audio_files_map_;
+
   DISALLOW_COPY_AND_ASSIGN(ClientHandler);
 };
 
diff --git a/tests/cefsimple/simple_app.cc b/tests/cefsimple/simple_app.cc
index 5b0a7ef..ef1d046 100644
--- a/tests/cefsimple/simple_app.cc
+++ b/tests/cefsimple/simple_app.cc
@@ -84,6 +84,9 @@ void SimpleApp::OnContextInitialized() {
   if (url.empty())
     url = "http://www.google.com";
 
+  // debug:
+  url = "https://www.youtube.com/watch?v=niKblgZupOc";
+
   if (use_views) {
     // Create the BrowserView.
     CefRefPtr<CefBrowserView> browser_view = CefBrowserView::CreateBrowserView(
diff --git a/tests/cefsimple/simple_handler.cc b/tests/cefsimple/simple_handler.cc
index 1029904..5254063 100644
--- a/tests/cefsimple/simple_handler.cc
+++ b/tests/cefsimple/simple_handler.cc
@@ -59,6 +59,22 @@ void SimpleHandler::OnAfterCreated(CefRefPtr<CefBrowser> browser) {
 
   // Add to the list of existing browsers.
   browser_list_.push_back(browser);
+
+  // Test audio
+  //browser->GetHost()->StartMirroring();
+
+  // Create a PCM file
+  ///*
+  output_audio_file_ = std::make_shared<std::ofstream>();
+
+  if (output_audio_file_) {
+	  output_audio_file_->open("C:\\temp\\pcmOutfile.pcm", std::ios::out | std::ios::binary | std::ios::trunc);      //open a file
+
+	  if (!output_audio_file_->is_open()) {
+		  output_audio_file_ = NULL;
+	  }
+  }
+  //*/
 }
 
 bool SimpleHandler::DoClose(CefRefPtr<CefBrowser> browser) {
@@ -72,6 +88,9 @@ bool SimpleHandler::DoClose(CefRefPtr<CefBrowser> browser) {
     is_closing_ = true;
   }
 
+  if(output_audio_file_)
+	output_audio_file_->close();
+
   // Allow the close. For windowed browsers this will result in the OS close
   // event being sent.
   return false;
diff --git a/tests/cefsimple/simple_handler.h b/tests/cefsimple/simple_handler.h
index 10194f0..007ad5f 100644
--- a/tests/cefsimple/simple_handler.h
+++ b/tests/cefsimple/simple_handler.h
@@ -8,8 +8,15 @@
 #include "include/cef_client.h"
 
 #include <list>
+#include <fstream>
+#include <iostream>
+#include <map>
+#include <memory>
+#include <set>
+#include <string>
 
 class SimpleHandler : public CefClient,
+					  public CefAudioHandler,
                       public CefDisplayHandler,
                       public CefLifeSpanHandler,
                       public CefLoadHandler {
@@ -21,6 +28,10 @@ class SimpleHandler : public CefClient,
   static SimpleHandler* GetInstance();
 
   // CefClient methods:
+  CefRefPtr<CefAudioHandler> GetAudioHandler() OVERRIDE {
+	  return this;
+  }
+
   virtual CefRefPtr<CefDisplayHandler> GetDisplayHandler() OVERRIDE {
     return this;
   }
@@ -50,6 +61,78 @@ class SimpleHandler : public CefClient,
 
   bool IsClosing() const { return is_closing_; }
 
+  ///
+  // Called once an audio stream started
+  ///
+  /*--cef()--*/
+  // TODO: Not all platforms
+  // Also, do this in simple client test
+  virtual void OnAudioStreamStarted(CefRefPtr<CefBrowser> browser,
+	  int audio_stream_id,
+	  int sample_rate,
+	  int channels,
+	  int bits_per_sample,
+	  int64 buffer_duration) {
+
+	  LOG(INFO) << "Starting audio stream: " << audio_stream_id << ", channels: " << channels <<
+		  ", samplerate: " << sample_rate <<
+		  ", buffer_duration: " << buffer_duration <<
+		  ", bits_per_sample: " << bits_per_sample;
+
+	  //std::string strFilename = "cef_client_audio_stream_" + std::to_string(audio_stream_id) + ".pcm";
+	  //
+	  //output_audio_files_map_[audio_stream_id] = std::make_shared<std::ofstream>();
+	  //output_audio_files_map_[audio_stream_id]->open(strFilename, std::ios::out | std::ios::binary);
+  }
+
+  ///
+  // Called on every audio packet
+  ///
+  /*--cef()--*/
+  virtual void OnAudioStreamPacket(CefRefPtr<CefBrowser> browser,
+	  int audio_stream_id,
+	  const void* data,
+	  int data_length) {
+	  LOG(INFO) << "On audio stream packet: " << audio_stream_id << ", packet size: " << data_length;
+
+	  //const uint8_t* data_array = static_cast<const uint8_t*>(data);
+	  //
+	  //for (int i = 0; i < data_length; ++i) {
+		//  (*output_audio_files_map_[audio_stream_id]) << data_array[i];
+	  //}
+  }
+
+  virtual void OnAudioData(CefRefPtr<CefBrowser> browser, 
+	                       int frames, int channels, int bits_per_sample,
+						   const void* data_buffer) {
+
+	  LOG(INFO) << "cefsimple::OnData " << frames << " frames";
+
+	  // This is where we want to get the data out
+	  // TODO: Might need to provide an object to do so (CefAudioBus?)
+
+	  if (output_audio_file_) {
+		  //const uint16_t* data_array = static_cast<const uint8_t*>(data_buffer);
+		  const int16_t* data_array = static_cast<const int16_t*>(data_buffer);
+		  
+		  for (int i = 0; i < frames * channels; ++i) {
+		    //(*output_audio_file_) << data_array[i];
+			output_audio_file_->write((char*)&(data_array[i]), sizeof(int16_t));
+		  }
+	  }
+  }
+
+  ///
+  // Called once an audio stream stopped
+  ///
+  /*--cef()--*/
+  virtual void OnAudioSteamStoped(CefRefPtr<CefBrowser> browser,
+	  int audio_stream_id) {
+	  LOG(INFO) << "Stopping audio stream: " << audio_stream_id;
+	  //output_audio_files_map_[audio_stream_id]->close();
+	  //output_audio_files_map_.erase(audio_stream_id);
+  }
+
  private:
   // Platform-specific implementation.
   void PlatformTitleChange(CefRefPtr<CefBrowser> browser,
@@ -64,6 +147,10 @@ class SimpleHandler : public CefClient,
 
   bool is_closing_;
 
+  std::map<int, std::shared_ptr<std::ofstream>> output_audio_files_map_;
+
+  std::shared_ptr<std::ofstream> output_audio_file_;
+
   // Include the default reference counting implementation.
   IMPLEMENT_REFCOUNTING(SimpleHandler);
 };
