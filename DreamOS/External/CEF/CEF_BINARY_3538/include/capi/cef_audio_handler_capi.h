// Copyright (c) 2019 Marshall A. Greenblatt. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the name Chromium Embedded
// Framework nor the names of its contributors may be used to endorse
// or promote products derived from this software without specific prior
// written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//
// $hash=ca0a279956a0ffd18038adee875f4eed0b5d2a07$
//

#ifndef CEF_INCLUDE_CAPI_CEF_AUDIO_HANDLER_CAPI_H_
#define CEF_INCLUDE_CAPI_CEF_AUDIO_HANDLER_CAPI_H_
#pragma once

#include "include/capi/cef_audio_bus_capi.h"
#include "include/capi/cef_base_capi.h"
#include "include/capi/cef_browser_capi.h"

#ifdef __cplusplus
extern "C" {
#endif

///
// Implement this structure to handle audio events
///
typedef struct _cef_audio_handler_t {
  ///
  // Base structure.
  ///
  cef_base_ref_counted_t base;

  ///
  // Event handler for every new audio stream, |audio_stream_id| will identify
  // this stream in future events, and is unique across all other audio stream.
  // OnAudioStreamStarted can be called also after OnAudioSteamStopped was
  // called.
  //
  // Will be called on the UI thread
  ///
  void(CEF_CALLBACK* on_audio_stream_started)(struct _cef_audio_handler_t* self,
                                              struct _cef_browser_t* browser,
                                              int audio_stream_id,
                                              int sample_rate,
                                              int channels,
                                              int bits_per_sample,
                                              int64 buffer_duration);

  ///
  // Event handler for new audio packet from |audio_stream_id|, |data| is a
  // uint8 array representing a raw PCM packet |data_length| is the size of the
  // array.
  //
  // Will be called on the UI thread
  ///
  void(CEF_CALLBACK* on_audio_stream_packet)(struct _cef_audio_handler_t* self,
                                             struct _cef_browser_t* browser,
                                             int audio_stream_id,
                                             const void* data,
                                             int data_length);

  ///
  // Event handler for stream |audio_stream_id| has been stopped, for every
  // OnAudioStreamStarted, OnAudioSteamStopped will be called.
  //
  // Will be called on the UI thread
  ///
  void(CEF_CALLBACK* on_audio_steam_stopped)(struct _cef_audio_handler_t* self,
                                             struct _cef_browser_t* browser,
                                             int audio_stream_id);

  ///
  // Event handler for stream mirroring
  //
  // Will be called on the UI thread
  ///
  void(CEF_CALLBACK* on_audio_data)(struct _cef_audio_handler_t* self,
                                    struct _cef_browser_t* browser,
                                    int audio_stream_id,
                                    int frames,
                                    int channels,
                                    int bits_per_sample,
                                    const void* data_buffer);

  ///
  // Will be called before every OnAudioStreamPacket call, this getter should
  // return the amount of time in milliseconds the audio should be delayed.
  //
  // Returning any number greater then 0 will also delay any video attached to
  // the stream identified by |audio_stream_id|.
  //
  // The return value should be a non negative number.
  //
  // Will be called on the UI thread
  ///
  int(CEF_CALLBACK* get_latency_in_milliseconds)(
      struct _cef_audio_handler_t* self,
      struct _cef_browser_t* browser,
      int audio_stream_id);
} cef_audio_handler_t;

#ifdef __cplusplus
}
#endif

#endif  // CEF_INCLUDE_CAPI_CEF_AUDIO_HANDLER_CAPI_H_
